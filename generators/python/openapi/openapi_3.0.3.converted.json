{
  "openapi": "3.0.3",
  "info": {
    "title": "Opendatasoft's Automation API Documentation",
    "version": "1.0",
    "description": "Opendatasoft REST API to manage your portal and its catalog",
    "license": {
      "name": "Copyright Opendatasoft"
    },
    "contact": {
      "email": "support@opendatasoft.com"
    }
  },
  "servers": [
    {
      "url": "https://documentation-resources.opendatasoft.com/api/automation/v1.0",
      "description": "Example portal for documentation purposes."
    }
  ],
  "paths": {
    "/datasets/": {
      "get": {
        "summary": "List datasets",
        "tags": [
          "Datasets"
        ],
        "operationId": "list-datasets",
        "parameters": [
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "name": "dataset_id",
            "in": "query",
            "description": "Find a dataset from its `dataset_id`",
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "List all the datasets that can be edited by this user.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginatedResults"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "results": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Dataset"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        }
      },
      "post": {
        "summary": "Create dataset",
        "operationId": "create-dataset",
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Dataset"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ValidationError"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "description": "Create a dataset.",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Dataset"
              }
            }
          }
        },
        "tags": [
          "Datasets"
        ]
      }
    },
    "/datasets/{dataset_uid}/": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/dataset_identifier"
          }
        ],
        "summary": "Retrieve Dataset",
        "tags": [
          "Datasets"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Dataset"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "operationId": "retrieve-dataset",
        "description": "Retrieve a dataset"
      },
      "put": {
        "parameters": [
          {
            "$ref": "#/components/parameters/dataset_identifier"
          }
        ],
        "summary": "Update Dataset",
        "operationId": "update-dataset",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Dataset"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ValidationError"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "description": "Update a dataset",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Dataset"
              }
            }
          }
        },
        "tags": [
          "Datasets"
        ]
      },
      "delete": {
        "parameters": [
          {
            "$ref": "#/components/parameters/dataset_identifier"
          }
        ],
        "summary": "Delete Dataset",
        "operationId": "delete-dataset",
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "description": "Delete the dataset.",
        "tags": [
          "Datasets"
        ]
      }
    },
    "/datasets/{dataset_uid}/publish/": {
      "post": {
        "parameters": [
          {
            "$ref": "#/components/parameters/dataset_identifier"
          }
        ],
        "summary": "Publish dataset",
        "operationId": "publish-dataset",
        "responses": {
          "200": {
            "$ref": "#/components/responses/OK"
          },
          "400": {
            "$ref": "#/components/responses/InvalidDatasetStatus"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "description": "Make the dataset modifications available through the explore API. It may entail the processing of all the records.",
        "tags": [
          "Datasets"
        ]
      }
    },
    "/datasets/{dataset_uid}/publish_metadata/": {
      "post": {
        "parameters": [
          {
            "$ref": "#/components/parameters/dataset_identifier"
          }
        ],
        "summary": "Publish dataset metadata",
        "operationId": "publish-dataset-metadata",
        "responses": {
          "200": {
            "$ref": "#/components/responses/OK"
          },
          "400": {
            "$ref": "#/components/responses/InvalidDatasetStatus"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "description": "Publish dataset metadata",
        "tags": [
          "Datasets"
        ]
      }
    },
    "/datasets/{dataset_uid}/abort/": {
      "post": {
        "parameters": [
          {
            "$ref": "#/components/parameters/dataset_identifier"
          }
        ],
        "summary": "Abort dataset publishing",
        "operationId": "abort-dataset",
        "responses": {
          "200": {
            "$ref": "#/components/responses/OK"
          },
          "400": {
            "$ref": "#/components/responses/InvalidDatasetStatus"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "description": "Stop the current processing job and keep the processed records available in the explore API.",
        "tags": [
          "Datasets"
        ]
      }
    },
    "/datasets/{dataset_uid}/unpublish/": {
      "post": {
        "parameters": [
          {
            "$ref": "#/components/parameters/dataset_identifier"
          }
        ],
        "summary": "Unpublish dataset",
        "operationId": "unpublish-dataset",
        "responses": {
          "200": {
            "$ref": "#/components/responses/OK"
          },
          "400": {
            "$ref": "#/components/responses/InvalidDatasetStatus"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "description": "Remove the dataset from the explore API. Unpublishing a dataset does not delete the dataset.",
        "tags": [
          "Datasets"
        ]
      }
    },
    "/datasets/{dataset_uid}/copy/": {
      "post": {
        "parameters": [
          {
            "$ref": "#/components/parameters/dataset_identifier"
          }
        ],
        "summary": "Copy dataset",
        "operationId": "copy-dataset",
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Dataset"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "description": "Copy a dataset",
        "tags": [
          "Datasets"
        ]
      }
    },
    "/datasets/{dataset_uid}/status/": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/dataset_identifier"
          }
        ],
        "summary": "Retrieve dataset status",
        "operationId": "get-dataset-status",
        "responses": {
          "200": {
            "$ref": "#/components/responses/DatasetProcessingStatus"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "description": "Retrieves the current dataset status.\n\nThe dataset status describes the current state of a dataset, stating if it's published or not and the running operation.  It is a finite state machine, with the following properties:\n- a single state at a time\n- the list of possible states, fully known\n- the list of all transitions, fully known, each with the actions and conditions that can trigger them",
        "tags": [
          "Datasets"
        ]
      }
    },
    "/datasets/{dataset_uid}/feedbacks/": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/dataset_identifier"
          },
          {
            "name": "record_id",
            "in": "query",
            "description": "Find feedbacks made on a record with this id",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "is_archived",
            "in": "query",
            "description": "If true, list only archived feedbacks",
            "schema": {
              "type": "boolean",
              "default": 0
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by date of submission",
            "schema": {
              "type": "string",
              "default": "-created_at",
              "example": [
                "created_at"
              ]
            }
          }
        ],
        "summary": "List all dataset feedbacks",
        "operationId": "list-dataset-feedbacks",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginatedResults"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "results": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/DatasetFeedback"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "description": "List all dataset feedbacks. Archived feedbacks aren't listed by default, use the `is_archived` parameter to query them.",
        "tags": [
          "Dataset feedbacks"
        ]
      }
    },
    "/datasets/{dataset_uid}/feedbacks/{feedback_uid}/": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/dataset_identifier"
          },
          {
            "$ref": "#/components/parameters/feedback_identifier"
          }
        ],
        "summary": "Retrieve a dataset feedback",
        "operationId": "retrieve-dataset-feedback",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DatasetFeedback"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "description": "Retrieve a dataset feedback",
        "tags": [
          "Dataset feedbacks"
        ]
      }
    },
    "/datasets/{dataset_uid}/feedbacks/{feedback_uid}/archive/": {
      "post": {
        "parameters": [
          {
            "$ref": "#/components/parameters/dataset_identifier"
          },
          {
            "$ref": "#/components/parameters/feedback_identifier"
          }
        ],
        "summary": "Archive a dataset feedback",
        "operationId": "archive-dataset-feedback",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DatasetFeedback"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "description": "Archive a dataset feedback",
        "tags": [
          "Dataset feedbacks"
        ]
      }
    },
    "/datasets/{dataset_uid}/fields/": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/dataset_identifier"
          }
        ],
        "summary": "List dataset field configurations",
        "operationId": "list-dataset-field-configurations",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginatedResults"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "results": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/DatasetFieldConfiguration"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "description": "List fields configurations for a dataset. Please note that it reads in the order in which processors are applied.",
        "tags": [
          "Dataset fields"
        ]
      },
      "post": {
        "parameters": [
          {
            "$ref": "#/components/parameters/dataset_identifier"
          }
        ],
        "summary": "Append a new field configuration",
        "operationId": "create-dataset-field-configurations",
        "description": "Create a new field configuration for the dataset. The processor will be appended to the end of the fields configuration stack.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DatasetFieldConfiguration"
              },
              "examples": {
                "Rename dataset field": {
                  "value": {
                    "type": "rename",
                    "label": "Renaming field original_field_id",
                    "from_name": "original_field_id",
                    "to_name": "new_field_id",
                    "field_label": "New user friendly label"
                  },
                  "summary": "Rename a dataset field"
                },
                "Type dataset field": {
                  "value": {
                    "type": "type",
                    "label": "Typing field_id to integer",
                    "field": "field_id",
                    "type_param": "int"
                  },
                  "summary": "Type a field to integer"
                },
                "Describe dataset field": {
                  "value": {
                    "type": "description",
                    "label": "Describing field field_id",
                    "field": "field_id",
                    "description": "The user friendly description"
                  },
                  "summary": "Describe a dataset field"
                },
                "Mark a field as the unique ID": {
                  "value": {
                    "type": "annotate",
                    "label": "Making field_id the unique ID for the records",
                    "annotation": "id",
                    "field": "field_id"
                  },
                  "summary": "Mark a field as the unique ID"
                },
                "Set datetime field precision": {
                  "value": {
                    "type": "annotate",
                    "label": "Making the field_id have an hourly precision when used in timeseries",
                    "field": "field_id",
                    "annotation": "timeserie_precision",
                    "args": [
                      "hour"
                    ]
                  },
                  "summary": "Set datetime field precision"
                },
                "Set field unit": {
                  "value": {
                    "type": "annotate",
                    "label": "Mark the field_id field as representing square kilometers",
                    "field": "field_id",
                    "annotation": "unit",
                    "args": [
                      "km2"
                    ]
                  },
                  "summary": "Set field unit"
                },
                "Set decimal field precision": {
                  "value": {
                    "type": "annotate",
                    "label": "Force the field_id precision to 5 digits after the decimal point",
                    "field": "field_id",
                    "annotation": "decimals",
                    "args": [
                      5
                    ]
                  },
                  "summary": "Set decimal field precision"
                },
                "Set a field as multivalued": {
                  "value": {
                    "type": "annotate",
                    "label": "Mark the field_id as multivalued, with a comma as the values separator",
                    "field": "field_id",
                    "annotation": "multivalued",
                    "args": [
                      ","
                    ]
                  },
                  "summary": "Set a field as multivalued"
                },
                "Order dataset field": {
                  "value": {
                    "type": "order",
                    "label": "Ordering dataset fields",
                    "args": [
                      "field3",
                      "field2",
                      "field1"
                    ]
                  },
                  "summary": "Order dataset fields"
                },
                "Delete dataset field": {
                  "value": {
                    "type": "delete",
                    "label": "Deleting field field_id",
                    "field": "field_id"
                  },
                  "summary": "Delete a dataset field"
                }
              }
            }
          },
          "description": "Create a field configuration in a dataset"
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DatasetFieldConfiguration"
                },
                "examples": {
                  "Rename dataset field": {
                    "value": {
                      "uid": "pr_qf2hyt",
                      "type": "rename",
                      "label": "Renaming field original_field_id",
                      "from_name": "original_field_id",
                      "to_name": "new_field_id",
                      "field_label": "New user friendly label"
                    },
                    "summary": "Rename a dataset field"
                  },
                  "Type dataset field": {
                    "value": {
                      "uid": "pr_qf2hyt",
                      "type": "type",
                      "label": "Typing field_id to integer",
                      "field": "field_id",
                      "type_param": "int"
                    },
                    "summary": "Type a field to integer"
                  },
                  "Describe dataset field": {
                    "value": {
                      "uid": "pr_qf2hyt",
                      "type": "description",
                      "label": "Describing field field_id",
                      "field": "field_id",
                      "description": "The user friendly description"
                    },
                    "summary": "Describe a dataset field"
                  },
                  "Mark a field as the unique ID": {
                    "value": {
                      "uid": "pr_qf2hyt",
                      "type": "annotate",
                      "label": "Making field_id the unique ID for the records",
                      "annotation": "id",
                      "field": "field_id"
                    },
                    "summary": "Mark a field as the unique ID"
                  },
                  "Set datetime field precision": {
                    "value": {
                      "uid": "pr_qf2hyt",
                      "type": "annotate",
                      "label": "Making the field_id have an hourly precision when used in timeseries",
                      "field": "field_id",
                      "annotation": "timeserie_precision",
                      "args": [
                        "hour"
                      ]
                    },
                    "summary": "Set datetime field precision"
                  },
                  "Set field unit": {
                    "value": {
                      "uid": "pr_qf2hyt",
                      "type": "annotate",
                      "label": "Mark the field_id field as representing square kilometers",
                      "field": "field_id",
                      "annotation": "unit",
                      "args": [
                        "km2"
                      ]
                    },
                    "summary": "Set field unit"
                  },
                  "Set decimal field precision": {
                    "value": {
                      "uid": "pr_qf2hyt",
                      "type": "annotate",
                      "label": "Force the field_id precision to 5 digits after the decimal point",
                      "field": "field_id",
                      "annotation": "decimals",
                      "args": [
                        5
                      ]
                    },
                    "summary": "Set decimal field precision"
                  },
                  "Set a field as multivalued": {
                    "value": {
                      "uid": "pr_qf2hyt",
                      "type": "annotate",
                      "label": "Mark the field_id as multivalued, with a comma as the values separator",
                      "field": "field_id",
                      "annotation": "multivalued",
                      "args": [
                        ","
                      ]
                    },
                    "summary": "Set a field as multivalued"
                  },
                  "Order dataset field": {
                    "value": {
                      "uid": "pr_qf2hyt",
                      "type": "order",
                      "label": "Ordering dataset fields",
                      "args": [
                        "field3",
                        "field2",
                        "field1"
                      ]
                    },
                    "summary": "Order dataset fields"
                  },
                  "Delete dataset field": {
                    "value": {
                      "uid": "pr_qf2hyt",
                      "type": "delete",
                      "label": "Deleting field field_id",
                      "field": "field_id"
                    },
                    "summary": "Delete a dataset field"
                  }
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "tags": [
          "Dataset fields"
        ]
      }
    },
    "/datasets/{dataset_uid}/fields/{field_uid}/": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/dataset_identifier"
          },
          {
            "$ref": "#/components/parameters/field_identifier"
          }
        ],
        "summary": "Retrieve dataset field configuration",
        "operationId": "retrieve-dataset-field-configuration",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DatasetFieldConfiguration"
                },
                "examples": {
                  "Rename dataset field": {
                    "value": {
                      "uid": "pr_qf2hyt",
                      "type": "rename",
                      "label": "Renaming field original_field_id",
                      "from_name": "original_field_id",
                      "to_name": "new_field_id",
                      "field_label": "New user friendly label"
                    },
                    "summary": "Rename a dataset field"
                  },
                  "Type dataset field": {
                    "value": {
                      "uid": "pr_qf2hyt",
                      "type": "type",
                      "label": "Typing field_id to integer",
                      "field": "field_id",
                      "type_param": "int"
                    },
                    "summary": "Type a field to integer"
                  },
                  "Describe dataset field": {
                    "value": {
                      "uid": "pr_qf2hyt",
                      "type": "description",
                      "label": "Describing field field_id",
                      "field": "field_id",
                      "description": "The user friendly description"
                    },
                    "summary": "Describe a dataset field"
                  },
                  "Mark a field as the unique ID": {
                    "value": {
                      "uid": "pr_qf2hyt",
                      "type": "annotate",
                      "label": "Making field_id the unique ID for the records",
                      "annotation": "id",
                      "field": "field_id"
                    },
                    "summary": "Mark a field as the unique ID"
                  },
                  "Set datetime field precision": {
                    "value": {
                      "uid": "pr_qf2hyt",
                      "type": "annotate",
                      "label": "Making the field_id have an hourly precision when used in timeseries",
                      "field": "field_id",
                      "annotation": "timeserie_precision",
                      "args": [
                        "hour"
                      ]
                    },
                    "summary": "Set datetime field precision"
                  },
                  "Set field unit": {
                    "value": {
                      "uid": "pr_qf2hyt",
                      "type": "annotate",
                      "label": "Mark the field_id field as representing square kilometers",
                      "field": "field_id",
                      "annotation": "unit",
                      "args": [
                        "km2"
                      ]
                    },
                    "summary": "Set field unit"
                  },
                  "Set decimal field precision": {
                    "value": {
                      "uid": "pr_qf2hyt",
                      "type": "annotate",
                      "label": "Force the field_id precision to 5 digits after the decimal point",
                      "field": "field_id",
                      "annotation": "decimals",
                      "args": [
                        5
                      ]
                    },
                    "summary": "Set decimal field precision"
                  },
                  "Set a field as multivalued": {
                    "value": {
                      "uid": "pr_qf2hyt",
                      "type": "annotate",
                      "label": "Mark the field_id as multivalued, with a comma as the values separator",
                      "field": "field_id",
                      "annotation": "multivalued",
                      "args": [
                        ","
                      ]
                    },
                    "summary": "Set a field as multivalued"
                  },
                  "Order dataset field": {
                    "value": {
                      "uid": "pr_qf2hyt",
                      "type": "order",
                      "label": "Ordering dataset fields",
                      "args": [
                        "field3",
                        "field2",
                        "field1"
                      ]
                    },
                    "summary": "Order dataset fields"
                  },
                  "Delete dataset field": {
                    "value": {
                      "uid": "pr_qf2hyt",
                      "type": "delete",
                      "label": "Deleting field field_id",
                      "field": "field_id"
                    },
                    "summary": "Delete a dataset field"
                  }
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "description": "Retrieve a dataset field configuration",
        "tags": [
          "Dataset fields"
        ]
      },
      "put": {
        "parameters": [
          {
            "$ref": "#/components/parameters/dataset_identifier"
          },
          {
            "$ref": "#/components/parameters/field_identifier"
          }
        ],
        "summary": "Update dataset field configuration",
        "operationId": "update-dataset-field",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DatasetFieldConfiguration"
                },
                "examples": {
                  "Rename dataset field": {
                    "value": {
                      "uid": "pr_qf2hyt",
                      "type": "rename",
                      "label": "Renaming field original_field_id",
                      "from_name": "original_field_id",
                      "to_name": "new_field_id",
                      "field_label": "New user friendly label"
                    },
                    "summary": "Rename a dataset field"
                  },
                  "Type dataset field": {
                    "value": {
                      "uid": "pr_qf2hyt",
                      "type": "type",
                      "label": "Typing field_id to integer",
                      "field": "field_id",
                      "type_param": "int"
                    },
                    "summary": "Type a field to integer"
                  },
                  "Describe dataset field": {
                    "value": {
                      "uid": "pr_qf2hyt",
                      "type": "description",
                      "label": "Describing field field_id",
                      "field": "field_id",
                      "description": "The user friendly description"
                    },
                    "summary": "Describe a dataset field"
                  },
                  "Mark a field as the unique ID": {
                    "value": {
                      "uid": "pr_qf2hyt",
                      "type": "annotate",
                      "label": "Making field_id the unique ID for the records",
                      "annotation": "id",
                      "field": "field_id"
                    },
                    "summary": "Mark a field as the unique ID"
                  },
                  "Set datetime field precision": {
                    "value": {
                      "uid": "pr_qf2hyt",
                      "type": "annotate",
                      "label": "Making the field_id have an hourly precision when used in timeseries",
                      "field": "field_id",
                      "annotation": "timeserie_precision",
                      "args": [
                        "hour"
                      ]
                    },
                    "summary": "Set datetime field precision"
                  },
                  "Set field unit": {
                    "value": {
                      "uid": "pr_qf2hyt",
                      "type": "annotate",
                      "label": "Mark the field_id field as representing square kilometers",
                      "field": "field_id",
                      "annotation": "unit",
                      "args": [
                        "km2"
                      ]
                    },
                    "summary": "Set field unit"
                  },
                  "Set decimal field precision": {
                    "value": {
                      "uid": "pr_qf2hyt",
                      "type": "annotate",
                      "label": "Force the field_id precision to 5 digits after the decimal point",
                      "field": "field_id",
                      "annotation": "decimals",
                      "args": [
                        5
                      ]
                    },
                    "summary": "Set decimal field precision"
                  },
                  "Set a field as multivalued": {
                    "value": {
                      "uid": "pr_qf2hyt",
                      "type": "annotate",
                      "label": "Mark the field_id as multivalued, with a comma as the values separator",
                      "field": "field_id",
                      "annotation": "multivalued",
                      "args": [
                        ","
                      ]
                    },
                    "summary": "Set a field as multivalued"
                  },
                  "Order dataset field": {
                    "value": {
                      "uid": "pr_qf2hyt",
                      "type": "order",
                      "label": "Ordering dataset fields",
                      "args": [
                        "field3",
                        "field2",
                        "field1"
                      ]
                    },
                    "summary": "Order dataset fields"
                  },
                  "Delete dataset field": {
                    "value": {
                      "uid": "pr_qf2hyt",
                      "type": "delete",
                      "label": "Deleting field field_id",
                      "field": "field_id"
                    },
                    "summary": "Delete a dataset field"
                  }
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "description": "Update a field configuration in a dataset",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DatasetFieldConfiguration"
              },
              "examples": {
                "Rename dataset field": {
                  "value": {
                    "type": "rename",
                    "label": "Renaming field original_field_id",
                    "from_name": "original_field_id",
                    "to_name": "new_field_id",
                    "field_label": "New user friendly label"
                  },
                  "summary": "Rename a dataset field"
                },
                "Type dataset field": {
                  "value": {
                    "type": "type",
                    "label": "Typing field_id to integer",
                    "field": "field_id",
                    "type_param": "int"
                  },
                  "summary": "Type a field to integer"
                },
                "Describe dataset field": {
                  "value": {
                    "type": "description",
                    "label": "Describing field field_id",
                    "field": "field_id",
                    "description": "The user friendly description"
                  },
                  "summary": "Describe a dataset field"
                },
                "Mark a field as the unique ID": {
                  "value": {
                    "type": "annotate",
                    "label": "Making field_id the unique ID for the records",
                    "annotation": "id",
                    "field": "field_id"
                  },
                  "summary": "Mark a field as the unique ID"
                },
                "Set datetime field precision": {
                  "value": {
                    "type": "annotate",
                    "label": "Making the field_id have an hourly precision when used in timeseries",
                    "field": "field_id",
                    "annotation": "timeserie_precision",
                    "args": [
                      "hour"
                    ]
                  },
                  "summary": "Set datetime field precision"
                },
                "Set field unit": {
                  "value": {
                    "type": "annotate",
                    "label": "Mark the field_id field as representing square kilometers",
                    "field": "field_id",
                    "annotation": "unit",
                    "args": [
                      "km2"
                    ]
                  },
                  "summary": "Set field unit"
                },
                "Set decimal field precision": {
                  "value": {
                    "type": "annotate",
                    "label": "Force the field_id precision to 5 digits after the decimal point",
                    "field": "field_id",
                    "annotation": "decimals",
                    "args": [
                      5
                    ]
                  },
                  "summary": "Set decimal field precision"
                },
                "Set a field as multivalued": {
                  "value": {
                    "type": "annotate",
                    "label": "Mark the field_id as multivalued, with a comma as the values separator",
                    "field": "field_id",
                    "annotation": "multivalued",
                    "args": [
                      ","
                    ]
                  },
                  "summary": "Set a field as multivalued"
                },
                "Order dataset field": {
                  "value": {
                    "type": "order",
                    "label": "Ordering dataset fields",
                    "args": [
                      "field3",
                      "field2",
                      "field1"
                    ]
                  },
                  "summary": "Order dataset fields"
                },
                "Delete dataset field": {
                  "value": {
                    "type": "delete",
                    "label": "Deleting field field_id",
                    "field": "field_id"
                  },
                  "summary": "Delete a dataset field"
                }
              }
            }
          }
        },
        "tags": [
          "Dataset fields"
        ]
      },
      "delete": {
        "parameters": [
          {
            "$ref": "#/components/parameters/dataset_identifier"
          },
          {
            "$ref": "#/components/parameters/field_identifier"
          }
        ],
        "summary": "Destroy a field configuration",
        "operationId": "destroy-dataset-field-configurations",
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "description": "Remove a field configuration from a dataset",
        "tags": [
          "Dataset fields"
        ]
      }
    },
    "/datasets/{dataset_uid}/processors/": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/dataset_identifier"
          }
        ],
        "summary": "List dataset processors",
        "operationId": "list-dataset-processors",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginatedResults"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "results": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/DatasetProcessor"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "description": "List configured processors for a dataset. Please note that it reads in the order in which processors are applied.",
        "tags": [
          "Dataset processors"
        ]
      },
      "post": {
        "parameters": [
          {
            "$ref": "#/components/parameters/dataset_identifier"
          }
        ],
        "summary": "Append a new processor",
        "operationId": "create-dataset-processor",
        "description": "Create a new processor for the dataset. The processor will be appended to the end of the processing stack.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DatasetProcessor"
              },
              "example": {
                "type": "string_replace",
                "label": "replace old value with new value",
                "field": "my_field",
                "old": "old_value",
                "new": "new_value"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DatasetProcessor"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "tags": [
          "Dataset processors"
        ]
      }
    },
    "/datasets/{dataset_uid}/processors/{processor_uid}/": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/dataset_identifier"
          },
          {
            "$ref": "#/components/parameters/processor_identifier"
          }
        ],
        "summary": "Retrieve dataset processor",
        "operationId": "retrieve-dataset-processor",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DatasetProcessor"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "description": "Retrieve a dataset processor",
        "tags": [
          "Dataset processors"
        ]
      },
      "put": {
        "parameters": [
          {
            "$ref": "#/components/parameters/dataset_identifier"
          },
          {
            "$ref": "#/components/parameters/processor_identifier"
          }
        ],
        "summary": "Update dataset processor",
        "operationId": "update-dataset-processor",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DatasetProcessor"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "description": "Update a processor in a dataset",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DatasetProcessor"
              },
              "example": {
                "type": "string_replace",
                "label": "replace old value with new value",
                "field": "my_field",
                "old": "old_value",
                "new": "new_value"
              }
            }
          }
        },
        "tags": [
          "Dataset processors"
        ]
      },
      "delete": {
        "parameters": [
          {
            "$ref": "#/components/parameters/dataset_identifier"
          },
          {
            "$ref": "#/components/parameters/processor_identifier"
          }
        ],
        "summary": "Delete a dataset processor",
        "operationId": "delete-dataset-processor",
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "description": "Remove a processor from a dataset.",
        "tags": [
          "Dataset processors"
        ]
      }
    },
    "/extractors/": {
      "get": {
        "summary": "List extractors",
        "tags": [
          "Dataset resources"
        ],
        "operationId": "list-extractors",
        "parameters": [],
        "description": "List available extractors",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Extractor"
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/datasets/{dataset_uid}/resources/": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/dataset_identifier"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "schema": {
              "type": "string",
              "enum": [
                "datasource.connection",
                "datasource.dataset"
              ]
            },
            "in": "query",
            "name": "expand",
            "description": "The list of fields to expand."
          }
        ],
        "summary": "List dataset resources",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginatedResults"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "results": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Resource"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "operationId": "list-dataset-resources",
        "description": "List all resources that are linked to a dataset.",
        "tags": [
          "Dataset resources"
        ]
      },
      "post": {
        "parameters": [
          {
            "$ref": "#/components/parameters/dataset_identifier"
          }
        ],
        "summary": "Create dataset resource",
        "operationId": "create-dataset-resource",
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Resource"
                },
                "examples": {
                  "HTTP": {
                    "value": {
                      "uid": "re_qf2hyt",
                      "type": "csvfile",
                      "title": "Fromages",
                      "display_name": "https://my-server.com/fromages.csv",
                      "extraction_infos": {
                        "label": "CSV File",
                        "type": "csvfile"
                      },
                      "origin": {
                        "label": "HTTP",
                        "type": "http"
                      },
                      "params": {
                        "doublequote": true,
                        "encoding": "utf-8",
                        "first_row_no": 1,
                        "headers_first_row": true,
                        "separator": ";"
                      },
                      "datasource": {
                        "type": "http",
                        "connection": {
                          "uid": "co_qf2hyt"
                        },
                        "headers": [
                          {
                            "name": "header-name",
                            "value": "header-value"
                          }
                        ],
                        "relative_url": "/fromages.csv"
                      },
                      "updated_at": "2022-01-01T00:00:00Z"
                    }
                  },
                  "Uploaded file": {
                    "value": {
                      "uid": "re_qf2hyt",
                      "type": "csvfile",
                      "title": "fromages.csv",
                      "display_name": "fromages.csv",
                      "extraction_infos": {
                        "label": "CSV File",
                        "type": "csvfile"
                      },
                      "origin": {
                        "label": "Uploaded file",
                        "type": "uploaded_file"
                      },
                      "params": {
                        "doublequote": true,
                        "encoding": "utf-8",
                        "first_row_no": 1,
                        "headers_first_row": true,
                        "separator": ";"
                      },
                      "datasource": {
                        "type": "uploaded_file",
                        "file": {
                          "uid": "fromages.csv"
                        }
                      },
                      "updated_at": "2022-01-01T00:00:00Z"
                    }
                  },
                  "Federated": {
                    "value": {
                      "uid": "re_qf2hyt",
                      "type": "federated",
                      "title": "re_qf2hyt",
                      "params": {},
                      "display_name": "Federated dataset",
                      "extraction_infos": null,
                      "origin": {
                        "label": "Federated dataset",
                        "type": "federated"
                      },
                      "datasource": {
                        "type": "federated",
                        "dataset": {
                          "dataset_id": "georef-united-states-of-america-county"
                        },
                        "domain": {
                          "domain_id": "public"
                        },
                        "permissions_user": {
                          "username": "louise.data"
                        },
                        "parameters": {
                          "refine.year": 2022
                        }
                      },
                      "updated_at": "2022-01-01T00:00:00Z"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ValidationError"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "description": "Create a new resource for the dataset. For now the supported resources in the API are HTTP, (s)FTP, uploaded files, S3, Azure Blob Storage, dataset federation, Snowflake, JCDecaux, Sharepoint and Google Drive.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Resource"
              },
              "examples": {
                "HTTP": {
                  "value": {
                    "type": "csvfile",
                    "title": "fromages.csv",
                    "params": {
                      "doublequote": true,
                      "encoding": "utf-8",
                      "first_row_no": 1,
                      "headers_first_row": true,
                      "separator": ";"
                    },
                    "datasource": {
                      "type": "http",
                      "connection": {
                        "type": "http",
                        "url": "https://my-server.com",
                        "auth": null
                      },
                      "headers": [
                        {
                          "name": "header-name",
                          "value": "header-value"
                        }
                      ],
                      "relative_url": "/fromages.csv"
                    }
                  }
                },
                "HTTP (with BasicAuth)": {
                  "value": {
                    "type": "csvfile",
                    "title": "fromages.csv",
                    "params": {
                      "doublequote": true,
                      "encoding": "utf-8",
                      "first_row_no": 1,
                      "headers_first_row": true,
                      "separator": ";"
                    },
                    "datasource": {
                      "type": "http",
                      "connection": {
                        "type": "http",
                        "url": "https://my-server.com",
                        "auth": {
                          "type": "basic_auth",
                          "username": "my_username",
                          "password": "my_password"
                        }
                      },
                      "headers": [
                        {
                          "name": "header-name",
                          "value": "header-value"
                        }
                      ],
                      "relative_url": "/fromages.csv"
                    }
                  }
                },
                "HTTP (with reusable connection)": {
                  "value": {
                    "type": "csvfile",
                    "title": "fromages.csv",
                    "params": {
                      "doublequote": true,
                      "encoding": "utf-8",
                      "first_row_no": 1,
                      "headers_first_row": true,
                      "separator": ";"
                    },
                    "datasource": {
                      "type": "http",
                      "connection": {
                        "uid": "co_qf2hyt"
                      },
                      "headers": [
                        {
                          "name": "header-name",
                          "value": "header-value"
                        }
                      ],
                      "relative_url": "/fromages.csv"
                    }
                  }
                },
                "Uploaded file": {
                  "value": {
                    "type": "csvfile",
                    "title": "fromages.csv",
                    "params": {
                      "doublequote": true,
                      "encoding": "utf-8",
                      "first_row_no": 1,
                      "headers_first_row": true,
                      "separator": ";"
                    },
                    "datasource": {
                      "type": "uploaded_file",
                      "file": {
                        "uid": "fromages.csv"
                      }
                    }
                  }
                },
                "Federated": {
                  "value": {
                    "type": "federated",
                    "title": "fromages.csv",
                    "datasource": {
                      "type": "federated",
                      "dataset": {
                        "dataset_id": "georef-united-states-of-america-county"
                      },
                      "domain": {
                        "domain_id": "public"
                      },
                      "impersonate_permission": true,
                      "parameters": {
                        "refine.year": 2022
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Dataset resources"
        ]
      }
    },
    "/datasets/{dataset_uid}/resources/guess_extractors/": {
      "post": {
        "parameters": [
          {
            "$ref": "#/components/parameters/dataset_identifier"
          }
        ],
        "summary": "Guess unsaved resource extractors",
        "operationId": "guess-unsaved-resource-extractors",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Extractor"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ValidationError"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "datasource": {
                    "$ref": "#/components/schemas/Datasource"
                  }
                },
                "required": [
                  "datasource"
                ]
              }
            }
          }
        },
        "description": "Guess the resource extractors",
        "tags": [
          "Dataset resources"
        ]
      }
    },
    "/datasets/{dataset_uid}/resources/guess_extractor_params/": {
      "post": {
        "parameters": [
          {
            "$ref": "#/components/parameters/dataset_identifier"
          }
        ],
        "summary": "Guess unsaved resource extractor parameters",
        "operationId": "guess-unsaved-resource-extractor-params",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "extractor": {
                      "type": "string",
                      "example": "csvfile"
                    },
                    "params": {
                      "type": "object",
                      "example": {
                        "doublequote": true,
                        "encoding": "utf-8",
                        "first_row_no": 1,
                        "headers_first_row": true,
                        "separator": ";"
                      }
                    }
                  },
                  "required": [
                    "extractor",
                    "params"
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ValidationError"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "datasource": {
                    "$ref": "#/components/schemas/Datasource"
                  },
                  "type": {
                    "type": "string",
                    "example": "csvfile"
                  }
                },
                "required": [
                  "type",
                  "datasource"
                ]
              }
            }
          }
        },
        "tags": [
          "Dataset resources"
        ],
        "description": "Guess the extractor parameters"
      }
    },
    "/datasets/{dataset_uid}/resources/preview/": {
      "post": {
        "parameters": [
          {
            "$ref": "#/components/parameters/dataset_identifier"
          }
        ],
        "summary": "Preview unsaved resource records",
        "operationId": "resource-unsaved-preview",
        "responses": {
          "200": {
            "$ref": "#/components/responses/ResourcePreview"
          },
          "400": {
            "$ref": "#/components/responses/ValidationError"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "datasource": {
                    "$ref": "#/components/schemas/Datasource"
                  },
                  "type": {
                    "type": "string",
                    "example": "csvfile"
                  },
                  "params": {
                    "type": "object",
                    "additionalProperties": true,
                    "example": {
                      "doublequote": true,
                      "encoding": "utf-8",
                      "first_row_no": 1,
                      "headers_first_row": true,
                      "separator": ";"
                    }
                  }
                },
                "required": [
                  "type",
                  "datasource"
                ]
              }
            }
          }
        },
        "description": "In order to test a resource configuration, it can be useful to preview the data. This endpoint uses a resource configuration passed in the payload to generate a preview.\n\nThe preview is composed of the fields definitions and the content of the first records up to 20.",
        "tags": [
          "Dataset resources"
        ]
      }
    },
    "/datasets/{dataset_uid}/resources/{resource_uid}/": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/dataset_identifier"
          },
          {
            "$ref": "#/components/parameters/resource_identifier"
          },
          {
            "schema": {
              "type": "string",
              "enum": [
                "datasource.connection",
                "datasource.dataset"
              ]
            },
            "in": "query",
            "name": "expand",
            "description": "The list of fields to expand."
          }
        ],
        "summary": "Retrieve dataset resource",
        "tags": [
          "Dataset resources"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Resource"
                },
                "examples": {
                  "HTTP": {
                    "value": {
                      "uid": "re_qf2hyt",
                      "type": "csvfile",
                      "title": "Fromages",
                      "display_name": "https://my-server.com/fromages.csv",
                      "extraction_infos": {
                        "label": "CSV File",
                        "type": "csvfile"
                      },
                      "origin": {
                        "label": "HTTP",
                        "type": "http"
                      },
                      "params": {
                        "doublequote": true,
                        "encoding": "utf-8",
                        "first_row_no": 1,
                        "headers_first_row": true,
                        "separator": ";"
                      },
                      "datasource": {
                        "type": "http",
                        "connection": {
                          "uid": "co_qf2hyt"
                        },
                        "headers": [
                          {
                            "name": "header-name",
                            "value": "header-value"
                          }
                        ],
                        "relative_url": "/fromages.csv"
                      },
                      "updated_at": "2022-01-01T00:00:00Z"
                    }
                  },
                  "Uploaded file": {
                    "value": {
                      "uid": "re_qf2hyt",
                      "type": "csvfile",
                      "title": "fromages.csv",
                      "display_name": "fromages.csv",
                      "extraction_infos": {
                        "label": "CSV File",
                        "type": "csvfile"
                      },
                      "origin": {
                        "label": "Uploaded file",
                        "type": "uploaded_file"
                      },
                      "params": {
                        "doublequote": true,
                        "encoding": "utf-8",
                        "first_row_no": 1,
                        "headers_first_row": true,
                        "separator": ";"
                      },
                      "datasource": {
                        "type": "uploaded_file",
                        "file": {
                          "uid": "fromages.csv"
                        }
                      },
                      "updated_at": "2022-01-01T00:00:00Z"
                    }
                  },
                  "Federated": {
                    "value": {
                      "uid": "re_qf2hyt",
                      "type": "federated",
                      "title": "re_qf2hyt",
                      "params": {},
                      "display_name": "Federated dataset",
                      "extraction_infos": null,
                      "origin": {
                        "label": "Federated dataset",
                        "type": "federated"
                      },
                      "datasource": {
                        "type": "federated",
                        "dataset": {
                          "dataset_id": "georef-united-states-of-america-county"
                        },
                        "domain": {
                          "domain_id": "public"
                        },
                        "permissions_user": {
                          "username": "louise.data"
                        },
                        "parameters": {
                          "refine.year": 2022
                        }
                      },
                      "updated_at": "2022-01-01T00:00:00Z"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "operationId": "retrieve-dataset-resource",
        "description": "Retrieve one dataset resource specified by its `uid`."
      },
      "put": {
        "parameters": [
          {
            "$ref": "#/components/parameters/dataset_identifier"
          },
          {
            "$ref": "#/components/parameters/resource_identifier"
          }
        ],
        "summary": "Update dataset resource",
        "operationId": "update-dataset-resource",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Resource"
                },
                "examples": {
                  "HTTP": {
                    "value": {
                      "uid": "re_qf2hyt",
                      "type": "csvfile",
                      "title": "Fromages",
                      "display_name": "https://my-server.com/fromages.csv",
                      "extraction_infos": {
                        "label": "CSV File",
                        "type": "csvfile"
                      },
                      "origin": {
                        "label": "HTTP",
                        "type": "http"
                      },
                      "params": {
                        "doublequote": true,
                        "encoding": "utf-8",
                        "first_row_no": 1,
                        "headers_first_row": true,
                        "separator": ";"
                      },
                      "datasource": {
                        "type": "http",
                        "connection": {
                          "uid": "co_qf2hyt"
                        },
                        "headers": [
                          {
                            "name": "header-name",
                            "value": "header-value"
                          }
                        ],
                        "relative_url": "/fromages.csv"
                      },
                      "updated_at": "2022-01-01T00:00:00Z"
                    }
                  },
                  "Uploaded file": {
                    "value": {
                      "uid": "re_qf2hyt",
                      "type": "csvfile",
                      "title": "fromages.csv",
                      "display_name": "fromages.csv",
                      "extraction_infos": {
                        "label": "CSV File",
                        "type": "csvfile"
                      },
                      "origin": {
                        "label": "Uploaded file",
                        "type": "uploaded_file"
                      },
                      "params": {
                        "doublequote": true,
                        "encoding": "utf-8",
                        "first_row_no": 1,
                        "headers_first_row": true,
                        "separator": ";"
                      },
                      "datasource": {
                        "type": "uploaded_file",
                        "file": {
                          "uid": "fromages.csv"
                        }
                      },
                      "updated_at": "2022-01-01T00:00:00Z"
                    }
                  },
                  "Federated": {
                    "value": {
                      "uid": "re_qf2hyt",
                      "type": "federated",
                      "title": "re_qf2hyt",
                      "params": {},
                      "display_name": "Federated dataset",
                      "extraction_infos": null,
                      "origin": {
                        "label": "Federated dataset",
                        "type": "federated"
                      },
                      "datasource": {
                        "type": "federated",
                        "dataset": {
                          "dataset_id": "georef-united-states-of-america-county"
                        },
                        "domain": {
                          "domain_id": "public"
                        },
                        "permissions_user": {
                          "username": "louise.data"
                        },
                        "parameters": {
                          "refine.year": 2022
                        }
                      },
                      "updated_at": "2022-01-01T00:00:00Z"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ValidationError"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "description": "Update one dataset resource specified by its `uid`.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Resource"
              },
              "examples": {
                "HTTP": {
                  "value": {
                    "type": "csvfile",
                    "title": "fromages.csv",
                    "params": {
                      "doublequote": true,
                      "encoding": "utf-8",
                      "first_row_no": 1,
                      "headers_first_row": true,
                      "separator": ";"
                    },
                    "datasource": {
                      "type": "http",
                      "connection": {
                        "uid": "co_qf2hyt"
                      },
                      "headers": [
                        {
                          "name": "header-name",
                          "value": "header-value"
                        }
                      ],
                      "relative_url": "/fromages.csv"
                    }
                  }
                },
                "HTTP (with BasicAuth)": {
                  "value": {
                    "type": "csvfile",
                    "title": "fromages.csv",
                    "params": {
                      "doublequote": true,
                      "encoding": "utf-8",
                      "first_row_no": 1,
                      "headers_first_row": true,
                      "separator": ";"
                    },
                    "datasource": {
                      "type": "http",
                      "connection": {
                        "uid": "co_qf2hyt"
                      },
                      "headers": [
                        {
                          "name": "header-name",
                          "value": "header-value"
                        }
                      ],
                      "relative_url": "/fromages.csv"
                    }
                  }
                },
                "Uploaded file": {
                  "value": {
                    "type": "csvfile",
                    "title": "fromages.csv",
                    "params": {
                      "doublequote": true,
                      "encoding": "utf-8",
                      "first_row_no": 1,
                      "headers_first_row": true,
                      "separator": ";"
                    },
                    "datasource": {
                      "type": "uploaded_file",
                      "file": {
                        "uid": "fromages.csv"
                      }
                    }
                  }
                },
                "Federated": {
                  "value": {
                    "type": "federated",
                    "title": "fromages.csv",
                    "datasource": {
                      "type": "federated",
                      "dataset": {
                        "dataset_id": "georef-united-states-of-america-county"
                      },
                      "domain": {
                        "domain_id": "public"
                      },
                      "impersonate_permission": true,
                      "parameters": {
                        "refine.year": 2022
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Dataset resources"
        ]
      },
      "delete": {
        "parameters": [
          {
            "$ref": "#/components/parameters/dataset_identifier"
          },
          {
            "$ref": "#/components/parameters/resource_identifier"
          }
        ],
        "summary": "Delete dataset resource",
        "operationId": "delete-dataset-resource",
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "description": "Delete one dataset resource specified by its `uid`.",
        "tags": [
          "Dataset resources"
        ]
      }
    },
    "/datasets/{dataset_uid}/resources/{resource_uid}/guess_extractors/": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/dataset_identifier"
          },
          {
            "$ref": "#/components/parameters/resource_identifier"
          }
        ],
        "summary": "Guess resource extractors",
        "tags": [
          "Dataset resources"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Extractor"
                  }
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "operationId": "resource-guess-extractors",
        "description": "Guess the resource extractors"
      }
    },
    "/datasets/{dataset_uid}/resources/{resource_uid}/clean_cache/": {
      "post": {
        "parameters": [
          {
            "$ref": "#/components/parameters/dataset_identifier"
          },
          {
            "$ref": "#/components/parameters/resource_identifier"
          }
        ],
        "summary": "Clean cache of resource",
        "operationId": "clean-resource-cache",
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "400": {
            "$ref": "#/components/responses/ValidationError"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "description": "Clean the cache of a given resource.",
        "tags": [
          "Dataset resources"
        ]
      }
    },
    "/datasets/{dataset_uid}/resources/{resource_uid}/guess_extractors_params/": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/dataset_identifier"
          },
          {
            "$ref": "#/components/parameters/resource_identifier"
          }
        ],
        "summary": "Guess resource extractor parameters",
        "tags": [
          "Dataset resources"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "extractor": {
                      "type": "string",
                      "example": "csvfile"
                    },
                    "params": {
                      "type": "object",
                      "example": {
                        "doublequote": true,
                        "encoding": "utf-8",
                        "first_row_no": 1,
                        "headers_first_row": true,
                        "separator": ";"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "operationId": "resource-guess-extractor-params",
        "description": "Guess the resource extractor parameters"
      }
    },
    "/datasets/{dataset_uid}/resources/{resource_uid}/preview/": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/dataset_identifier"
          },
          {
            "$ref": "#/components/parameters/resource_identifier"
          }
        ],
        "summary": "Preview resource records",
        "tags": [
          "Dataset resources"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ResourcePreview"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "operationId": "resource-preview",
        "description": "In order to test a resource configuration, it can be useful to preview the data. This endpoint uses the configuration of a resource specified by its `uid` to generate a preview.\n\nThe preview is composed of the fields definitions and the content of the first records up to 20."
      }
    },
    "/datasets/{dataset_uid}/resources/{resource_uid}/recover/": {
      "post": {
        "parameters": [
          {
            "$ref": "#/components/parameters/dataset_identifier"
          },
          {
            "$ref": "#/components/parameters/resource_identifier"
          }
        ],
        "summary": "Recover realtime data",
        "operationId": "recover-resource",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Resource"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/InvalidDatasetStatus"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "description": "Recover the data of a realtime resource. The dataset must be published.",
        "tags": [
          "Dataset resources"
        ]
      }
    },
    "/datasets/{dataset_uid}/resources/{resource_uid}/delete_recover_data/": {
      "post": {
        "parameters": [
          {
            "$ref": "#/components/parameters/dataset_identifier"
          },
          {
            "$ref": "#/components/parameters/resource_identifier"
          }
        ],
        "summary": "Delete realtime recovered data",
        "operationId": "delete-recover-data-resource",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Resource"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/InvalidDatasetStatus"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "description": "Delete the recovered data of a realtime resource. The dataset must be published.",
        "tags": [
          "Dataset resources"
        ]
      }
    },
    "/datasets/{dataset_uid}/resources/{resource_uid}/enable/": {
      "post": {
        "parameters": [
          {
            "$ref": "#/components/parameters/dataset_identifier"
          },
          {
            "$ref": "#/components/parameters/resource_identifier"
          }
        ],
        "summary": "Enable realtime resource",
        "operationId": "enable-resource",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Resource"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "description": "Enable a realtime resource",
        "tags": [
          "Dataset resources"
        ]
      }
    },
    "/datasets/{dataset_uid}/resources/{resource_uid}/disable/": {
      "post": {
        "parameters": [
          {
            "$ref": "#/components/parameters/dataset_identifier"
          },
          {
            "$ref": "#/components/parameters/resource_identifier"
          }
        ],
        "summary": "Disable realtime resource",
        "operationId": "disable-resource",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Resource"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "description": "Disable a realtime resource",
        "tags": [
          "Dataset resources"
        ]
      }
    },
    "/datasets/{dataset_uid}/resources/{resource_uid}/renew_api_key/": {
      "post": {
        "parameters": [
          {
            "$ref": "#/components/parameters/dataset_identifier"
          },
          {
            "$ref": "#/components/parameters/resource_identifier"
          }
        ],
        "summary": "Renew realtime resource API key",
        "operationId": "resource-renew-api-key",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Resource"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "description": "Renew a realtime resource API key",
        "tags": [
          "Dataset resources"
        ]
      }
    },
    "/datasets/{dataset_uid}/resources/files/": {
      "post": {
        "parameters": [
          {
            "$ref": "#/components/parameters/dataset_identifier"
          }
        ],
        "summary": "Upload resource file",
        "operationId": "upload-resource-file",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DatasetFile"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ValidationError"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "description": "Upload a file to be used in a dataset resource. The HTTP request must be a multipart request with a `file` property.",
        "tags": [
          "Dataset resources"
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                },
                "required": [
                  "file"
                ]
              }
            }
          }
        }
      }
    },
    "/datasets/{dataset_uid}/resources/files/{file_uid}/": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/dataset_identifier"
          },
          {
            "$ref": "#/components/parameters/file_identifier"
          }
        ],
        "summary": "Retrieve dataset resource file",
        "operationId": "retrieve-dataset-resource-file",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DatasetFile"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "description": "Retrieve a dataset resource uploaded file",
        "tags": [
          "Dataset resources"
        ]
      }
    },
    "/datasets/{dataset_uid}/resources/files/{file_uid}/download/": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/dataset_identifier"
          },
          {
            "$ref": "#/components/parameters/file_identifier"
          }
        ],
        "summary": "Download dataset resource file",
        "operationId": "download-dataset-resource-file",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            },
            "headers": {
              "Content-disposition": {
                "schema": {
                  "type": "string"
                },
                "description": "attachment; filename=\"{filename}\"; filename*=UTF-8''{filename}"
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "description": "Download a dataset resource file",
        "tags": [
          "Dataset resources"
        ]
      }
    },
    "/datasets/{dataset_uid}/attachments/": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/dataset_identifier"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          }
        ],
        "summary": "List dataset attachments",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginatedResults"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "results": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/DatasetAttachment"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "operationId": "list-dataset-attachments",
        "description": "List all attachments to a dataset.",
        "tags": [
          "Dataset attachments"
        ]
      },
      "post": {
        "parameters": [
          {
            "$ref": "#/components/parameters/dataset_identifier"
          }
        ],
        "summary": "Create dataset attachment",
        "operationId": "create-dataset-attachment",
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DatasetAttachment"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ValidationError"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "description": "Create a dataset attachment",
        "tags": [
          "Dataset attachments"
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                },
                "required": [
                  "file"
                ]
              }
            }
          }
        }
      }
    },
    "/datasets/{dataset_uid}/attachments/{attachment_uid}/": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/dataset_identifier"
          },
          {
            "$ref": "#/components/parameters/attachment_identifier"
          }
        ],
        "summary": "Retrieve dataset attachment",
        "tags": [
          "Dataset attachments"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DatasetAttachment"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "operationId": "retrieve-dataset-attachment",
        "description": "Retrieve a dataset attachment"
      },
      "delete": {
        "parameters": [
          {
            "$ref": "#/components/parameters/dataset_identifier"
          },
          {
            "$ref": "#/components/parameters/attachment_identifier"
          }
        ],
        "summary": "Delete dataset attachment",
        "operationId": "delete-dataset-attachment",
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "description": "Delete a dataset attachment",
        "tags": [
          "Dataset attachments"
        ]
      }
    },
    "/datasets/{dataset_uid}/attachments/{attachment_uid}/download/": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/dataset_identifier"
          },
          {
            "$ref": "#/components/parameters/attachment_identifier"
          }
        ],
        "summary": "Download dataset attachment",
        "tags": [
          "Dataset attachments"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            },
            "headers": {
              "Content-disposition": {
                "schema": {
                  "type": "string"
                },
                "description": "attachment; filename=\"{filename}\"; filename*=UTF-8''{filename}"
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "operationId": "download-dataset-attachment",
        "description": "Download the dataset attachment file"
      }
    },
    "/datasets/{dataset_uid}/alternative_exports/": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/dataset_identifier"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          }
        ],
        "summary": "List dataset alternative exports",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginatedResults"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "results": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/DatasetAlternativeExport"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "operationId": "list-dataset-alternative-exports",
        "description": "List dataset alternative exports",
        "tags": [
          "Dataset alternative exports"
        ]
      },
      "post": {
        "parameters": [
          {
            "$ref": "#/components/parameters/dataset_identifier"
          }
        ],
        "summary": "Create dataset alternative export",
        "operationId": "create-dataset-alternative-export",
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DatasetAlternativeExport"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ValidationError"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "description": "Create a dataset alternative export",
        "tags": [
          "Dataset alternative exports"
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "type": "string",
                    "minLength": 1
                  },
                  "type": {
                    "type": "string",
                    "enum": [
                      "uploaded_file"
                    ]
                  },
                  "file": {
                    "type": "string",
                    "format": "binary"
                  },
                  "description": {
                    "type": "string"
                  }
                },
                "required": [
                  "type",
                  "title",
                  "file"
                ]
              }
            }
          }
        }
      }
    },
    "/datasets/{dataset_uid}/alternative_exports/{export_uid}/": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/dataset_identifier"
          },
          {
            "$ref": "#/components/parameters/alternative_export_identifier"
          }
        ],
        "summary": "Retrieve dataset alternative export",
        "tags": [
          "Dataset alternative exports"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DatasetAlternativeExport"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "operationId": "retrieve-dataset-alternative-export",
        "description": "Retrieve a dataset alternative export"
      },
      "put": {
        "parameters": [
          {
            "$ref": "#/components/parameters/dataset_identifier"
          },
          {
            "$ref": "#/components/parameters/alternative_export_identifier"
          }
        ],
        "summary": "Update dataset alternative export",
        "operationId": "update-dataset-alternative-export",
        "tags": [
          "Dataset alternative exports"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "type": "string",
                    "minLength": 1
                  },
                  "type": {
                    "type": "string",
                    "enum": [
                      "uploaded_file"
                    ]
                  },
                  "description": {
                    "type": "string"
                  }
                },
                "required": [
                  "title",
                  "type"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DatasetAlternativeExport"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "description": "Update a dataset alternative export"
      },
      "delete": {
        "parameters": [
          {
            "$ref": "#/components/parameters/dataset_identifier"
          },
          {
            "$ref": "#/components/parameters/alternative_export_identifier"
          }
        ],
        "summary": "Delete dataset alternative export",
        "operationId": "delete-dataset-alternative-export",
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "description": "Delete a dataset alternative export",
        "tags": [
          "Dataset alternative exports"
        ]
      }
    },
    "/datasets/{dataset_uid}/alternative_exports/{export_uid}/download/": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/dataset_identifier"
          },
          {
            "$ref": "#/components/parameters/alternative_export_identifier"
          }
        ],
        "summary": "Download dataset alternative export",
        "tags": [
          "Dataset alternative exports"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            },
            "headers": {
              "Content-disposition": {
                "schema": {
                  "type": "string"
                },
                "description": "attachment; filename=\"{filename}\"; filename*=UTF-8''{filename}"
              }
            }
          },
          "303": {
            "description": "Redirection",
            "headers": {
              "Location": {
                "schema": {
                  "type": "string"
                },
                "description": "{url}"
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "operationId": "download-dataset-alternative_exports",
        "description": "Download the uploaded file alternative export or be redirected to the URL alternative export."
      }
    },
    "/datasets/{dataset_uid}/security/users/": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/dataset_identifier"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          }
        ],
        "summary": "List dataset user rulesets",
        "tags": [
          "Dataset security"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginatedResults"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "results": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/DatasetUserSecurity"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "operationId": "list-dataset-user-security",
        "description": "List the dataset user-level security rulesets"
      },
      "post": {
        "parameters": [
          {
            "$ref": "#/components/parameters/dataset_identifier"
          }
        ],
        "summary": "Create dataset user ruleset",
        "operationId": "create-dataset-user-security",
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DatasetUserSecurity"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ValidationError"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "description": "Create a dataset user-level security ruleset",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DatasetUserSecurity"
              }
            }
          }
        },
        "tags": [
          "Dataset security"
        ]
      }
    },
    "/datasets/{dataset_uid}/security/users/{username}/": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/dataset_identifier"
          },
          {
            "$ref": "#/components/parameters/user_identifier"
          }
        ],
        "summary": "Retrieve dataset user ruleset",
        "tags": [
          "Dataset security"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DatasetUserSecurity"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "operationId": "retrieve-dataset-user-security",
        "description": "Retrieve a dataset user-level security ruleset",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DatasetUserSecurity"
              }
            }
          }
        }
      },
      "put": {
        "parameters": [
          {
            "$ref": "#/components/parameters/dataset_identifier"
          },
          {
            "$ref": "#/components/parameters/user_identifier"
          }
        ],
        "summary": "Update dataset user ruleset",
        "operationId": "update-dataset-user-security",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DatasetUserSecurity"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ValidationError"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "description": "Update a dataset user-level security ruleset",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DatasetUserSecurity"
              }
            }
          }
        },
        "tags": [
          "Dataset security"
        ]
      },
      "delete": {
        "parameters": [
          {
            "$ref": "#/components/parameters/dataset_identifier"
          },
          {
            "$ref": "#/components/parameters/user_identifier"
          }
        ],
        "summary": "Delete dataset user ruleset",
        "operationId": "delete-dataset-user-security",
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "description": "Delete a dataset user-level security ruleset",
        "tags": [
          "Dataset security"
        ]
      }
    },
    "/datasets/{dataset_uid}/security/groups/": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/dataset_identifier"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          }
        ],
        "summary": "List dataset group rulesets",
        "tags": [
          "Dataset security"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginatedResults"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "results": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/DatasetGroupSecurity"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "operationId": "list-dataset-group-security",
        "description": "List the dataset group level security rulesets"
      },
      "post": {
        "parameters": [
          {
            "$ref": "#/components/parameters/dataset_identifier"
          }
        ],
        "summary": "Create dataset group ruleset",
        "operationId": "create-dataset-group-security",
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DatasetGroupSecurity"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ValidationError"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "description": "Create a dataset group level security ruleset",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DatasetGroupSecurity"
              }
            }
          }
        },
        "tags": [
          "Dataset security"
        ]
      }
    },
    "/datasets/{dataset_uid}/security/groups/{group_uid}/": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/dataset_identifier"
          },
          {
            "$ref": "#/components/parameters/group_identifier"
          }
        ],
        "summary": "Retrieve dataset group ruleset",
        "tags": [
          "Dataset security"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DatasetGroupSecurity"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "operationId": "retrieve-dataset-group-security",
        "description": "Retrieve a dataset group level security ruleset",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DatasetGroupSecurity"
              }
            }
          }
        }
      },
      "put": {
        "parameters": [
          {
            "$ref": "#/components/parameters/dataset_identifier"
          },
          {
            "$ref": "#/components/parameters/group_identifier"
          }
        ],
        "summary": "Update dataset group ruleset",
        "operationId": "update-dataset-group-security",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DatasetGroupSecurity"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ValidationError"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "description": "Update a dataset group level security ruleset",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DatasetGroupSecurity"
              }
            }
          }
        },
        "tags": [
          "Dataset security"
        ]
      },
      "delete": {
        "parameters": [
          {
            "$ref": "#/components/parameters/dataset_identifier"
          },
          {
            "$ref": "#/components/parameters/group_identifier"
          }
        ],
        "summary": "Delete dataset group ruleset",
        "operationId": "delete-dataset-group-security",
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "description": "Delete a dataset group level security ruleset",
        "tags": [
          "Dataset security"
        ]
      }
    },
    "/datasets/{dataset_uid}/versions/": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/dataset_identifier"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          }
        ],
        "summary": "List all versions",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginatedResults"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "results": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/DatasetVersion"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "operationId": "list-dataset-versions",
        "description": "List the dataset versions.\n\n**Note:** only the last 20 versions of a dataset are stored in the platform database.\nFor this reason, the API response will contain at most 20 results.",
        "tags": [
          "Dataset versions"
        ]
      }
    },
    "/datasets/{dataset_uid}/versions/{version_uid}/": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/version_identifier"
          },
          {
            "$ref": "#/components/parameters/dataset_identifier"
          }
        ],
        "summary": "Retrieve version",
        "operationId": "retrieve-dataset-version",
        "description": "Retrieve a dataset version.",
        "tags": [
          "Dataset versions"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DatasetVersion"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/datasets/{dataset_uid}/versions/{version_uid}/restore/": {
      "post": {
        "parameters": [
          {
            "$ref": "#/components/parameters/version_identifier"
          },
          {
            "$ref": "#/components/parameters/dataset_identifier"
          }
        ],
        "summary": "Restore version",
        "operationId": "restore-version",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Dataset"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "description": "Restores a dataset to the selected version. Restoring a version will not erase the versions history, but rather create a new version encapsulating the restoration.",
        "tags": [
          "Dataset versions"
        ]
      }
    },
    "/datasets/{dataset_uid}/schedules/": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/dataset_identifier"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          }
        ],
        "summary": "List dataset schedules",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginatedResults"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "results": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/DatasetSchedule"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "operationId": "list-dataset-schedules",
        "description": "List dataset schedules",
        "tags": [
          "Dataset schedules"
        ]
      },
      "post": {
        "parameters": [
          {
            "$ref": "#/components/parameters/dataset_identifier"
          }
        ],
        "summary": "Create a dataset schedule",
        "operationId": "create-dataset-schedule",
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DatasetSchedule"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ValidationError"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "description": "Create a dataset schedule",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DatasetSchedule"
              }
            }
          }
        },
        "tags": [
          "Dataset schedules"
        ]
      }
    },
    "/datasets/{dataset_uid}/schedules/{schedule_uid}/": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/dataset_identifier"
          },
          {
            "$ref": "#/components/parameters/schedule_identifier"
          }
        ],
        "summary": "Retrieve a dataset schedule",
        "tags": [
          "Dataset schedules"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DatasetSchedule"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "operationId": "retrieve-dataset-schedule",
        "description": "Retrieve a dataset schedule"
      },
      "put": {
        "parameters": [
          {
            "$ref": "#/components/parameters/dataset_identifier"
          },
          {
            "$ref": "#/components/parameters/schedule_identifier"
          }
        ],
        "summary": "Update a dataset schedule",
        "operationId": "update-dataset-schedule",
        "tags": [
          "Dataset schedules"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DatasetSchedule"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DatasetSchedule"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "description": "Update a dataset schedule"
      },
      "delete": {
        "parameters": [
          {
            "$ref": "#/components/parameters/dataset_identifier"
          },
          {
            "$ref": "#/components/parameters/schedule_identifier"
          }
        ],
        "summary": "Delete a dataset schedule",
        "operationId": "delete-dataset-schedule",
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "description": "Delete a dataset schedule",
        "tags": [
          "Dataset schedules"
        ]
      }
    },
    "/datasets/{dataset_uid}/metadata/": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/dataset_identifier"
          }
        ],
        "summary": "List all dataset metadata",
        "tags": [
          "Dataset metadata"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DatasetMetadata"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "operationId": "list-all-dataset-metadata",
        "description": "Returns the set of metadata for the dataset with the given UID."
      },
      "put": {
        "parameters": [
          {
            "$ref": "#/components/parameters/dataset_identifier"
          }
        ],
        "summary": "Update all dataset metadata",
        "operationId": "update-all-dataset-metadata",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DatasetMetadata"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ValidationError"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "description": "Update all dataset metadata at once. This operation replaces the dataset metadata with the given payload: if a  metadata is omitted, it will be removed from the dataset.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DatasetMetadata"
              }
            }
          }
        },
        "tags": [
          "Dataset metadata"
        ]
      }
    },
    "/datasets/{dataset_uid}/metadata/{template_name}/": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/dataset_identifier"
          },
          {
            "$ref": "#/components/parameters/metadata_template_identifier"
          }
        ],
        "summary": "List a template's dataset metadata",
        "tags": [
          "Dataset metadata"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DatasetMetadataTemplate"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "operationId": "list-template-dataset-metadata",
        "description": "Returns the set of metadata within the given template for the dataset."
      },
      "put": {
        "parameters": [
          {
            "$ref": "#/components/parameters/dataset_identifier"
          },
          {
            "$ref": "#/components/parameters/metadata_template_identifier"
          }
        ],
        "summary": "Update a template's dataset metadata",
        "operationId": "update-template-dataset-metadata",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DatasetMetadataTemplate"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ValidationError"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "description": "Update dataset metadata within a given template. This operation replaces the dataset metadata with the given payload:  if a metadata is omitted, it will be removed from the dataset.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DatasetMetadataTemplate"
              }
            }
          }
        },
        "tags": [
          "Dataset metadata"
        ]
      }
    },
    "/datasets/{dataset_uid}/metadata/{template_name}/{template_field_name}/": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/dataset_identifier"
          },
          {
            "$ref": "#/components/parameters/metadata_template_identifier"
          },
          {
            "$ref": "#/components/parameters/metadata_template_field_identifier"
          }
        ],
        "summary": "Retrieve a metadata",
        "tags": [
          "Dataset metadata"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DatasetMetadataValue"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "operationId": "retrieve-template-field-dataset-metadata",
        "description": "Retrieve the metadata with the given name within the given template."
      },
      "put": {
        "parameters": [
          {
            "$ref": "#/components/parameters/dataset_identifier"
          },
          {
            "$ref": "#/components/parameters/metadata_template_identifier"
          },
          {
            "$ref": "#/components/parameters/metadata_template_field_identifier"
          }
        ],
        "summary": "Update a metadata",
        "operationId": "update-template-field-dataset-metadata",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DatasetMetadataValue"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ValidationError"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "description": "Update the metadata with the given name within the given template.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DatasetMetadataValue"
              }
            }
          }
        },
        "tags": [
          "Dataset metadata"
        ]
      },
      "delete": {
        "parameters": [
          {
            "$ref": "#/components/parameters/dataset_identifier"
          },
          {
            "$ref": "#/components/parameters/metadata_template_identifier"
          },
          {
            "$ref": "#/components/parameters/metadata_template_field_identifier"
          }
        ],
        "summary": "Delete a metadata",
        "operationId": "delete-template-field-dataset-metadata",
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "description": "Delete the metadata with the given name within the given template.",
        "tags": [
          "Dataset metadata"
        ]
      }
    },
    "/datasource_connections/": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "name": "sort",
            "schema": {
              "type": "string",
              "enum": [
                "created_at",
                "updated_at",
                "type",
                "dataset_count"
              ],
              "default": "created_at"
            },
            "in": "query",
            "description": "Sort results with respect to the specified properties. You can prefix the property with the minus sign (`-`) for descending order, e.g. `-created_at`."
          }
        ],
        "summary": "List connections",
        "operationId": "list-connections",
        "description": "List the datasources connections",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginatedResults"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "results": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Connection"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "tags": [
          "Datasources connections"
        ]
      },
      "post": {
        "summary": "Create connection",
        "operationId": "create-connection",
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Connection"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ValidationError"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "description": "Create a datasource connection",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Connection"
              }
            }
          }
        },
        "tags": [
          "Datasources connections"
        ]
      }
    },
    "/datasource_connections/{connection_uid}/": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/datasource_connection_identifier"
          }
        ],
        "summary": "Retrieve Connection",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Connection"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "operationId": "retrieve-connection",
        "description": "Retrieve a datasource connection",
        "tags": [
          "Datasources connections"
        ]
      },
      "put": {
        "parameters": [
          {
            "$ref": "#/components/parameters/datasource_connection_identifier"
          }
        ],
        "summary": "Update Connection",
        "operationId": "update-connection",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Connection"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ValidationError"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "description": "Update a datasource connection. Datasets using this connection will be impacted, but won't be automatically  republished.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Connection"
              }
            }
          }
        },
        "tags": [
          "Datasources connections"
        ]
      },
      "delete": {
        "parameters": [
          {
            "$ref": "#/components/parameters/datasource_connection_identifier"
          }
        ],
        "summary": "Delete Connection",
        "operationId": "delete-connection",
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "description": "Delete a datasource connection",
        "tags": [
          "Datasources connections"
        ]
      }
    },
    "/datasource_connections/{connection_uid}/security/users/": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/datasource_connection_identifier"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          }
        ],
        "summary": "List user rulesets",
        "tags": [
          "Datasource connection security"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginatedResults"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "results": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/UserSecurity"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "operationId": "list-datasource-connection-user-security",
        "description": "List the datasource connection user-level security rulesets"
      },
      "post": {
        "parameters": [
          {
            "$ref": "#/components/parameters/datasource_connection_identifier"
          }
        ],
        "summary": "Create user ruleset",
        "operationId": "create-datasource-connection-user-security",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserSecurity"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserSecurity"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ValidationError"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "description": "Create a datasource connection user-level security ruleset",
        "tags": [
          "Datasource connection security"
        ]
      }
    },
    "/datasource_connections/{connection_uid}/security/users/{username}/": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/datasource_connection_identifier"
          },
          {
            "$ref": "#/components/parameters/user_identifier"
          }
        ],
        "summary": "Retrieve user ruleset",
        "operationId": "retrieve-datasource-connection-user-security",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserSecurity"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "description": "Retrieve a datasource connection user-level security ruleset",
        "tags": [
          "Datasource connection security"
        ]
      },
      "put": {
        "parameters": [
          {
            "$ref": "#/components/parameters/datasource_connection_identifier"
          },
          {
            "$ref": "#/components/parameters/user_identifier"
          }
        ],
        "summary": "Update user ruleset",
        "operationId": "update-datasource-connection-user-security",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserSecurity"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserSecurity"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ValidationError"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "description": "Update a datasource connection user-level security ruleset",
        "tags": [
          "Datasource connection security"
        ]
      },
      "delete": {
        "parameters": [
          {
            "$ref": "#/components/parameters/datasource_connection_identifier"
          },
          {
            "$ref": "#/components/parameters/user_identifier"
          }
        ],
        "summary": "Delete user ruleset",
        "operationId": "delete-datasource-connection-user-security",
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "description": "Delete a datasource connection user-level security ruleset",
        "tags": [
          "Datasource connection security"
        ]
      }
    },
    "/datasource_connections/{connection_uid}/security/groups/": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/datasource_connection_identifier"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          }
        ],
        "summary": "List group rulesets",
        "tags": [
          "Datasource connection security"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginatedResults"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "results": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/GroupSecurity"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "operationId": "list-datasource-connection-group-security",
        "description": "List the datasource connection group-level security rulesets"
      },
      "post": {
        "parameters": [
          {
            "$ref": "#/components/parameters/datasource_connection_identifier"
          }
        ],
        "summary": "Create group ruleset",
        "operationId": "create-datasource-connection-group-security",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GroupSecurity"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupSecurity"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ValidationError"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "description": "Create a datasource connection group-level security ruleset",
        "tags": [
          "Datasource connection security"
        ]
      }
    },
    "/datasource_connections/{connection_uid}/security/groups/{group_uid}/": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/datasource_connection_identifier"
          },
          {
            "$ref": "#/components/parameters/group_identifier"
          }
        ],
        "summary": "Retrieve group ruleset",
        "operationId": "retrieve-datasource-connection-group-security",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupSecurity"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "description": "Retrieve a datasource connection group-level security ruleset",
        "tags": [
          "Datasource connection security"
        ]
      },
      "put": {
        "parameters": [
          {
            "$ref": "#/components/parameters/datasource_connection_identifier"
          },
          {
            "$ref": "#/components/parameters/group_identifier"
          }
        ],
        "summary": "Update group ruleset",
        "operationId": "update-datasource-connection-group-security",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GroupSecurity"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupSecurity"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ValidationError"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "description": "Update a datasource connection group-level security ruleset",
        "tags": [
          "Datasource connection security"
        ]
      },
      "delete": {
        "parameters": [
          {
            "$ref": "#/components/parameters/datasource_connection_identifier"
          },
          {
            "$ref": "#/components/parameters/group_identifier"
          }
        ],
        "summary": "Delete group ruleset",
        "operationId": "delete-datasource-connection-group-security",
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "description": "Delete a datasource connection group-level security ruleset",
        "tags": [
          "Datasource connection security"
        ]
      }
    },
    "/code_editor_pages/": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          }
        ],
        "summary": "List pages",
        "operationId": "list-code-editor-pages",
        "description": "List code editor pages",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginatedResults"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "results": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/CodeEditorPage"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "tags": [
          "Code editor pages"
        ]
      },
      "post": {
        "summary": "Create page",
        "operationId": "create-code-editor-page",
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CodeEditorPage"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ValidationError"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "description": "Create a code editor page",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CodeEditorPage"
              }
            }
          }
        },
        "tags": [
          "Code editor pages"
        ]
      },
      "delete": {
        "parameters": [
          {
            "name": "slug",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "List of page slug to be removed.",
            "example": [
              "slug1",
              "slug2"
            ]
          },
          {
            "name": "search",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "A search term to delete matching pages.",
            "example": "My Page Title"
          }
        ],
        "summary": "Delete multiple pages",
        "operationId": "bulk-delete-code-editor-page",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "example": [
                    "slug1",
                    "slug2"
                  ]
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "description": "Delete all code editor pages matching the search defined by the `search` and `slug` query parameters.",
        "tags": [
          "Code editor pages"
        ]
      }
    },
    "/code_editor_pages/{page_slug}/": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/code_editor_page_identifier"
          }
        ],
        "summary": "Retrieve page",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CodeEditorPage"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "operationId": "retrieve-code-editor-page",
        "description": "Retrieve a code editor page",
        "tags": [
          "Code editor pages"
        ]
      },
      "put": {
        "parameters": [
          {
            "$ref": "#/components/parameters/code_editor_page_identifier"
          }
        ],
        "summary": "Update page",
        "operationId": "update-code-editor-page",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CodeEditorPage"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ValidationError"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "description": "Update a code editor page",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CodeEditorPage"
              }
            }
          }
        },
        "tags": [
          "Code editor pages"
        ]
      },
      "delete": {
        "parameters": [
          {
            "$ref": "#/components/parameters/code_editor_page_identifier"
          }
        ],
        "summary": "Delete page",
        "operationId": "delete-code-editor-page",
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "description": "Delete a code editor page",
        "tags": [
          "Code editor pages"
        ]
      }
    },
    "/code_editor_pages/{page_slug}/archive/": {
      "post": {
        "parameters": [
          {
            "$ref": "#/components/parameters/code_editor_page_identifier"
          }
        ],
        "summary": "Archive page",
        "operationId": "archive-code-editor-page",
        "responses": {
          "200": {
            "$ref": "#/components/responses/OK"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "description": "Archive a code editor page",
        "tags": [
          "Code editor pages"
        ]
      }
    },
    "/code_editor_pages/{page_slug}/unarchive/": {
      "post": {
        "parameters": [
          {
            "$ref": "#/components/parameters/code_editor_page_identifier"
          }
        ],
        "summary": "Unarchive page",
        "operationId": "unarchive-code-editor-page",
        "responses": {
          "200": {
            "$ref": "#/components/responses/OK"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "description": "Unarchive a code editor page",
        "tags": [
          "Code editor pages"
        ]
      }
    },
    "/code_editor_pages/{page_slug}/security/groups/": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/code_editor_page_identifier"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          }
        ],
        "summary": "List group rulesets",
        "tags": [
          "Code editor pages security"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginatedResults"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "results": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/GroupSecurity-2"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "operationId": "list-code-editor-page-group-security",
        "description": "List the code editor page group level security rulesets"
      },
      "post": {
        "parameters": [
          {
            "$ref": "#/components/parameters/code_editor_page_identifier"
          }
        ],
        "summary": "Create group ruleset",
        "operationId": "create-code-editor-page-group-security",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GroupSecurity-2"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupSecurity-2"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ValidationError"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "description": "Create a code editor page group level security ruleset",
        "tags": [
          "Code editor pages security"
        ]
      }
    },
    "/code_editor_pages/{page_slug}/security/groups/{group_uid}/": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/code_editor_page_identifier"
          },
          {
            "$ref": "#/components/parameters/group_identifier"
          }
        ],
        "summary": "Retrieve group ruleset",
        "operationId": "retrieve-code-editor-page-group-security",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupSecurity-2"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "description": "Retrieve a code editor page group level security ruleset",
        "tags": [
          "Code editor pages security"
        ]
      },
      "put": {
        "parameters": [
          {
            "$ref": "#/components/parameters/code_editor_page_identifier"
          },
          {
            "$ref": "#/components/parameters/group_identifier"
          }
        ],
        "summary": "Update group ruleset",
        "operationId": "update-code-editor-page-group-security",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GroupSecurity-2"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupSecurity-2"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ValidationError"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "description": "Update a code editor page group level security ruleset",
        "tags": [
          "Code editor pages security"
        ]
      },
      "delete": {
        "parameters": [
          {
            "$ref": "#/components/parameters/code_editor_page_identifier"
          },
          {
            "$ref": "#/components/parameters/group_identifier"
          }
        ],
        "summary": "Delete group ruleset",
        "operationId": "delete-code-editor-page-group-security",
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "description": "Delete a code editor page group level security ruleset",
        "tags": [
          "Code editor pages security"
        ]
      }
    },
    "/code_editor_pages/{page_slug}/security/users/": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/code_editor_page_identifier"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          }
        ],
        "summary": "List user rulesets",
        "tags": [
          "Code editor pages security"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginatedResults"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "results": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/UserSecurity-2"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "operationId": "list-code-editor-page-user-security",
        "description": "List the code editor page user-level permissions"
      },
      "post": {
        "parameters": [
          {
            "$ref": "#/components/parameters/code_editor_page_identifier"
          }
        ],
        "summary": "Create user ruleset",
        "operationId": "create-code-editor-page-user-security",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserSecurity-2"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserSecurity-2"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ValidationError"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "description": "Create a code editor page user-level security ruleset",
        "tags": [
          "Code editor pages security"
        ]
      }
    },
    "/code_editor_pages/{page_slug}/security/users/{username}/": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/code_editor_page_identifier"
          },
          {
            "$ref": "#/components/parameters/user_identifier"
          }
        ],
        "summary": "Retrieve user ruleset",
        "operationId": "retrieve-code-editor-page-user-security",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserSecurity-2"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "description": "Retrieve a code editor page user-level security ruleset",
        "tags": [
          "Code editor pages security"
        ]
      },
      "put": {
        "parameters": [
          {
            "$ref": "#/components/parameters/code_editor_page_identifier"
          },
          {
            "$ref": "#/components/parameters/user_identifier"
          }
        ],
        "summary": "Update user ruleset",
        "operationId": "update-code-editor-page-user-security",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserSecurity-2"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserSecurity-2"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ValidationError"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "description": "Update a code editor page user-level security ruleset",
        "tags": [
          "Code editor pages security"
        ]
      },
      "delete": {
        "parameters": [
          {
            "$ref": "#/components/parameters/code_editor_page_identifier"
          },
          {
            "$ref": "#/components/parameters/user_identifier"
          }
        ],
        "summary": "Delete user ruleset",
        "operationId": "delete-code-editor-page-user-security",
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "description": "Delete a code editor page user-level security ruleset",
        "tags": [
          "Code editor pages security"
        ]
      }
    },
    "/studio_pages/": {
      "get": {
        "summary": "List pages",
        "tags": [
          "Studio pages"
        ],
        "operationId": "list-studio-pages",
        "parameters": [
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          }
        ],
        "description": "List studio pages",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginatedResults"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "results": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/StudioPage"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        }
      },
      "post": {
        "summary": "Create page",
        "operationId": "create-studio-page",
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StudioPage"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ValidationError"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "description": "Create a studio page",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StudioPage"
              }
            }
          }
        },
        "tags": [
          "Studio pages"
        ]
      }
    },
    "/studio_pages/{studio_page_uid}/": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/page_identifier"
          }
        ],
        "summary": "Retrieve page",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StudioPage"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "operationId": "retrieve-studio-page",
        "description": "Retrieve a studio page",
        "tags": [
          "Studio pages"
        ]
      },
      "put": {
        "parameters": [
          {
            "$ref": "#/components/parameters/page_identifier"
          }
        ],
        "summary": "Update page",
        "operationId": "update-studio-page",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StudioPage"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ValidationError"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "description": "Update a studio page",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StudioPage"
              }
            }
          }
        },
        "tags": [
          "Studio pages"
        ]
      },
      "delete": {
        "parameters": [
          {
            "$ref": "#/components/parameters/page_identifier"
          }
        ],
        "summary": "Delete page",
        "operationId": "delete-studio-page",
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "description": "Delete a studio page",
        "tags": [
          "Studio pages"
        ]
      }
    },
    "/studio_pages/{studio_page_uid}/publish/": {
      "post": {
        "parameters": [
          {
            "$ref": "#/components/parameters/page_identifier"
          }
        ],
        "summary": "Publish page",
        "operationId": "publish-studio-page",
        "responses": {
          "200": {
            "$ref": "#/components/responses/OK"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "description": "Publish a studio page",
        "tags": [
          "Studio pages"
        ]
      }
    },
    "/studio_pages/{studio_page_uid}/unpublish/": {
      "post": {
        "parameters": [
          {
            "$ref": "#/components/parameters/page_identifier"
          }
        ],
        "summary": "Unpublish page",
        "operationId": "unpublish-studio-page",
        "responses": {
          "200": {
            "$ref": "#/components/responses/OK"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "description": "Unpublish a studio page",
        "tags": [
          "Studio pages"
        ]
      }
    },
    "/studio_pages/{studio_page_uid}/security/groups/": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/page_identifier"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          }
        ],
        "summary": "List group rulesets",
        "tags": [
          "Studio pages security"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginatedResults"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "results": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/GroupSecurity-3"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "operationId": "list-studio-page-group-security",
        "description": "List the studio page group level security rulesets"
      },
      "post": {
        "parameters": [
          {
            "$ref": "#/components/parameters/page_identifier"
          }
        ],
        "summary": "Create group ruleset",
        "operationId": "create-studio-page-group-security",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GroupSecurity-3"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupSecurity-3"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ValidationError"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "description": "Create a studio page group level security ruleset",
        "tags": [
          "Studio pages security"
        ]
      }
    },
    "/studio_pages/{studio_page_uid}/security/groups/{group_uid}/": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/page_identifier"
          },
          {
            "$ref": "#/components/parameters/group_identifier"
          }
        ],
        "summary": "Retrieve group ruleset",
        "operationId": "retrieve-studio-page-group-security",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupSecurity-3"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "description": "Retrieve a studio page group level security ruleset",
        "tags": [
          "Studio pages security"
        ]
      },
      "put": {
        "parameters": [
          {
            "$ref": "#/components/parameters/page_identifier"
          },
          {
            "$ref": "#/components/parameters/group_identifier"
          }
        ],
        "summary": "Update group ruleset",
        "operationId": "update-studio-page-group-security",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GroupSecurity-3"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupSecurity-3"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ValidationError"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "description": "Update a studio page group level security ruleset",
        "tags": [
          "Studio pages security"
        ]
      },
      "delete": {
        "parameters": [
          {
            "$ref": "#/components/parameters/page_identifier"
          },
          {
            "$ref": "#/components/parameters/group_identifier"
          }
        ],
        "summary": "Delete group ruleset",
        "operationId": "delete-studio-page-group-security",
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "description": "Delete a studio page group level security ruleset",
        "tags": [
          "Studio pages security"
        ]
      }
    },
    "/studio_pages/{studio_page_uid}/security/users/": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/page_identifier"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          }
        ],
        "summary": "List user rulesets",
        "tags": [
          "Studio pages security"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginatedResults"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "results": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/UserSecurity-3"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "operationId": "list-studio-page-user-security",
        "description": "List the studio page user-level security rulesets"
      },
      "post": {
        "parameters": [
          {
            "$ref": "#/components/parameters/page_identifier"
          }
        ],
        "summary": "Create user ruleset",
        "operationId": "create-studio-page-user-security",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserSecurity-3"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserSecurity-3"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ValidationError"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "description": "Create a studio page user-level security ruleset",
        "tags": [
          "Studio pages security"
        ]
      }
    },
    "/studio_pages/{studio_page_uid}/security/users/{username}/": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/page_identifier"
          },
          {
            "$ref": "#/components/parameters/user_identifier"
          }
        ],
        "summary": "Retrieve user ruleset",
        "operationId": "retrieve-studio-page-user-security",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserSecurity-3"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "description": "Retrieve a studio page user-level security ruleset",
        "tags": [
          "Studio pages security"
        ]
      },
      "put": {
        "parameters": [
          {
            "$ref": "#/components/parameters/page_identifier"
          },
          {
            "$ref": "#/components/parameters/user_identifier"
          }
        ],
        "summary": "Update user ruleset",
        "operationId": "update-studio-page-user-security",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserSecurity-3"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserSecurity-3"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ValidationError"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "description": "Update a studio page user-level security ruleset",
        "tags": [
          "Studio pages security"
        ]
      },
      "delete": {
        "parameters": [
          {
            "$ref": "#/components/parameters/page_identifier"
          },
          {
            "$ref": "#/components/parameters/user_identifier"
          }
        ],
        "summary": "Delete user ruleset",
        "operationId": "delete-studio-page-user-security",
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "description": "Delete a studio page user-level security ruleset",
        "tags": [
          "Studio pages security"
        ]
      }
    },
    "/apikeys/": {
      "get": {
        "summary": "List API keys",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginatedResults"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "results": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/APIKey"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "operationId": "get-apikeys",
        "description": "List API keys",
        "tags": [
          "API keys"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          }
        ]
      },
      "post": {
        "summary": "Create an API key",
        "operationId": "post-apikeys",
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIKey"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ValidationError"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "description": "Create an API key",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/APIKey"
              }
            }
          }
        },
        "tags": [
          "API keys"
        ]
      }
    },
    "/apikeys/{apikey_uid}/": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/apikey_identifier"
          },
          {
            "schema": {
              "type": "string",
              "enum": [
                "user"
              ]
            },
            "in": "query",
            "name": "expand",
            "description": "The list of fields to expand."
          }
        ],
        "summary": "Retrieve an API key",
        "tags": [
          "API keys"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIKey"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "operationId": "get-apikey",
        "description": "Retrieve an API key"
      },
      "put": {
        "parameters": [
          {
            "$ref": "#/components/parameters/apikey_identifier"
          }
        ],
        "summary": "Update an API key",
        "operationId": "put-apikeys-apikey_uid",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIKey"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ValidationError"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "description": "Update an API key",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/APIKey"
              }
            }
          }
        },
        "tags": [
          "API keys"
        ]
      }
    },
    "/apikeys/{apikey_uid}/revoke/": {
      "post": {
        "parameters": [
          {
            "$ref": "#/components/parameters/apikey_identifier"
          }
        ],
        "summary": "Revoke an API key",
        "operationId": "post-apikeys-apikey_uid-revoke",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIKey"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "description": "Revoke an API key so that it is no longer valid. The reason for revocation can be provided.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "reason": {
                    "type": "string",
                    "example": "Explanation why the API Key has been revoked"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "API keys"
        ]
      }
    },
    "/apikeys/search_key/": {
      "post": {
        "summary": "Search an API key",
        "operationId": "search-apikey",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "found": {
                      "type": "boolean"
                    },
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/APIKey"
                        },
                        {
                          "type": "null"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ValidationError"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "description": "Domain administrators can search for a specific API key, revoked or active.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "key": {
                    "type": "string",
                    "example": "63d534ca0c1806024215cfd99dba4ea188f55d4f1b53ac0b6eceb455"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "API keys"
        ]
      }
    },
    "/medias/images/": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          }
        ],
        "summary": "List image assets",
        "tags": [
          "Assets"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginatedResults"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "results": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "url": {
                                "type": "string",
                                "example": "/assets/theme_image/Acronym-Turquoise.svg"
                              }
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "operationId": "list-images",
        "description": "List all domain assets urls"
      },
      "post": {
        "summary": "Create a new image asset",
        "operationId": "create-images",
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "url": {
                      "type": "string",
                      "example": "/assets/theme_image/Acronym-Turquoise.svg"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ValidationError"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "description": "Add an asset to the library. The HTTP request must be a multipart request with a `file` property.",
        "tags": [
          "Assets"
        ]
      }
    },
    "/users/": {
      "get": {
        "parameters": [
          {
            "schema": {
              "type": "string",
              "example": "alice"
            },
            "in": "query",
            "name": "search",
            "description": "full-text search among username, first name, last name and email"
          },
          {
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "username",
                  "first_name",
                  "last_name",
                  "last_seen_at"
                ],
                "example": [
                  "username",
                  "first_name"
                ]
              }
            },
            "in": "query",
            "name": "sort",
            "description": "sort results according to username, first name or last_name"
          },
          {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Permission"
              },
              "example": [
                "edit_dataset",
                "create_dataset"
              ]
            },
            "in": "query",
            "name": "permissions",
            "description": "filter according to permissions granted directly to the users"
          },
          {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Permission"
              },
              "example": [
                "edit_dataset",
                "create_dataset"
              ]
            },
            "in": "query",
            "name": "all_permissions",
            "description": "filter according to permissions, whether granted directly or via a group"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          }
        ],
        "summary": "List users",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginatedResults"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "results": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/User"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "operationId": "get-users",
        "description": "List users",
        "tags": [
          "Users"
        ]
      }
    },
    "/users/{username}/": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/user_identifier"
          },
          {
            "schema": {
              "type": "string",
              "example": "groups"
            },
            "in": "query",
            "name": "expand",
            "description": "The list of fields to expand."
          }
        ],
        "summary": "Retrieve user",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "operationId": "get-user",
        "description": "Retrieve user",
        "tags": [
          "Users"
        ]
      },
      "put": {
        "parameters": [
          {
            "$ref": "#/components/parameters/user_identifier"
          }
        ],
        "summary": "Update user",
        "operationId": "update-user",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "description": "Updates a user properties",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        },
        "tags": [
          "Users"
        ]
      },
      "delete": {
        "parameters": [
          {
            "$ref": "#/components/parameters/user_identifier"
          }
        ],
        "summary": "Delete user",
        "operationId": "delete-user",
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "description": "Removes the requested user from the domain. If the user is the only domain administrator left, the call will fail and an error specifying that the removal of the only domain administrator is not allowed will be returned.",
        "tags": [
          "Users"
        ]
      }
    },
    "/users/export/": {
      "get": {
        "summary": "Export users",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/csv": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                },
                "examples": {
                  "csv": {
                    "summary": "A sample CSV response",
                    "value": "username,last_name,first_name,email,date_joined,last_seen,groups,permissions\nlouise.data,,,contact@mail.com,2022-08-19 11:43:58+00:00,2023-04-24 12:16:34.099404+00:00,Domain administrators;Data publishers,create_dataset;edit_dataset;explore_restricted_dataset;manage_dataset;publish_dataset"
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "operationId": "users-export",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "subdomains",
            "description": "Subdomains to include in the CSV (requires the permission to export subdomains)"
          },
          {
            "schema": {
              "type": "string",
              "default": ",",
              "minLength": 1,
              "maxLength": 1,
              "example": ";"
            },
            "in": "query",
            "name": "delimiter",
            "description": "Field separator"
          }
        ],
        "tags": [
          "Users"
        ]
      }
    },
    "/users/invite/": {
      "post": {
        "summary": "Invite users",
        "operationId": "invite-users",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "x-additionalPropertiesName": "0",
                    "type": "object",
                    "properties": {
                      "status_code": {
                        "type": "string",
                        "enum": [
                          "success",
                          "error"
                        ],
                        "example": "success"
                      },
                      "data": {
                        "$ref": "#/components/schemas/User"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "description": "This bulk endpoint creates an account for each of the given users and sends them an email so that they can log in. Each item in the payload must contain at least an email address, and may contain additional fields, such as groups and permissions. Returned body is an object in which each key is the number of the requested user in the payload (\"0\" = first user) and value contains a status_code (\"success\" or \"error\") and either \"data\" corresponding to the user or \"error\" describing the error.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          }
        },
        "tags": [
          "Users"
        ]
      }
    },
    "/users/provision/": {
      "post": {
        "summary": "Provision users",
        "operationId": "provision-users",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "x-additionalPropertiesName": "0",
                    "type": "object",
                    "properties": {
                      "status_code": {
                        "type": "string",
                        "enum": [
                          "success",
                          "error"
                        ],
                        "example": "success"
                      },
                      "data": {
                        "$ref": "#/components/schemas/User"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "description": "This bulk endpoint creates an account for each of the given users using the given identity provider. Each item in the payload must contain at least an identity provider, and may contain additional fields, such as groups and permissions. Returned body is an object in which each key is the number of the requested user in the payload (\"0\" = first user) and value contains a status_code (\"success\" or \"error\") and either \"data\" corresponding to the user or \"error\" describing the error.",
        "tags": [
          "Users"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/User"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "identity_provider": {
                        "type": "object",
                        "required": [
                          "uid"
                        ],
                        "properties": {
                          "uid": {
                            "type": "string",
                            "writeOnly": true,
                            "example": "opendatasoft"
                          }
                        },
                        "writeOnly": true
                      },
                      "identity_provider_attributes": {
                        "type": "object",
                        "writeOnly": true
                      }
                    },
                    "required": [
                      "identity_provider"
                    ]
                  }
                ]
              }
            }
          }
        }
      }
    },
    "/processors/": {
      "get": {
        "summary": "List processors",
        "tags": [
          "Dataset processors"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DatasetProcessor"
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "operationId": "list-processors",
        "description": "List all processors available on domain."
      }
    },
    "/metadata/templates/": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "name": "is_active",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            },
            "description": "If provided and True then it will list only all activated templates. If provided and False it lists non-activated templates. If not provided then it will lists both activated and non-activated templates.\n"
          },
          {
            "name": "type",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "interop",
                "admin",
                "basic",
                "extra"
              ],
              "description": "Filter by type of Metadata Template."
            }
          }
        ],
        "tags": [
          "Metadata templates"
        ],
        "summary": "List metadata templates",
        "description": "List all metadata templates of the current domain.",
        "operationId": "list-metadata-templates",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginatedResults"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "results": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/MetadataTemplate"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        }
      },
      "post": {
        "summary": "Create metadata template",
        "description": "You can only create `basic` and `admin` metadata templates.",
        "operationId": "create-metadata-template",
        "tags": [
          "Metadata templates"
        ],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreatableOrEditableMetadataTemplate"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ValidationError"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatableOrEditableMetadataTemplate"
              }
            }
          }
        }
      }
    },
    "/metadata/templates/{template_name}/": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/metadata_template_identifier"
          }
        ],
        "tags": [
          "Metadata templates"
        ],
        "summary": "Retrieve a metadata template",
        "operationId": "retrieve-metadata-templates",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetadataTemplate"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        }
      },
      "put": {
        "parameters": [
          {
            "$ref": "#/components/parameters/metadata_template_identifier"
          }
        ],
        "summary": "Update metadata template",
        "description": "Only non-system templates of type `basic` and `admin` can be fully editable. Other templates may be enabled. Templates with `is_system=true` and `is_always_active=true` are exceptions and can't be disabled.",
        "operationId": "update-metadata-template",
        "tags": [
          "Metadata templates"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreatableOrEditableMetadataTemplate"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ValidationError"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatableOrEditableMetadataTemplate"
              }
            }
          }
        }
      },
      "delete": {
        "parameters": [
          {
            "$ref": "#/components/parameters/metadata_template_identifier"
          }
        ],
        "summary": "Delete a metadata template",
        "description": "Only non-system templates of type `basic` or `admin` can be removed.",
        "operationId": "delete-metadata-template",
        "tags": [
          "Metadata templates"
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/metadata/templates/{template_name}/fields/": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/metadata_template_identifier"
          }
        ],
        "tags": [
          "Metadata templates"
        ],
        "summary": "List template's fields",
        "operationId": "get-metadata-fields-list",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginatedResults"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "results": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/MetadataTemplateField"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/metadata/templates/{template_name}/fields/{template_field_name}/": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/metadata_template_identifier"
          },
          {
            "$ref": "#/components/parameters/metadata_template_field_identifier"
          }
        ],
        "tags": [
          "Metadata templates"
        ],
        "summary": "Retrieve metadata template field",
        "operationId": "get-metadata-fields-retrieve",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetadataTemplateField"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/metadata/templates/{template_name}/fields/{template_field_name}/suggest/": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/metadata_template_identifier"
          },
          {
            "$ref": "#/components/parameters/metadata_template_field_identifier"
          },
          {
            "schema": {
              "type": "string"
            },
            "name": "query",
            "required": true,
            "in": "query",
            "description": "The query to perform to the service providing the suggestions. Most likely, it will be a prefix of what you're looking for.\n"
          },
          {
            "schema": {
              "type": "number"
            },
            "name": "count",
            "required": false,
            "in": "query",
            "description": "Number of results which will be provided in the response."
          }
        ],
        "tags": [
          "Metadata templates"
        ],
        "summary": "Suggest field choices",
        "description": "List suggestions (\"choices\") for the provided template field name.",
        "operationId": "get-metadata-field-values-suggestion",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetadataTemplateFieldSuggestions"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ValidationError"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/groups/": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "name": "search",
            "in": "query",
            "description": "full-text search among `uid`, `title` and `description` properties",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "schema": {
              "type": "string",
              "enum": [
                "created_at",
                "updated_at",
                "created_by__username",
                "updated_by__username",
                "user_count",
                "group__title"
              ],
              "default": "updated_at"
            },
            "in": "query",
            "description": "sort results with respect to the specified properties."
          },
          {
            "name": "permissions",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Permission"
              }
            },
            "in": "query",
            "description": "filter groups according to the specified list of permissions"
          }
        ],
        "tags": [
          "User groups"
        ],
        "summary": "List user groups",
        "operationId": "list-user-groups",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginatedResults"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "results": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/UserGroup"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        }
      },
      "post": {
        "summary": "Create a user group",
        "operationId": "create-user-group",
        "tags": [
          "User groups"
        ],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserGroup"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ValidationError"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserGroup"
              }
            }
          }
        }
      }
    },
    "/groups/{group_uid}/": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/group_identifier"
          }
        ],
        "summary": "Retrieve a user group",
        "operationId": "retrieve-user-group",
        "tags": [
          "User groups"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserGroup"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        }
      },
      "put": {
        "parameters": [
          {
            "$ref": "#/components/parameters/group_identifier"
          }
        ],
        "summary": "Update a user group",
        "operationId": "update-user-group",
        "tags": [
          "User groups"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserGroup"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserGroup"
              }
            }
          }
        }
      },
      "delete": {
        "parameters": [
          {
            "$ref": "#/components/parameters/group_identifier"
          }
        ],
        "summary": "Delete a user group",
        "operationId": "delete-user-group",
        "tags": [
          "User groups"
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/groups/{group_uid}/users/": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/group_identifier"
          }
        ],
        "tags": [
          "User groups"
        ],
        "summary": "List users of a user group",
        "operationId": "list-users-of-a-user-group",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginatedResults"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "results": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/User"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        }
      },
      "post": {
        "parameters": [
          {
            "$ref": "#/components/parameters/group_identifier"
          }
        ],
        "summary": "Add a user to a user group",
        "operationId": "add-user-to-user-group",
        "tags": [
          "User groups"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RelatedUser"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ValidationError"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/groups/{group_uid}/users/batch/": {
      "post": {
        "parameters": [
          {
            "$ref": "#/components/parameters/group_identifier"
          }
        ],
        "summary": "Batch add of users to a user group",
        "operationId": "batch-add-users-to-user-group",
        "tags": [
          "User groups"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RelatedUser"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "x-additionalPropertiesName": "0",
                    "type": "object",
                    "properties": {
                      "status_code": {
                        "type": "string",
                        "enum": [
                          "success",
                          "error"
                        ],
                        "example": "success"
                      },
                      "data": {
                        "$ref": "#/components/schemas/User"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/groups/{group_uid}/users/{username}/": {
      "delete": {
        "parameters": [
          {
            "$ref": "#/components/parameters/group_identifier"
          },
          {
            "$ref": "#/components/parameters/user_identifier"
          }
        ],
        "summary": "Remove a user from a user group",
        "operationId": "delete-user-of-a-user-group",
        "tags": [
          "User groups"
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/harvesters/": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          }
        ],
        "summary": "List harvesters",
        "operationId": "list-harvesters",
        "description": "List the harvesters.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginatedResults"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "results": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Harvester"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "tags": [
          "Harvesters"
        ]
      },
      "post": {
        "summary": "Create harvester",
        "operationId": "create-harvester",
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Harvester"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ValidationError"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "description": "Create a harvester.",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Harvester"
              }
            }
          }
        },
        "tags": [
          "Harvesters"
        ]
      }
    },
    "/harvesters/{harvester_uid}/": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/harvester_identifier"
          }
        ],
        "summary": "Retrieve harvester",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Harvester"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "operationId": "retrieve-harvester",
        "description": "Retrieve a harvester.",
        "tags": [
          "Harvesters"
        ]
      },
      "put": {
        "parameters": [
          {
            "$ref": "#/components/parameters/harvester_identifier"
          }
        ],
        "summary": "Update harvester",
        "operationId": "update-harvester",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Harvester"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ValidationError"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "description": "Update a harvester.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Harvester"
              }
            }
          }
        },
        "tags": [
          "Harvesters"
        ]
      },
      "delete": {
        "parameters": [
          {
            "$ref": "#/components/parameters/harvester_identifier"
          },
          {
            "in": "query",
            "name": "delete_attached_datasets",
            "required": true,
            "schema": {
              "type": "boolean"
            },
            "example": false,
            "description": "Control whether all attached datasets should be deleted with the harvester, or detached from it."
          }
        ],
        "summary": "Delete harvester",
        "operationId": "delete-harvester",
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "description": "Delete the harvester. If delete_attached_datasets=true, also delete all its attached datasets.",
        "tags": [
          "Harvesters"
        ]
      }
    },
    "/harvesters/{harvester_uid}/abort/": {
      "post": {
        "parameters": [
          {
            "$ref": "#/components/parameters/harvester_identifier"
          }
        ],
        "summary": "Abort harvesting",
        "operationId": "abort-harvester",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Harvester"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/InvalidHarvesterStatus"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "description": "Abort the harvesting of a harvester.",
        "tags": [
          "Harvesters"
        ]
      }
    },
    "/harvesters/{harvester_uid}/start/": {
      "post": {
        "parameters": [
          {
            "$ref": "#/components/parameters/harvester_identifier"
          }
        ],
        "summary": "Start harvesting",
        "operationId": "start-harvester",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Harvester"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/InvalidHarvesterStatus"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "description": "Start a harvester.",
        "tags": [
          "Harvesters"
        ]
      }
    },
    "/harvesters/{harvester_uid}/publish/": {
      "post": {
        "parameters": [
          {
            "$ref": "#/components/parameters/harvester_identifier"
          }
        ],
        "summary": "Publish a harvester's datasets",
        "operationId": "publish-harvester",
        "responses": {
          "200": {
            "$ref": "#/components/responses/OK"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "description": "Publish all datasets attached to the harvester.",
        "tags": [
          "Harvesters"
        ]
      }
    },
    "/harvesters/{harvester_uid}/unpublish/": {
      "post": {
        "parameters": [
          {
            "$ref": "#/components/parameters/harvester_identifier"
          }
        ],
        "summary": "Unpublish a harvester's datasets",
        "operationId": "unpublish-harvester",
        "responses": {
          "200": {
            "$ref": "#/components/responses/OK"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "description": "Unpublish all datasets attached to the harvester.",
        "tags": [
          "Harvesters"
        ]
      }
    },
    "/harvesters/{harvester_uid}/errors/": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/harvester_identifier"
          }
        ],
        "summary": "List errors",
        "operationId": "harvester-list-errors",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "harvester": {
                      "type": "string",
                      "example": "A fatal error occured. Please check the harvester configuration.",
                      "nullable": true
                    },
                    "resources": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "string"
                      },
                      "example": {
                        "remote_resource_id": "Could not harvest the dataset."
                      }
                    }
                  },
                  "required": [
                    "harvester",
                    "resources"
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/InvalidHarvesterStatus"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "description": "List errors which occurred during the last or current harvesting.",
        "tags": [
          "Harvesters"
        ]
      }
    },
    "/harvesters/{harvester_uid}/preview/": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/harvester_identifier"
          }
        ],
        "summary": "Preview harvesting",
        "operationId": "harvester-preview",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HarvesterPreviewResult"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "description": "Preview the datasets which will be harvested.",
        "tags": [
          "Harvesters"
        ]
      }
    },
    "/harvesters/{harvester_uid}/unsaved_preview/": {
      "post": {
        "parameters": [
          {
            "$ref": "#/components/parameters/harvester_identifier"
          }
        ],
        "summary": "Preview harvesting configuration",
        "operationId": "harvester-unsaved-preview",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Harvester"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HarvesterPreviewResult"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "description": "Preview the datasets which will be harvested with a given configuration. At the contrary of the preview endpoint which returns the results for the currently saved harvester, this endpoint allows to preview the results with a configuration change not yet saved. The given parameters will be merged with the saved harvester configuration.",
        "tags": [
          "Harvesters"
        ]
      }
    },
    "/harvesters/{harvester_uid}/schedules/": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/harvester_identifier"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          }
        ],
        "summary": "List harvester schedules",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginatedResults"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "results": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/HarvesterSchedule"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "operationId": "list-harvester-schedules",
        "description": "List harvester schedules.",
        "tags": [
          "Harvester schedules"
        ]
      },
      "post": {
        "parameters": [
          {
            "$ref": "#/components/parameters/harvester_identifier"
          }
        ],
        "summary": "Create harvester schedule",
        "operationId": "create-harvester-schedule",
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HarvesterSchedule"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ValidationError"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "description": "Create a harvester schedule. A harvester can only have one schedule.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/HarvesterSchedule"
              }
            }
          }
        },
        "tags": [
          "Harvester schedules"
        ]
      }
    },
    "/harvesters/{harvester_uid}/schedules/{schedule_uid}/": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/harvester_identifier"
          },
          {
            "$ref": "#/components/parameters/schedule_identifier-2"
          }
        ],
        "summary": "Retrieve a harvester schedule",
        "tags": [
          "Harvester schedules"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HarvesterSchedule"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "operationId": "retrieve-harvester-schedule",
        "description": "Retrieve a harvester schedule."
      },
      "put": {
        "parameters": [
          {
            "$ref": "#/components/parameters/harvester_identifier"
          },
          {
            "$ref": "#/components/parameters/schedule_identifier-2"
          }
        ],
        "summary": "Update harvester schedule",
        "operationId": "update-harvester-schedule",
        "tags": [
          "Harvester schedules"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/HarvesterSchedule"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HarvesterSchedule"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "description": "Update a harvester schedule."
      },
      "delete": {
        "parameters": [
          {
            "$ref": "#/components/parameters/harvester_identifier"
          },
          {
            "$ref": "#/components/parameters/schedule_identifier-2"
          }
        ],
        "summary": "Delete harvester schedule",
        "operationId": "delete-harvester-schedule",
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "description": "Delete a harvester schedule.",
        "tags": [
          "Harvester schedules"
        ]
      }
    }
  },
  "components": {
    "securitySchemes": {
      "HeaderAPIKey": {
        "name": "Authorization",
        "type": "apiKey",
        "in": "header",
        "description": "You can send the apikey using the Authorization header, in which case the value should be: `apikey {THE_API_KEY}`. This is the recommended authentication method."
      },
      "QueryAPIKey": {
        "name": "apikey",
        "type": "apiKey",
        "in": "query",
        "description": "You can send the apikey in the URL parameters. The parameter name is `apikey`."
      }
    },
    "parameters": {
      "limit": {
        "name": "limit",
        "in": "query",
        "required": false,
        "schema": {
          "type": "number",
          "maximum": 1000,
          "minimum": 0,
          "default": 20
        },
        "description": "The maximum number of results returned by the API when the response is paginated. Tip: You can make a request with the parameter \"limit\" set to 0 to get only the metadata (\"results\" property will contain an empty array).",
        "example": 20
      },
      "offset": {
        "name": "offset",
        "in": "query",
        "required": false,
        "schema": {
          "type": "number"
        },
        "description": "The number of results to skip before beginning the listing in case of a paginated response",
        "example": 0
      },
      "dataset_identifier": {
        "schema": {
          "type": "string"
        },
        "name": "dataset_uid",
        "in": "path",
        "required": true,
        "example": "da_qf2hyt"
      },
      "feedback_identifier": {
        "schema": {
          "type": "string"
        },
        "name": "feedback_uid",
        "in": "path",
        "required": true,
        "description": "Unique identifier for the feedback",
        "example": "df_qf2hyt"
      },
      "field_identifier": {
        "schema": {
          "type": "string"
        },
        "name": "field_uid",
        "in": "path",
        "required": true,
        "example": "pr_qf2hyt"
      },
      "processor_identifier": {
        "schema": {
          "type": "string"
        },
        "name": "processor_uid",
        "in": "path",
        "required": true,
        "example": "pr_qf2hyt"
      },
      "resource_identifier": {
        "schema": {
          "type": "string"
        },
        "name": "resource_uid",
        "in": "path",
        "required": true,
        "example": "re_qf2hyt"
      },
      "file_identifier": {
        "schema": {
          "type": "string"
        },
        "name": "file_uid",
        "in": "path",
        "required": true,
        "example": "fromages.csv"
      },
      "attachment_identifier": {
        "schema": {
          "type": "string"
        },
        "name": "attachment_uid",
        "in": "path",
        "required": true,
        "example": "at_qf2hyt"
      },
      "alternative_export_identifier": {
        "schema": {
          "type": "string"
        },
        "name": "export_uid",
        "in": "path",
        "required": true,
        "example": "ae_qf2hyt"
      },
      "user_identifier": {
        "schema": {
          "type": "string"
        },
        "name": "username",
        "in": "path",
        "required": true,
        "example": "louise.data"
      },
      "group_identifier": {
        "schema": {
          "type": "string"
        },
        "name": "group_uid",
        "in": "path",
        "required": true,
        "example": "group_identifier"
      },
      "version_identifier": {
        "schema": {
          "type": "string"
        },
        "name": "version_uid",
        "in": "path",
        "required": true,
        "example": "ch_qf2hyt"
      },
      "schedule_identifier": {
        "schema": {
          "type": "string"
        },
        "name": "schedule_uid",
        "in": "path",
        "required": true,
        "example": "sc_qf2hyt"
      },
      "metadata_template_identifier": {
        "schema": {
          "type": "string"
        },
        "name": "template_name",
        "in": "path",
        "required": true,
        "description": "Metadata template name",
        "example": "template_name"
      },
      "metadata_template_field_identifier": {
        "schema": {
          "type": "string"
        },
        "name": "template_field_name",
        "in": "path",
        "required": true,
        "description": "Metadata template field name",
        "example": "field_name"
      },
      "datasource_connection_identifier": {
        "schema": {
          "type": "string"
        },
        "name": "connection_uid",
        "in": "path",
        "required": true,
        "example": "co_qf2hyt"
      },
      "code_editor_page_identifier": {
        "schema": {
          "type": "string"
        },
        "name": "page_slug",
        "in": "path",
        "required": true,
        "example": "page_slug"
      },
      "page_identifier": {
        "schema": {
          "type": "string"
        },
        "name": "studio_page_uid",
        "in": "path",
        "required": true,
        "example": "sp_qf2hyt"
      },
      "apikey_identifier": {
        "schema": {
          "type": "string"
        },
        "name": "apikey_uid",
        "in": "path",
        "required": true,
        "example": "ak_qf2hyt"
      },
      "harvester_identifier": {
        "schema": {
          "type": "string"
        },
        "name": "harvester_uid",
        "in": "path",
        "required": true,
        "example": "harvester_uid"
      },
      "schedule_identifier-2": {
        "schema": {
          "type": "string"
        },
        "name": "schedule_uid",
        "in": "path",
        "required": true,
        "example": "harvester_uid"
      }
    },
    "responses": {
      "Error": {
        "description": "An error occurred",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "error_code": {
                  "type": "string",
                  "readOnly": true
                },
                "message": {
                  "type": "string",
                  "readOnly": true
                },
                "trace_id": {
                  "type": "string",
                  "readOnly": true
                },
                "detail": {
                  "type": "object",
                  "description": "In some cases, contains additional information about the error.",
                  "readOnly": true
                }
              },
              "required": [
                "error_code",
                "message"
              ]
            },
            "examples": {
              "Bad Request": {
                "value": {
                  "error_code": "bad_request",
                  "message": "Bad request: the server did not understand the request parameters."
                }
              },
              "Internal error": {
                "value": {
                  "error_code": "internal_error",
                  "message": "A server error occurred.",
                  "trace_id": "6b523c91-45a6-4ef9-b130-b82e1241645e"
                }
              }
            }
          }
        }
      },
      "ValidationError": {
        "description": "Validation error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "error_code": {
                  "type": "string",
                  "minLength": 1,
                  "enum": [
                    "validation_error"
                  ],
                  "readOnly": true
                },
                "message": {
                  "type": "string",
                  "minLength": 1,
                  "readOnly": true
                },
                "detail": {
                  "type": "object",
                  "readOnly": true
                }
              },
              "required": [
                "error_code",
                "message",
                "detail"
              ]
            },
            "examples": {
              "Validation Error": {
                "value": {
                  "error_code": "validation_error",
                  "message": "Invalid input",
                  "detail": {
                    "name": [
                      "This field is required"
                    ]
                  }
                }
              }
            }
          }
        }
      },
      "NotFound": {
        "description": "Not found",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "error_code": {
                  "type": "string",
                  "minLength": 1,
                  "enum": [
                    "not_found"
                  ],
                  "readOnly": true
                },
                "message": {
                  "type": "string",
                  "minLength": 1
                }
              },
              "required": [
                "error_code",
                "message"
              ]
            },
            "examples": {
              "Not Found": {
                "value": {
                  "error_code": "not_found",
                  "message": "Not found."
                }
              }
            }
          }
        }
      },
      "Deleted": {
        "description": "Deleted",
        "content": {
          "application/json": {
            "example": ""
          }
        }
      },
      "OK": {
        "description": "The action has been performed",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "detail": {
                  "type": "string",
                  "readOnly": true
                }
              },
              "required": [
                "detail"
              ]
            },
            "examples": {
              "OK": {
                "value": {
                  "detail": "ok"
                }
              }
            }
          }
        }
      },
      "InvalidDatasetStatus": {
        "description": "Invalid dataset status",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "error_code": {
                  "type": "string",
                  "minLength": 1,
                  "enum": [
                    "invalid_dataset_status"
                  ],
                  "readOnly": true
                },
                "message": {
                  "type": "string",
                  "minLength": 1,
                  "readOnly": true
                }
              },
              "required": [
                "error_code",
                "message"
              ]
            },
            "examples": {
              "InvalidDatasetStatus": {
                "value": {
                  "message": "Invalid precondition, dataset status is 'idle' but must be one of 'processing_all_dataset_data, processing_dataset, processing_resource_records'",
                  "error_code": "invalid_dataset_status"
                }
              }
            }
          }
        }
      },
      "DatasetProcessingStatus": {
        "description": "Dataset status",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "enum": [
                    "idle",
                    "error",
                    "limit_reached",
                    "queued",
                    "aborting_processing",
                    "processing",
                    "deleting",
                    "saving_version"
                  ]
                },
                "previous": {
                  "oneOf": [
                    {
                      "type": "null"
                    },
                    {
                      "type": "string",
                      "enum": [
                        "idle",
                        "error",
                        "limit_reached",
                        "queued",
                        "aborting_processing",
                        "processing",
                        "deleting",
                        "saving_version"
                      ]
                    }
                  ],
                  "example": "processing"
                },
                "next": {
                  "oneOf": [
                    {
                      "type": "null"
                    },
                    {
                      "type": "string",
                      "enum": [
                        "idle",
                        "error",
                        "limit_reached",
                        "queued",
                        "aborting_processing",
                        "processing",
                        "deleting",
                        "saving_version"
                      ]
                    }
                  ],
                  "example": null
                },
                "since": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Date when the dataset entered the current status"
                },
                "is_published": {
                  "oneOf": [
                    {
                      "type": "null"
                    },
                    {
                      "type": "boolean"
                    }
                  ],
                  "example": true,
                  "description": "will be `true` if the dataset is available in the explore API"
                },
                "message": {
                  "oneOf": [
                    {
                      "type": "null"
                    },
                    {
                      "type": "string"
                    }
                  ],
                  "example": null
                },
                "records_errors": {
                  "description": "The record error describes errors which occurred during the processing. An error comes from:\n- a processor: when a value is invalid or an operation failed\n- a type conversion: when a value cannot be converted. For example the string \"s\" converted to an integer.",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "record_id": {
                        "type": "string",
                        "description": "Identifier of the record after processing"
                      },
                      "field_uid": {
                        "type": "string",
                        "description": "Unique identifier of the field involved in the error"
                      },
                      "processor_uid": {
                        "type": "string",
                        "description": "Unique identifier of the processor which generates the error"
                      },
                      "message": {
                        "type": "string",
                        "description": "Human-readable error message"
                      }
                    }
                  },
                  "example": []
                },
                "params": {
                  "type": "object",
                  "description": "Status-dependent additional information. For example, if `status` is `limit reached`, this will contain an `error` object that contains a `limit_type`, a `limit` and a `value`.",
                  "example": {}
                }
              }
            }
          }
        }
      },
      "ResourcePreview": {
        "description": "Resource records preview",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "fields": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "description": {
                        "type": "string"
                      },
                      "original_name": {
                        "type": "string"
                      },
                      "label": {
                        "type": "string"
                      },
                      "type": {
                        "type": "string"
                      },
                      "annotations": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "name": {
                              "type": "string"
                            },
                            "args": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            }
                          },
                          "required": [
                            "name"
                          ]
                        }
                      },
                      "name": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "label",
                      "name"
                    ]
                  }
                },
                "records": {
                  "type": "array",
                  "items": {
                    "type": "object"
                  }
                }
              }
            },
            "example": {
              "fields": [
                {
                  "label": "Year",
                  "name": "year",
                  "type": "date",
                  "annotations": [
                    {
                      "name": "timeserie_precision",
                      "args": [
                        "year"
                      ]
                    }
                  ]
                },
                {
                  "label": "Official Name State",
                  "name": "ste_name",
                  "type": "text",
                  "annotations": []
                }
              ],
              "records": [
                {
                  "year": "2022",
                  "ste_name": "Missouri"
                },
                {
                  "year": "2022",
                  "ste_name": "North Carolina"
                }
              ]
            }
          }
        }
      },
      "InvalidHarvesterStatus": {
        "description": "Invalid harvester status",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "error_code": {
                  "type": "string",
                  "minLength": 1,
                  "enum": [
                    "invalid_harvester_status"
                  ],
                  "readOnly": true
                },
                "message": {
                  "type": "string",
                  "minLength": 1,
                  "readOnly": true
                }
              },
              "required": [
                "error_code",
                "message"
              ]
            },
            "examples": {
              "InvalidDatasetStatus": {
                "value": {
                  "message": "Invalid transition from processing to processing",
                  "error_code": "invalid_harvester_status"
                }
              }
            }
          }
        }
      }
    },
    "schemas": {
      "PaginatedResults": {
        "title": "PaginatedResults",
        "type": "object",
        "properties": {
          "total_count": {
            "description": "The total number of results that can be queried.",
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "integer"
              }
            ],
            "example": 18
          },
          "next": {
            "description": "Link to the next page of results if any.",
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string"
              }
            ],
            "example": null
          },
          "previous": {
            "description": "Link to the previous page of results if any.",
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string"
              }
            ],
            "example": null
          }
        }
      },
      "DatasetMetadataValue": {
        "type": "object",
        "properties": {
          "value": {
            "description": "The effective metadata value. If the dataset is linked to a remote dataset and `override_remote_value`  is `false`, this value will be the same as `remote_value`."
          },
          "remote_value": {
            "readOnly": true,
            "description": "The metadata value on the remote dataset. This property is present only if the dataset is linked to a remote  dataset (a federated dataset for example)."
          },
          "override_remote_value": {
            "type": "boolean",
            "description": "Defines if the remote value is overridden (`true`), or if it is kept in sync with the value on the remote  dataset. This property is present only if the dataset is linked to a remote  dataset (a federated dataset for example)."
          }
        },
        "required": [
          "value"
        ],
        "example": {
          "value": "Metadata value",
          "remote_value": "Metadata value on the remote dataset, if there is one",
          "override_remote_value": true
        }
      },
      "DatasetMetadataDefault": {
        "title": "Default template",
        "description": "The standard set of metadata common to all Opendatasoft datasets.",
        "type": "object",
        "properties": {
          "title": {
            "$ref": "#/components/schemas/DatasetMetadataValue"
          },
          "description": {
            "$ref": "#/components/schemas/DatasetMetadataValue"
          },
          "keyword": {
            "$ref": "#/components/schemas/DatasetMetadataValue"
          },
          "modified": {
            "$ref": "#/components/schemas/DatasetMetadataValue"
          },
          "modified_updates_on_metadata_change": {
            "$ref": "#/components/schemas/DatasetMetadataValue"
          },
          "modified_updates_on_data_change": {
            "$ref": "#/components/schemas/DatasetMetadataValue"
          },
          "geographic_reference": {
            "$ref": "#/components/schemas/DatasetMetadataValue"
          },
          "geographic_reference_auto": {
            "$ref": "#/components/schemas/DatasetMetadataValue"
          },
          "language": {
            "$ref": "#/components/schemas/DatasetMetadataValue"
          },
          "timezone": {
            "$ref": "#/components/schemas/DatasetMetadataValue"
          },
          "publisher": {
            "$ref": "#/components/schemas/DatasetMetadataValue"
          },
          "references": {
            "$ref": "#/components/schemas/DatasetMetadataValue"
          },
          "attributions": {
            "$ref": "#/components/schemas/DatasetMetadataValue"
          }
        },
        "required": [
          "title",
          "modified",
          "language"
        ],
        "example": {
          "title": {
            "value": "Counties -  United States of America",
            "remote_value": "Counties -  United States of America",
            "override_remote_value": false
          },
          "description": {
            "value": "This dataset is part of the Geographical repository maintained by Opendatasoft.  This dataset contains data for counties and equivalent entities in United States of America.",
            "remote_value": "This dataset is part of the Geographical repository maintained by Opendatasoft.  This dataset contains data for counties and equivalent entities in United States of America.",
            "override_remote_value": false
          },
          "keyword": {
            "value": [
              "territory",
              "geography",
              "boundary",
              "county",
              "usa"
            ],
            "remote_value": [
              "territory",
              "geography",
              "boundary",
              "county",
              "usa"
            ],
            "override_remote_value": false
          },
          "modified": {
            "value": "2023-01-01T00:00:00Z",
            "remote_value": "2023-01-01T00:00:00Z",
            "override_remote_value": false
          },
          "modified_updates_on_metadata_change": {
            "value": false,
            "remote_value": false,
            "override_remote_value": false
          },
          "modified_updates_on_data_change": {
            "value": false,
            "remote_value": false,
            "override_remote_value": false
          },
          "geographic_reference": {
            "value": [
              "world_us"
            ],
            "remote_value": [
              "world_us"
            ],
            "override_remote_value": false
          },
          "geographic_reference_auto": {
            "value": false,
            "remote_value": false,
            "override_remote_value": false
          },
          "language": {
            "value": "en",
            "remote_value": "en",
            "override_remote_value": false
          },
          "timezone": {
            "value": "US/Pacific",
            "remote_value": "US/Pacific",
            "override_remote_value": false
          },
          "publisher": {
            "value": "U.S. Department of Commerce, U.S. Census Bureau, Geography Division, Spatial Data Collection and Products Branch",
            "remote_value": "U.S. Department of Commerce, U.S. Census Bureau, Geography Division, Spatial Data Collection and Products Branch",
            "override_remote_value": false
          },
          "references": {
            "value": "https://www.census.gov/geographies/mapping-files/time-series/geo/tiger-line-file.html",
            "remote_value": "https://www.census.gov/geographies/mapping-files/time-series/geo/tiger-line-file.html",
            "override_remote_value": false
          },
          "attributions": {
            "value": [
              "U.S. Census Bureau"
            ],
            "remote_value": [
              "U.S. Census Bureau"
            ],
            "override_remote_value": false
          }
        }
      },
      "DatasetMetadataVisualization": {
        "title": "Visualization template",
        "description": "This set of metadata is used to configure the dataset visualizations on your portal.",
        "type": "object",
        "properties": {
          "analyze_disabled": {
            "$ref": "#/components/schemas/DatasetMetadataValue"
          },
          "analyze_default": {
            "$ref": "#/components/schemas/DatasetMetadataValue"
          },
          "table_fields": {
            "$ref": "#/components/schemas/DatasetMetadataValue"
          },
          "table_default_sort_field": {
            "$ref": "#/components/schemas/DatasetMetadataValue"
          },
          "table_default_sort_direction": {
            "$ref": "#/components/schemas/DatasetMetadataValue"
          },
          "map_disabled": {
            "$ref": "#/components/schemas/DatasetMetadataValue"
          },
          "map_marker_picto": {
            "$ref": "#/components/schemas/DatasetMetadataValue"
          },
          "map_marker_color": {
            "$ref": "#/components/schemas/DatasetMetadataValue"
          },
          "map_marker_hidemarkershape": {
            "$ref": "#/components/schemas/DatasetMetadataValue"
          },
          "map_tooltip_title": {
            "$ref": "#/components/schemas/DatasetMetadataValue"
          },
          "map_tooltip_fields": {
            "$ref": "#/components/schemas/DatasetMetadataValue"
          },
          "map_tooltip_disabled": {
            "$ref": "#/components/schemas/DatasetMetadataValue"
          },
          "map_tooltip_html_enabled": {
            "$ref": "#/components/schemas/DatasetMetadataValue"
          },
          "map_tooltip_html": {
            "$ref": "#/components/schemas/DatasetMetadataValue"
          },
          "map_tooltip_sort_field": {
            "$ref": "#/components/schemas/DatasetMetadataValue"
          },
          "map_tooltip_sort_direction": {
            "$ref": "#/components/schemas/DatasetMetadataValue"
          },
          "map_basemap": {
            "$ref": "#/components/schemas/DatasetMetadataValue"
          },
          "images_disabled": {
            "$ref": "#/components/schemas/DatasetMetadataValue"
          },
          "media_gallery_fields": {
            "$ref": "#/components/schemas/DatasetMetadataValue"
          },
          "image_title": {
            "$ref": "#/components/schemas/DatasetMetadataValue"
          },
          "image_fields": {
            "$ref": "#/components/schemas/DatasetMetadataValue"
          },
          "image_tooltip_html_enabled": {
            "$ref": "#/components/schemas/DatasetMetadataValue"
          },
          "image_tooltip_html": {
            "$ref": "#/components/schemas/DatasetMetadataValue"
          },
          "calendar_enabled": {
            "$ref": "#/components/schemas/DatasetMetadataValue"
          },
          "calendar_event_title": {
            "$ref": "#/components/schemas/DatasetMetadataValue"
          },
          "calendar_event_start": {
            "$ref": "#/components/schemas/DatasetMetadataValue"
          },
          "calendar_event_end": {
            "$ref": "#/components/schemas/DatasetMetadataValue"
          },
          "calendar_tooltip_html_enabled": {
            "$ref": "#/components/schemas/DatasetMetadataValue"
          },
          "calendar_tooltip_html": {
            "$ref": "#/components/schemas/DatasetMetadataValue"
          },
          "calendar_tooltip_fields": {
            "$ref": "#/components/schemas/DatasetMetadataValue"
          },
          "calendar_event_color": {
            "$ref": "#/components/schemas/DatasetMetadataValue"
          },
          "calendar_available_views": {
            "$ref": "#/components/schemas/DatasetMetadataValue"
          },
          "calendar_default_view": {
            "$ref": "#/components/schemas/DatasetMetadataValue"
          },
          "custom_view_enabled": {
            "$ref": "#/components/schemas/DatasetMetadataValue"
          },
          "custom_view_html": {
            "$ref": "#/components/schemas/DatasetMetadataValue"
          },
          "custom_view_css": {
            "$ref": "#/components/schemas/DatasetMetadataValue"
          },
          "custom_view_icon": {
            "$ref": "#/components/schemas/DatasetMetadataValue"
          },
          "custom_view_title": {
            "$ref": "#/components/schemas/DatasetMetadataValue"
          },
          "custom_view_slug": {
            "$ref": "#/components/schemas/DatasetMetadataValue"
          }
        },
        "example": {}
      },
      "DatasetMetadataInternal": {
        "title": "Internal template",
        "description": "This set of metadata is used for dataset configuration and won't appear on your portal.",
        "type": "object",
        "properties": {
          "license_id": {
            "$ref": "#/components/schemas/DatasetMetadataValue"
          },
          "theme_id": {
            "$ref": "#/components/schemas/DatasetMetadataValue"
          },
          "draft": {
            "$ref": "#/components/schemas/DatasetMetadataValue"
          }
        },
        "example": {
          "license_id": {
            "value": "38js5ao",
            "remote_value": "38js5ao",
            "override_remote_value": false
          },
          "theme_id": {
            "value": [
              "38js5ao"
            ],
            "remote_value": [
              "38js5ao"
            ],
            "override_remote_value": false
          },
          "draft": {
            "value": false,
            "remote_value": false,
            "override_remote_value": false
          }
        }
      },
      "DatasetMetadataAssetContentConfiguration": {
        "title": "Asset Content Configuration",
        "description": "This template defines metadata for configuring how asset content are displayed in the portal.",
        "type": "object",
        "properties": {
          "facets": {
            "$ref": "#/components/schemas/DatasetMetadataValue"
          },
          "fields_displayed_in_specific_languages": {
            "$ref": "#/components/schemas/DatasetMetadataValue"
          },
          "records_search_boosts": {
            "$ref": "#/components/schemas/DatasetMetadataValue"
          }
        },
        "example": {
          "facets": {
            "value": [
              {
                "field_name": "title",
                "facetsort": "-count",
                "disjunctive": true
              },
              {
                "field_name": "release_date",
                "facetsort": "alphanum",
                "timerange_filter": true
              }
            ],
            "remote_value": [
              {
                "field_name": "title",
                "facetsort": "-count",
                "disjunctive": true
              },
              {
                "field_name": "release_date",
                "facetsort": "alphanum",
                "timerange_filter": true
              }
            ],
            "override_remote_value": false
          },
          "fields_displayed_in_specific_languages": {
            "value": {
              "title": [
                "en",
                "fr"
              ],
              "tags": [
                "en"
              ]
            },
            "remote_value": {
              "title": [
                "en",
                "fr"
              ],
              "tags": [
                "en"
              ]
            },
            "override_remote_value": false
          },
          "records_search_boosts": {
            "value": {
              "title": 10,
              "tags": 0,
              "description": 2
            },
            "remote_value": {
              "title": 10,
              "tags": 0,
              "description": 2
            },
            "override_remote_value": false
          }
        }
      },
      "DatasetMetadataCustom": {
        "title": "Custom template",
        "description": "Additional values for custom metadata templates you have configured on your portal.",
        "type": "object",
        "additionalProperties": {
          "$ref": "#/components/schemas/DatasetMetadataValue"
        },
        "example": {
          "field_name_1": {
            "value": "field_value_1"
          },
          "field_name_2": {
            "value": "field_value_2",
            "override_remote_value": true
          }
        },
        "x-additionalPropertiesName": "custom_template_name"
      },
      "DatasetMetadata": {
        "title": "Dataset metadata schema",
        "description": "The data describing the dataset itself.",
        "type": "object",
        "properties": {
          "default": {
            "$ref": "#/components/schemas/DatasetMetadataDefault"
          },
          "visualization": {
            "$ref": "#/components/schemas/DatasetMetadataVisualization"
          },
          "internal": {
            "$ref": "#/components/schemas/DatasetMetadataInternal"
          },
          "asset_content_configuration": {
            "$ref": "#/components/schemas/DatasetMetadataAssetContentConfiguration"
          },
          "custom_template_name": {
            "$ref": "#/components/schemas/DatasetMetadataCustom"
          }
        },
        "required": [
          "default"
        ],
        "x-tags": [
          "Dataset metadata"
        ]
      },
      "DatasetSecurity": {
        "type": "object",
        "properties": {
          "is_data_visible": {
            "type": "boolean",
            "example": true,
            "description": "Flag indicating whether the target will have access to the records of the dataset or not."
          },
          "visible_fields": {
            "type": "array",
            "description": "The target will only have access to the fields from this list.\n`null` means that the target has access to all fields.\nAn empty list means that the target won't see any field (empty dataset schema).",
            "uniqueItems": true,
            "items": {
              "type": "string",
              "minLength": 1
            },
            "example": [
              "year",
              "coty_code"
            ],
            "nullable": true
          },
          "filter_query": {
            "type": "string",
            "example": "year!=2022",
            "description": "The target will only have access to the records matching this query. An empty query means that all records are accessible."
          },
          "api_calls_quota": {
            "type": "object",
            "description": "Upper limit set on the number of API calls the target can make to this dataset in a given timeframe. Can be set to null for no specific quota.",
            "properties": {
              "unit": {
                "type": "string",
                "enum": [
                  "second",
                  "minute",
                  "hour",
                  "day",
                  "month"
                ],
                "example": "month"
              },
              "limit": {
                "type": "number",
                "example": 12000
              }
            },
            "nullable": true
          }
        }
      },
      "Dataset": {
        "title": "Dataset schema",
        "type": "object",
        "properties": {
          "uid": {
            "type": "string",
            "minLength": 1,
            "readOnly": true,
            "description": "Unique identifier of the dataset that will never change through the lifetime of the dataset",
            "example": "da_qf2hyt"
          },
          "dataset_id": {
            "type": "string",
            "minLength": 1,
            "description": "Human-readable identifier of the dataset that can be modified when the dataset is not published",
            "example": "counties-united-states-of-america"
          },
          "created_at": {
            "type": "string",
            "minLength": 1,
            "format": "date-time",
            "readOnly": true,
            "description": "Date when the dataset was created"
          },
          "updated_at": {
            "type": "string",
            "minLength": 1,
            "format": "date-time",
            "readOnly": true,
            "description": "Date when the dataset's configuration was last edited"
          },
          "is_published": {
            "type": "boolean",
            "default": false,
            "readOnly": true
          },
          "is_restricted": {
            "type": "boolean",
            "description": "Defines if the dataset is visible for anonymous visitors. \n- If it is `false`, anyone having access to the domain will be able to see the dataset in the catalog. Users who have at least a ruleset declared for them (whether directly, through a group or both) will be able to see everything their rulesets grant access to.\nUsers who do not have any ruleset declared for them (neither directly nor through a group) will be able to see what the default ruleset (`default_security` dataset property) grants access to.\n- If it is `true`, the dataset will only appear in the catalog for users who have a ruleset declared for them, either directly or through a group. Other users won't have any access to the dataset.\nThe `default_security` ruleset has no effect for restricted datasets."
          },
          "metadata": {
            "$ref": "#/components/schemas/DatasetMetadata"
          },
          "default_security": {
            "$ref": "#/components/schemas/DatasetSecurity"
          }
        },
        "required": [
          "metadata"
        ],
        "x-tags": [
          "Datasets"
        ]
      },
      "RelatedUser": {
        "title": "Related user",
        "type": "object",
        "description": "Short representation of a User with only its username",
        "properties": {
          "username": {
            "type": "string",
            "example": "louise.data"
          }
        }
      },
      "DatasetFeedback": {
        "title": "Dataset feedback",
        "description": "A feedback made on a dataset",
        "type": "object",
        "x-tags": [
          "Dataset feedbacks"
        ],
        "properties": {
          "uid": {
            "type": "string",
            "readOnly": true,
            "description": "Unique identifier for the feedback"
          },
          "record_id": {
            "type": "string",
            "description": "ID of the record on which the feedback was made"
          },
          "user": {
            "$ref": "#/components/schemas/RelatedUser"
          },
          "comment": {
            "type": "string",
            "description": "User comments"
          },
          "values": {
            "type": "object",
            "description": "New values suggested by the user",
            "properties": {
              "value": {
                "type": "string",
                "description": "Value suggested by the user"
              },
              "type": {
                "type": "string",
                "description": "Value type",
                "enum": [
                  "text",
                  "int",
                  "double",
                  "geo_point_2d",
                  "geo_shape",
                  "date",
                  "datetime",
                  "file"
                ]
              }
            }
          },
          "is_archived": {
            "type": "boolean",
            "description": "True if the feedback was archived by an administrator, False otherwise"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp at which the feedback was submitted"
          }
        },
        "required": [
          "uid",
          "record_id",
          "user",
          "comment"
        ],
        "example": {
          "uid": "df_qf2hyt",
          "record_id": "95969ddab924fc5db5e39c3fb2a7634f4d7dd51c",
          "user": {
            "username": "john.doe"
          },
          "comment": "I like this record, it provides meanigful insights",
          "is_archived": false,
          "values": {
            "username": {
              "value": "A missing value",
              "type": "string"
            },
            "age": {
              "value": 39,
              "type": "double"
            }
          }
        }
      },
      "DatasetFieldConfiguration": {
        "title": "Field configuration schema",
        "description": "Field attached to a dataset",
        "type": "object",
        "x-tags": [
          "Dataset fields"
        ],
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "rename": "#/components/schemas/RenameDatasetFieldConfiguration",
            "type": "#/components/schemas/TypeDatasetFieldConfiguration",
            "annotate": "#/components/schemas/AnnotateDatasetFieldConfiguration",
            "description": "#/components/schemas/DescriptionDatasetFieldConfiguration",
            "order": "#/components/schemas/OrderDatasetFieldConfiguration",
            "delete": "#/components/schemas/DeleteDatasetFieldConfiguration"
          }
        },
        "properties": {
          "uid": {
            "type": "string",
            "readOnly": true,
            "description": "Unique identifier for the field configuration"
          },
          "type": {
            "type": "string",
            "minLength": 1
          },
          "label": {
            "type": "string",
            "description": "Friendly label of the field configuration",
            "example": "Field configuration friendly label"
          }
        },
        "required": [
          "type",
          "label"
        ],
        "example": {
          "uid": "pr_qf2hyt",
          "type": "annotate",
          "label": "Mark the field_id as multivalued, with a comma as the values separator",
          "field": "field_id",
          "annotation": "multivalued",
          "args": [
            ","
          ]
        }
      },
      "RenameDatasetFieldConfiguration": {
        "allOf": [
          {
            "$ref": "#/components/schemas/DatasetFieldConfiguration"
          },
          {
            "type": "object",
            "title": "RenameDatasetFieldConfiguration",
            "x-tags": [
              "Dataset fields"
            ],
            "properties": {
              "from_name": {
                "type": "string",
                "minLength": 1,
                "example": "original_field_id",
                "description": "The original technical identifier"
              },
              "to_name": {
                "type": "string",
                "minLength": 1,
                "example": "new_field_id",
                "description": "The new technical identifier"
              },
              "field_label": {
                "type": "string",
                "minLength": 1,
                "example": "My user friendly label",
                "description": "A user friendly label for the field"
              }
            },
            "required": [
              "from_name",
              "to_name",
              "field_label"
            ]
          }
        ],
        "title": "RenameDatasetFieldConfiguration"
      },
      "TypeDatasetFieldConfiguration": {
        "allOf": [
          {
            "$ref": "#/components/schemas/DatasetFieldConfiguration"
          },
          {
            "type": "object",
            "title": "TypeDatasetFieldConfiguration",
            "x-tags": [
              "Dataset fields"
            ],
            "properties": {
              "field": {
                "type": "string",
                "minLength": 1,
                "example": "field_id",
                "description": "The technical identifier of the field you want to type"
              },
              "type_param": {
                "type": "string",
                "enum": [
                  "text",
                  "int",
                  "double",
                  "geo_point_2d",
                  "geo_shape",
                  "date",
                  "datetime",
                  "file"
                ],
                "description": "The type to apply",
                "example": "int"
              }
            },
            "required": [
              "field",
              "type_param"
            ]
          }
        ],
        "title": "TypeDatasetFieldConfiguration"
      },
      "AnnotateDatasetFieldConfiguration": {
        "allOf": [
          {
            "$ref": "#/components/schemas/DatasetFieldConfiguration"
          },
          {
            "type": "object",
            "title": "AnnotateDatasetFieldConfiguration",
            "x-tags": [
              "Dataset fields"
            ],
            "properties": {
              "field": {
                "type": "string",
                "minLength": 1,
                "example": "field_id",
                "description": "The technical identifier of the field whose annotation you want to configure"
              },
              "annotation": {
                "type": "string",
                "enum": [
                  "id",
                  "timeserie_precision",
                  "unit",
                  "decimals",
                  "sortable",
                  "multivalued",
                  "hierarchical"
                ],
                "description": "Annotations are a mean to configure special behavior for the fields. \nSome annotations are only available for certain field types.\n| Annotation name     | Field type                                   | Description                                                                                                                                                                                     |\n|---------------------|----------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| id                  | all field types                              | Whether this field should constitute one of the keys of the records unique IDs. If no field has this annotation, all fields contribute to the creation of the records unique ID.                |\n| timeserie_precision | `date` and `datetime`                        | display precision of the field. Possible arguments are `year`, `month` and `day` for `date`, `hour` and `minute` for `datetime`                                                                 |\n| unit                | `int` and `decimal`                          | The unit of the field                                                                                                                                                                           |\n| decimals            | `decimal`                                    | The argument is the number of digits to appear after the decimal point                                                                                                                          |\n| sortable            | `text`                                       | whether the field should be sortable in table view                                                                                                                                              |\n| multivalued         | `text`                                       | whether the field contains multiple values separated by a character. The separator must be given as the argument                                                                                |\n| hierarchical        | `text`                                       | whether the field is hierarchical. The separator must be given as the argument                                                                                                                  |",
                "example": "unit"
              },
              "args": {
                "type": "array",
                "items": {
                  "oneOf": [
                    {
                      "type": "string"
                    },
                    {
                      "type": "integer"
                    }
                  ]
                },
                "example": [
                  "km2"
                ]
              }
            },
            "required": [
              "field",
              "annotation"
            ]
          }
        ],
        "title": "AnnotateDatasetFieldConfiguration"
      },
      "DescriptionDatasetFieldConfiguration": {
        "allOf": [
          {
            "$ref": "#/components/schemas/DatasetFieldConfiguration"
          },
          {
            "type": "object",
            "title": "DescriptionDatasetFieldConfiguration",
            "x-tags": [
              "Dataset fields"
            ],
            "properties": {
              "field": {
                "type": "string",
                "minLength": 1,
                "example": "field_id",
                "description": "The technical identifier of the field you want to describe"
              },
              "description": {
                "type": "string",
                "minLength": 1,
                "example": "Elegant description",
                "description": "The user friendly description"
              }
            },
            "required": [
              "field",
              "description"
            ]
          }
        ],
        "title": "DescriptionDatasetFieldConfiguration"
      },
      "OrderDatasetFieldConfiguration": {
        "allOf": [
          {
            "$ref": "#/components/schemas/DatasetFieldConfiguration"
          },
          {
            "type": "object",
            "title": "OrderDatasetFieldConfiguration",
            "x-tags": [
              "Dataset fields"
            ],
            "properties": {
              "args": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "example": [
                  "third_field",
                  "second_field",
                  "first_field"
                ],
                "description": "The ordered list of fields technical identifier"
              }
            },
            "required": [
              "args"
            ]
          }
        ],
        "title": "OrderDatasetFieldConfiguration"
      },
      "DeleteDatasetFieldConfiguration": {
        "allOf": [
          {
            "$ref": "#/components/schemas/DatasetFieldConfiguration"
          },
          {
            "type": "object",
            "title": "DeleteDatasetFieldConfiguration",
            "x-tags": [
              "Dataset fields"
            ],
            "properties": {
              "field": {
                "type": "string",
                "minLength": 1,
                "example": "field_id",
                "description": "The technical identifier of the field you want to delete"
              }
            },
            "required": [
              "field"
            ]
          }
        ],
        "title": "DeleteDatasetFieldConfiguration"
      },
      "DatasetProcessor": {
        "title": "Processor schema",
        "description": "Processor attached to a dataset",
        "type": "object",
        "x-tags": [
          "Dataset processors"
        ],
        "properties": {
          "uid": {
            "type": "string",
            "readOnly": true,
            "description": "Unique identifier for the processor"
          },
          "type": {
            "type": "string",
            "description": "Type of the processor"
          },
          "label": {
            "type": "string",
            "description": "Friendly label of the processor"
          }
        },
        "additionalProperties": {},
        "example": {
          "uid": "pr_qf2hyt",
          "type": "string_replace",
          "label": "replace old value with new value",
          "field": "my_field",
          "old": "old_value",
          "new": "new_value"
        },
        "required": [
          "type",
          "label"
        ]
      },
      "Extractor": {
        "title": "Extractor",
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "readOnly": true,
            "example": "jsonfile"
          },
          "label": {
            "type": "string",
            "readOnly": true,
            "example": "JSON File"
          },
          "parameters": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string"
                },
                "is_mandatory": {
                  "type": "boolean"
                },
                "name": {
                  "type": "string"
                },
                "label": {
                  "type": "string"
                },
                "default": {
                  "type": "string"
                },
                "description": {
                  "type": "string"
                },
                "hidden": {
                  "type": "boolean"
                },
                "trim": {
                  "type": "string"
                },
                "choices": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "can_create_field": {
                  "type": "boolean"
                },
                "impacts_guessed_parameters": {
                  "type": "boolean"
                }
              },
              "required": [
                "type",
                "is_mandatory",
                "name"
              ],
              "example": [
                {
                  "type": "boolean",
                  "is_mandatory": false,
                  "name": "extract_filename",
                  "label": "Extract filename",
                  "description": "Extract the filename in a field"
                },
                {
                  "type": "string",
                  "is_mandatory": false,
                  "name": "json_root",
                  "label": "JSON root",
                  "description": "Path to the JSON array that contains the objects that will become the dataset records"
                },
                {
                  "type": "string",
                  "is_mandatory": false,
                  "name": "json_object",
                  "label": "JSON object",
                  "description": "Relative path to the JSON object to extract"
                }
              ],
              "readOnly": true
            },
            "readOnly": true
          }
        },
        "required": [
          "type",
          "label",
          "parameters"
        ]
      },
      "ExtractionInfos": {
        "title": "Extraction information",
        "type": "object",
        "description": "Information about the kind of extraction configured for this resource",
        "properties": {
          "label": {
            "type": "string",
            "description": "human readable label for the extraction type",
            "example": "CSV File",
            "readOnly": true
          },
          "type": {
            "type": "string",
            "minLength": 1,
            "description": "extractor type that should handle this resource",
            "example": "csvfile",
            "readOnly": true
          }
        }
      },
      "OriginInfos": {
        "title": "Origin information",
        "type": "object",
        "description": "Information about the origin of the resource (e.g. HTTP, FTP etc.)",
        "properties": {
          "label": {
            "type": "string",
            "description": "Human readable label for the resource origin",
            "example": "CSV File",
            "readOnly": true
          },
          "type": {
            "type": "string",
            "minLength": 1,
            "description": "Type of the resource origin. The most relevant information is returned between the datasource type and the extraction type. For example a resource using an HTTP Feed, has a \"feed\" origin, not HTTP.",
            "example": "csvfile",
            "readOnly": true
          }
        }
      },
      "Datasource": {
        "type": "object",
        "title": "Datasource",
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "http": "#/components/schemas/HTTPDatasource",
            "ftp": "#/components/schemas/FTPDatasource",
            "sharepoint": "#/components/schemas/SharepointDatasource",
            "google_drive": "#/components/schemas/GoogleDriveDatasource",
            "federated": "#/components/schemas/FederatedDatasource",
            "uploaded_file": "#/components/schemas/UploadedFileDatasource",
            "amazon_s3": "#/components/schemas/AmazonS3Datasource",
            "azure_blob_storage": "#/components/schemas/AzureBlobStorageDatasource"
          }
        },
        "properties": {
          "type": {
            "type": "string",
            "minLength": 1
          }
        },
        "required": [
          "type"
        ],
        "example": {
          "type": "http",
          "connection": {
            "type": "http",
            "url": "https://my-server.com",
            "auth": null
          },
          "headers": [
            {
              "name": "header-name",
              "value": "header-value"
            }
          ],
          "relative_url": "/fromages.csv"
        }
      },
      "HTTPConnection": {
        "title": "HTTPConnection",
        "allOf": [
          {
            "$ref": "#/components/schemas/Connection"
          },
          {
            "type": "object",
            "properties": {
              "url": {
                "type": "string",
                "minLength": 1,
                "example": "https://my-server.com"
              },
              "headers": {
                "type": "array",
                "items": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "name": {
                      "type": "string",
                      "example": "header-name"
                    },
                    "value": {
                      "type": "string",
                      "example": "header-value"
                    }
                  },
                  "required": [
                    "name",
                    "value"
                  ]
                }
              },
              "auth": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/HTTPAuth"
                  },
                  {
                    "type": "null"
                  }
                ],
                "example": {
                  "type": "basic_auth",
                  "username": "my_username",
                  "password": "my_password"
                }
              }
            },
            "required": [
              "url"
            ]
          }
        ]
      },
      "Connection": {
        "title": "Connection schema",
        "x-tags": [
          "Datasources connections"
        ],
        "type": "object",
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "http": "#/components/schemas/HTTPConnection",
            "ftp": "#/components/schemas/FTPConnection",
            "sharepoint": "#/components/schemas/SharepointConnection",
            "google_drive": "#/components/schemas/GoogleDriveConnection",
            "amazon_s3": "#/components/schemas/AmazonS3Connection",
            "azure_blob_storage": "#/components/schemas/AzureBlobStorageConnection"
          }
        },
        "properties": {
          "uid": {
            "type": "string",
            "minLength": 1,
            "readOnly": true,
            "example": "co_qf2hyt"
          },
          "type": {
            "type": "string",
            "minLength": 1
          },
          "is_reusable": {
            "type": "boolean",
            "description": "Defines if the connection can be reused across multiple datasets"
          },
          "can_reuse": {
            "type": "boolean",
            "description": "Defines if the current user has the permission to reuse this connection",
            "readOnly": true
          },
          "can_manage": {
            "type": "boolean",
            "description": "Defines if the current user has the permission to manage this connection",
            "readOnly": true
          },
          "dataset_count": {
            "type": "number",
            "readOnly": true,
            "description": "Number of datasets using this connection",
            "example": 59
          },
          "user_count": {
            "type": "number",
            "readOnly": true,
            "description": "Number of users with explicit access to this connection",
            "example": 7
          },
          "group_count": {
            "type": "number",
            "readOnly": true,
            "description": "Number of user groups with explicit access to this connection",
            "example": 4
          },
          "created_at": {
            "type": "string",
            "minLength": 1,
            "format": "date-time",
            "readOnly": true
          },
          "updated_at": {
            "type": "string",
            "minLength": 1,
            "format": "date-time",
            "readOnly": true
          }
        },
        "required": [
          "type"
        ]
      },
      "FTPAuth": {
        "title": "FTPAuth",
        "type": "object",
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "basic_auth": "#/components/schemas/FTPBasicAuth"
          }
        },
        "properties": {
          "type": {
            "type": "string",
            "minLength": 1
          }
        },
        "required": [
          "type"
        ]
      },
      "BasicAuth": {
        "title": "BasicAuth",
        "type": "object",
        "properties": {
          "username": {
            "type": "string"
          },
          "password": {
            "type": "string",
            "description": "The password for the user. The API returns null to hide this sensitive value.",
            "nullable": true
          }
        },
        "required": [
          "username",
          "password"
        ]
      },
      "FTPBasicAuth": {
        "title": "FTPBasicAuth",
        "allOf": [
          {
            "$ref": "#/components/schemas/FTPAuth"
          },
          {
            "$ref": "#/components/schemas/BasicAuth"
          }
        ]
      },
      "FTPConnection": {
        "title": "FTPConnection",
        "allOf": [
          {
            "$ref": "#/components/schemas/Connection"
          },
          {
            "type": "object",
            "properties": {
              "url": {
                "type": "string",
                "minLength": 1,
                "example": "ftps://my-server.com"
              },
              "auth": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/FTPAuth"
                  },
                  {
                    "type": "null"
                  }
                ],
                "example": {
                  "type": "basic_auth",
                  "username": "my_username",
                  "password": "my_password"
                }
              }
            },
            "required": [
              "url"
            ]
          }
        ]
      },
      "SharepointAuth": {
        "title": "SharepointAuth",
        "type": "object",
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "oidc": "#/components/schemas/SharepointOIDCAuth"
          }
        },
        "properties": {
          "type": {
            "type": "string",
            "minLength": 1
          }
        },
        "required": [
          "type"
        ],
        "example": {
          "type": "oidc",
          "grant_type": "authorization_code",
          "claims": {}
        }
      },
      "ODSOIDCAuth": {
        "title": "ODSOIDCAuth",
        "type": "object",
        "properties": {
          "nonce": {
            "type": "string",
            "writeOnly": true,
            "nullable": true
          },
          "grant_type": {
            "type": "string",
            "enum": [
              "authorization_code"
            ]
          },
          "code": {
            "type": "string",
            "writeOnly": true,
            "nullable": true
          },
          "claims": {
            "type": "object",
            "readOnly": true
          }
        },
        "required": [
          "nonce",
          "grant_type",
          "code",
          "claims"
        ]
      },
      "SharepointOIDCAuth": {
        "title": "SharepointOIDCAuth",
        "allOf": [
          {
            "$ref": "#/components/schemas/SharepointAuth"
          },
          {
            "$ref": "#/components/schemas/ODSOIDCAuth"
          }
        ]
      },
      "SharepointConnection": {
        "title": "SharepointConnection",
        "allOf": [
          {
            "$ref": "#/components/schemas/Connection"
          },
          {
            "type": "object",
            "properties": {
              "auth": {
                "$ref": "#/components/schemas/SharepointAuth"
              }
            }
          }
        ]
      },
      "GoogleDriveAuth": {
        "title": "GoogleDriveAuth",
        "type": "object",
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "oidc": "#/components/schemas/GoogleDriveOIDCAuth"
          }
        },
        "properties": {
          "type": {
            "type": "string",
            "minLength": 1
          }
        },
        "required": [
          "type"
        ],
        "example": {
          "type": "oidc",
          "grant_type": "authorization_code",
          "claims": {}
        }
      },
      "ConnectionUID": {
        "type": "object",
        "properties": {
          "uid": {
            "type": "string",
            "description": "The UID of an existing connection to reuse."
          }
        },
        "required": [
          "uid"
        ]
      },
      "GoogleDriveOIDCAuth": {
        "title": "GoogleDriveOIDCAuth",
        "allOf": [
          {
            "$ref": "#/components/schemas/GoogleDriveAuth"
          },
          {
            "$ref": "#/components/schemas/ODSOIDCAuth"
          },
          {
            "type": "object",
            "properties": {
              "application_id": {
                "type": "string",
                "readOnly": true
              }
            },
            "required": [
              "application_id"
            ]
          }
        ]
      },
      "GoogleDriveConnection": {
        "title": "GoogleDriveConnection",
        "allOf": [
          {
            "$ref": "#/components/schemas/Connection"
          },
          {
            "type": "object",
            "properties": {
              "auth": {
                "$ref": "#/components/schemas/GoogleDriveAuth"
              }
            }
          }
        ]
      },
      "AmazonS3Auth": {
        "title": "AmazonS3Auth",
        "type": "object",
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "aws_signature_v4": "#/components/schemas/AmazonS3AWSSignatureV4Auth",
            "iam_role": "#/components/schemas/AmazonS3AWSIAMRoleAuth"
          }
        },
        "properties": {
          "type": {
            "type": "string",
            "minLength": 1
          }
        },
        "required": [
          "type"
        ],
        "example": {
          "type": "aws_signature_v4",
          "region": "eu-west-1",
          "access_key_id": "access_key_id",
          "secret_access_key": "secret_access_key"
        }
      },
      "AWSSignatureV4Auth": {
        "title": "AWSSignatureV4Auth",
        "type": "object",
        "properties": {
          "access_key_id": {
            "type": "string"
          },
          "secret_access_key": {
            "type": "string",
            "description": "The access key. The API returns null to hide this sensitive value.",
            "nullable": true
          },
          "region": {
            "type": "string"
          }
        },
        "required": [
          "access_key_id",
          "secret_access_key",
          "region"
        ]
      },
      "AmazonS3AWSSignatureV4Auth": {
        "title": "AmazonS3AWSSignatureV4Auth",
        "allOf": [
          {
            "$ref": "#/components/schemas/AmazonS3Auth"
          },
          {
            "$ref": "#/components/schemas/AWSSignatureV4Auth"
          }
        ]
      },
      "AWSIAMRoleAuth": {
        "title": "AWSIAMRoleAuth",
        "type": "object",
        "properties": {
          "ods_aws_account_id": {
            "type": "string",
            "description": "The AWS account number that will assume the role.",
            "readOnly": true,
            "example": 210987654321
          },
          "external_id": {
            "type": "string",
            "description": "The identifier for the connection that will assume the role.",
            "readOnly": true,
            "example": "ods-domain-2fa5c43c-35bf-4e1a-8da5-45f7cd8b4f6c"
          },
          "is_valid": {
            "type": "boolean",
            "description": "The capability of assuming the role for the connection. Is set to true if the role is successfully assumed when the \"role_arn\" is set.",
            "readOnly": true,
            "example": true
          },
          "role_arn": {
            "type": "string",
            "description": "The identifier of the role to be assumed should be set to an empty string when the connection is created. It is expected to be updated by the user.",
            "example": "arn:aws:iam::012345678901:role/ODSRoleAuthMyDomain"
          },
          "region": {
            "type": "string",
            "example": "eu-west-1"
          }
        },
        "required": [
          "region"
        ]
      },
      "AmazonS3AWSIAMRoleAuth": {
        "title": "AmazonS3AWSIAMRoleAuth",
        "allOf": [
          {
            "$ref": "#/components/schemas/AmazonS3Auth"
          },
          {
            "$ref": "#/components/schemas/AWSIAMRoleAuth"
          }
        ]
      },
      "AmazonS3Connection": {
        "title": "AmazonS3Connection",
        "allOf": [
          {
            "$ref": "#/components/schemas/Connection"
          },
          {
            "type": "object",
            "properties": {
              "headers": {
                "type": "array",
                "items": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "name": {
                      "type": "string",
                      "example": "header-name"
                    },
                    "value": {
                      "type": "string",
                      "example": "header-value"
                    }
                  },
                  "required": [
                    "name",
                    "value"
                  ]
                }
              },
              "auth": {
                "$ref": "#/components/schemas/AmazonS3Auth"
              }
            },
            "required": [
              "url"
            ]
          }
        ]
      },
      "SnowflakeODBCDatasource": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Datasource"
          },
          {
            "type": "object",
            "properties": {
              "connection": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/SnowflakeODBCConnection"
                  },
                  {
                    "$ref": "#/components/schemas/ConnectionUID"
                  }
                ]
              },
              "query": {
                "type": "string"
              },
              "preview_query": {
                "type": "string"
              },
              "incremental_query": {
                "type": "string"
              },
              "incremental_field": {
                "type": "string"
              }
            }
          }
        ]
      },
      "SnowflakeODBCConnection": {
        "title": "SnowflakeODBCConnection",
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "snowflake_odbc"
            ]
          },
          "connection_string": {
            "type": "string",
            "description": "Your snowflake connection string"
          }
        },
        "required": [
          "type",
          "connection_string"
        ]
      },
      "OdsFormDatasource": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Datasource"
          },
          {
            "type": "object",
            "properties": {
              "form_uid": {
                "type": "string"
              },
              "domain_id": {
                "type": "string"
              },
              "status_to_extract": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "is_available": {
                "type": "boolean"
              }
            }
          }
        ]
      },
      "AzureBlobStorageAuth": {
        "title": "AzureBlobStorageAuth",
        "type": "object",
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "shared_key": "#/components/schemas/AzureBlobStorageSharedKeyAuth"
          }
        },
        "properties": {
          "type": {
            "type": "string",
            "minLength": 1
          }
        },
        "required": [
          "type"
        ],
        "example": {
          "type": "shared_key",
          "account_name": "storage-account-name",
          "access_key": "access_key"
        }
      },
      "AzureBlobStorageSharedKeyAuth": {
        "title": "AzureBlobStorageSharedKeyAuth",
        "allOf": [
          {
            "$ref": "#/components/schemas/AzureBlobStorageAuth"
          },
          {
            "type": "object",
            "properties": {
              "account_name": {
                "type": "string"
              },
              "shared_key": {
                "type": "string",
                "description": "The account shared key. The API returns null to hide this sensitive value.",
                "nullable": true
              }
            },
            "required": [
              "account_name",
              "shared_key"
            ]
          }
        ]
      },
      "AzureBlobStorageConnection": {
        "title": "AzureBlobStorageConnection",
        "allOf": [
          {
            "$ref": "#/components/schemas/Connection"
          },
          {
            "type": "object",
            "properties": {
              "headers": {
                "type": "array",
                "items": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "name": {
                      "type": "string",
                      "example": "header-name"
                    },
                    "value": {
                      "type": "string",
                      "example": "header-value"
                    }
                  },
                  "required": [
                    "name",
                    "value"
                  ]
                }
              },
              "auth": {
                "$ref": "#/components/schemas/AzureBlobStorageAuth"
              }
            },
            "required": [
              "url"
            ]
          }
        ]
      },
      "HTTPAuth": {
        "title": "HTTPAuth",
        "type": "object",
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "basic_auth": "#/components/schemas/HTTPBasicAuth",
            "oauth2": "#/components/schemas/HTTPOAuth2Auth",
            "oidc": "#/components/schemas/HTTPOIDCAuth"
          }
        },
        "properties": {
          "type": {
            "type": "string",
            "minLength": 1
          }
        },
        "required": [
          "type"
        ]
      },
      "HTTPBasicAuth": {
        "title": "HTTPBasicAuth",
        "allOf": [
          {
            "$ref": "#/components/schemas/HTTPAuth"
          },
          {
            "$ref": "#/components/schemas/BasicAuth"
          }
        ]
      },
      "OAuth2Auth": {
        "title": "OAuth2Auth",
        "type": "object",
        "properties": {
          "client_id": {
            "type": "string"
          },
          "client_secret": {
            "type": "string",
            "writeOnly": true,
            "nullable": true
          },
          "scope": {
            "type": "string"
          },
          "token_endpoint": {
            "type": "string"
          },
          "grant_type": {
            "type": "string",
            "enum": [
              "password",
              "authorization_code",
              "client_credentials"
            ]
          },
          "username": {
            "type": "string",
            "writeOnly": true
          },
          "password": {
            "type": "string",
            "writeOnly": true,
            "nullable": true
          },
          "code": {
            "type": "string",
            "writeOnly": true,
            "nullable": true
          }
        },
        "required": [
          "client_id",
          "client_secret",
          "scope",
          "token_endpoint",
          "grant_type"
        ]
      },
      "HTTPOAuth2Auth": {
        "title": "HTTPOAuth2Auth",
        "allOf": [
          {
            "$ref": "#/components/schemas/HTTPAuth"
          },
          {
            "$ref": "#/components/schemas/OAuth2Auth"
          }
        ]
      },
      "OIDCAuth": {
        "title": "OIDCAuth",
        "type": "object",
        "properties": {
          "client_id": {
            "type": "string"
          },
          "client_secret": {
            "type": "string",
            "writeOnly": true,
            "nullable": true
          },
          "scope": {
            "type": "string"
          },
          "token_endpoint": {
            "type": "string"
          },
          "grant_type": {
            "type": "string",
            "enum": [
              "authorization_code"
            ]
          },
          "code": {
            "type": "string",
            "writeOnly": true,
            "nullable": true
          },
          "claims": {
            "type": "object"
          }
        },
        "required": [
          "client_id",
          "client_secret",
          "scope",
          "token_endpoint",
          "grant_type"
        ]
      },
      "HTTPOIDCAuth": {
        "title": "HTTPOIDCAuth",
        "allOf": [
          {
            "$ref": "#/components/schemas/HTTPAuth"
          },
          {
            "$ref": "#/components/schemas/OIDCAuth"
          }
        ]
      },
      "HTTPDatasource": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Datasource"
          },
          {
            "type": "object",
            "title": "HTTPDatasource",
            "x-tags": [
              "Dataset resources"
            ],
            "properties": {
              "relative_url": {
                "type": "string"
              },
              "headers": {
                "type": "array",
                "items": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "name": {
                      "type": "string"
                    },
                    "value": {
                      "type": "string"
                    }
                  }
                }
              },
              "connection": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/ConnectionUID"
                  },
                  {
                    "$ref": "#/components/schemas/HTTPConnection"
                  }
                ]
              }
            },
            "required": [
              "connection"
            ]
          }
        ],
        "title": "HTTPDatasource"
      },
      "FTPDatasource": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Datasource"
          },
          {
            "type": "object",
            "title": "FTPDatasource",
            "x-tags": [
              "Dataset resources"
            ],
            "properties": {
              "relative_url": {
                "type": "string"
              },
              "connection": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/ConnectionUID"
                  },
                  {
                    "$ref": "#/components/schemas/FTPConnection"
                  }
                ]
              }
            },
            "required": [
              "connection"
            ]
          }
        ],
        "title": "FTPDatasource"
      },
      "SharepointDatasource": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Datasource"
          },
          {
            "type": "object",
            "title": "SharepointDatasource",
            "x-tags": [
              "Dataset resources"
            ],
            "properties": {
              "file_id": {
                "type": "string"
              },
              "drive_id": {
                "type": "string"
              },
              "connection": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/ConnectionUID"
                  },
                  {
                    "$ref": "#/components/schemas/SharepointConnection"
                  }
                ]
              }
            },
            "required": [
              "file_id",
              "drive_id",
              "connection"
            ]
          }
        ],
        "title": "SharepointDatasource"
      },
      "GoogleDriveDatasource": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Datasource"
          },
          {
            "type": "object",
            "x-tags": [
              "Dataset resources"
            ],
            "properties": {
              "file_id": {
                "type": "string"
              },
              "connection": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/ConnectionUID"
                  },
                  {
                    "$ref": "#/components/schemas/GoogleDriveConnection"
                  }
                ]
              }
            },
            "required": [
              "file_id",
              "connection"
            ]
          }
        ],
        "title": "GoogleDriveDatasource"
      },
      "FederatedDataset": {
        "title": "Federated Dataset",
        "type": "object",
        "properties": {
          "dataset_id": {
            "type": "string"
          },
          "metas": {
            "type": "object"
          },
          "fields": {
            "type": "array",
            "items": {}
          }
        }
      },
      "RelatedUserReadOnly": {
        "title": "Related user",
        "type": "object",
        "description": "Short representation of a User with only its username",
        "properties": {
          "username": {
            "readOnly": true,
            "type": "string",
            "example": "louise.data"
          }
        },
        "readOnly": true
      },
      "FederatedDatasource": {
        "title": "Federated Datasource",
        "allOf": [
          {
            "$ref": "#/components/schemas/Datasource"
          },
          {
            "type": "object",
            "properties": {
              "domain": {
                "type": "object",
                "required": [
                  "domain_id"
                ],
                "properties": {
                  "domain_id": {
                    "type": "string"
                  }
                }
              },
              "dataset": {
                "oneOf": [
                  {
                    "type": "object",
                    "properties": {
                      "dataset_id": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "dataset_id"
                    ]
                  },
                  {
                    "$ref": "#/components/schemas/FederatedDataset"
                  }
                ]
              },
              "permissions_user": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RelatedUserReadOnly"
                  },
                  {
                    "type": "null"
                  }
                ],
                "readOnly": true
              },
              "impersonate_permissions": {
                "type": "boolean",
                "writeOnly": true
              },
              "parameters": {
                "type": "object"
              }
            },
            "required": [
              "domain",
              "dataset",
              "impersonate_permissions"
            ]
          }
        ]
      },
      "DatasetFile": {
        "type": "object",
        "properties": {
          "uid": {
            "type": "string",
            "readOnly": true,
            "description": "Unique identifier for the file",
            "example": "fromages.csv"
          },
          "filename": {
            "type": "string",
            "readOnly": true,
            "example": "fromages.csv"
          },
          "mimetype": {
            "type": "string",
            "readOnly": true,
            "example": "text/csv",
            "nullable": true
          },
          "created_at": {
            "type": "string",
            "readOnly": true,
            "format": "date-time"
          }
        }
      },
      "UploadedFileDatasource": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Datasource"
          },
          {
            "type": "object",
            "title": "UploadedFileDatasource",
            "x-tags": [
              "Dataset resources"
            ],
            "properties": {
              "file": {
                "oneOf": [
                  {
                    "type": "object",
                    "properties": {
                      "uid": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "uid"
                    ]
                  },
                  {
                    "$ref": "#/components/schemas/DatasetFile"
                  }
                ]
              }
            },
            "required": [
              "file"
            ]
          }
        ],
        "title": "UploadedFileDatasource"
      },
      "AmazonS3Datasource": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Datasource"
          },
          {
            "type": "object",
            "x-tags": [
              "Dataset resources"
            ],
            "properties": {
              "url": {
                "type": "string",
                "example": "https://your-bucket.s3.amazonaws.com/file.csv"
              },
              "headers": {
                "type": "array",
                "items": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "name": {
                      "type": "string"
                    },
                    "value": {
                      "type": "string"
                    }
                  }
                }
              },
              "connection": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/ConnectionUID"
                  },
                  {
                    "$ref": "#/components/schemas/AmazonS3Connection"
                  }
                ]
              }
            },
            "required": [
              "connection"
            ]
          }
        ],
        "title": "AmazonS3Datasource"
      },
      "AzureBlobStorageDatasource": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Datasource"
          },
          {
            "type": "object",
            "x-tags": [
              "Dataset resources"
            ],
            "properties": {
              "url": {
                "type": "string",
                "example": "https://storage-account-name.blob.core.windows.net/file.csv"
              },
              "headers": {
                "type": "array",
                "items": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "name": {
                      "type": "string"
                    },
                    "value": {
                      "type": "string"
                    }
                  }
                }
              },
              "connection": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/ConnectionUID"
                  },
                  {
                    "$ref": "#/components/schemas/AzureBlobStorageConnection"
                  }
                ]
              }
            },
            "required": [
              "connection"
            ]
          }
        ],
        "title": "AzureBlobStorageDatasource"
      },
      "Resource": {
        "title": "Resource schema",
        "type": "object",
        "x-tags": [
          "Dataset resources"
        ],
        "properties": {
          "uid": {
            "type": "string",
            "minLength": 1,
            "readOnly": true,
            "description": "Unique identifier for the resource"
          },
          "type": {
            "type": "string",
            "minLength": 1,
            "description": "Extractor type that should handle this resource"
          },
          "title": {
            "type": "string",
            "minLength": 1,
            "description": "User defined title for identifying the resource"
          },
          "display_name": {
            "type": "string",
            "minLength": 1,
            "description": "A name representing the resource. It is computed from the resource `title` and `datasource` depending on the type of resource",
            "readOnly": true
          },
          "extraction_infos": {
            "description": "Information about the kind of extraction configured for this resource, or null when it isn't relevant.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ExtractionInfos"
              },
              {
                "type": "null"
              }
            ],
            "readOnly": true
          },
          "origin": {
            "$ref": "#/components/schemas/OriginInfos"
          },
          "updated_at": {
            "type": "string",
            "minLength": 1,
            "format": "date-time",
            "readOnly": true
          },
          "params": {
            "type": "object",
            "description": "Parameters passed to the extractor"
          },
          "datasource": {
            "$ref": "#/components/schemas/Datasource"
          }
        },
        "required": [
          "type",
          "title",
          "datasource"
        ],
        "example": {
          "uid": "re_qf2hyt",
          "type": "csvfile",
          "title": "Fromages",
          "display_name": "https://my-server.com/fromages.csv",
          "extraction_infos": {
            "label": "CSV File",
            "type": "csvfile"
          },
          "origin": {
            "label": "HTTP",
            "type": "http"
          },
          "params": {
            "doublequote": true,
            "encoding": "utf-8",
            "first_row_no": 1,
            "headers_first_row": true,
            "separator": ";"
          },
          "datasource": {
            "type": "http",
            "connection": {
              "uid": "co_qf2hyt"
            },
            "headers": [
              {
                "name": "header-name",
                "value": "header-value"
              }
            ],
            "relative_url": "/fromages.csv"
          },
          "updated_at": "2022-01-01T00:00:00Z"
        }
      },
      "DatasetAttachment": {
        "title": "Attachment schema",
        "type": "object",
        "x-tags": [
          "Dataset attachments"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/DatasetFile"
          }
        ]
      },
      "DatasetAlternativeExport": {
        "title": "Alternative export schema",
        "description": "A dataset alternative export",
        "type": "object",
        "x-tags": [
          "Dataset alternative exports"
        ],
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "uploaded_file": "#/components/schemas/UploadedFileDatasetAlternativeExport",
            "url": "#/components/schemas/URLDatasetAlternativeExport"
          }
        },
        "properties": {
          "uid": {
            "type": "string",
            "readOnly": true,
            "description": "Unique identifier for the alternative export",
            "example": "ae_mm8lbn"
          },
          "title": {
            "type": "string",
            "minLength": 1,
            "example": "Alternative export title"
          },
          "description": {
            "type": "string",
            "example": "Alternative export description"
          },
          "mimetype": {
            "type": "string",
            "readOnly": true,
            "example": "text/csv"
          },
          "type": {
            "type": "string",
            "enum": [
              "url",
              "uploaded_file"
            ]
          },
          "created_at": {
            "type": "string",
            "readOnly": true,
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "readOnly": true,
            "format": "date-time"
          }
        },
        "required": [
          "type",
          "title"
        ]
      },
      "UploadedFileDatasetAlternativeExport": {
        "title": "UploadedFileDatasetAlternativeExport",
        "allOf": [
          {
            "$ref": "#/components/schemas/DatasetAlternativeExport"
          },
          {
            "type": "object",
            "title": "UploadedFileDatasetAlternativeExport",
            "x-tags": [
              "Dataset alternative exports"
            ],
            "properties": {
              "filename": {
                "type": "string",
                "readOnly": true,
                "example": "fromages.csv"
              }
            }
          }
        ]
      },
      "URLDatasetAlternativeExport": {
        "title": "URLDatasetAlternativeExport",
        "allOf": [
          {
            "$ref": "#/components/schemas/DatasetAlternativeExport"
          },
          {
            "type": "object",
            "title": "URLDatasetAlternativeExport",
            "x-tags": [
              "Dataset alternative exports"
            ],
            "properties": {
              "url": {
                "type": "string",
                "readOnly": true,
                "example": "https://example.org/fromages.csv"
              }
            }
          }
        ]
      },
      "DatasetUserSecurity": {
        "title": "User ruleset schema",
        "type": "object",
        "properties": {
          "security": {
            "$ref": "#/components/schemas/DatasetSecurity"
          },
          "permissions": {
            "description": "List of special permissions granted to the target.",
            "type": "array",
            "uniqueItems": true,
            "items": {
              "type": "string",
              "enum": [
                "explore_restricted_dataset",
                "edit_dataset",
                "publish_dataset",
                "manage_dataset"
              ]
            }
          },
          "user": {
            "$ref": "#/components/schemas/RelatedUser"
          }
        },
        "required": [
          "user"
        ],
        "x-tags": [
          "Dataset security"
        ]
      },
      "DatasetGroupSecurity": {
        "title": "Group ruleset schema",
        "type": "object",
        "properties": {
          "security": {
            "$ref": "#/components/schemas/DatasetSecurity"
          },
          "permissions": {
            "description": "List of special permissions granted to the target.",
            "type": "array",
            "uniqueItems": true,
            "items": {
              "type": "string",
              "enum": [
                "explore_restricted_dataset",
                "edit_dataset",
                "publish_dataset",
                "manage_dataset"
              ]
            }
          },
          "group": {
            "type": "object",
            "required": [
              "uid"
            ],
            "properties": {
              "uid": {
                "type": "string",
                "minLength": 1,
                "example": "content_designers"
              }
            },
            "description": "The group targeted by this ruleset."
          }
        },
        "required": [
          "group"
        ],
        "x-tags": [
          "Dataset security"
        ]
      },
      "DatasetVersion": {
        "title": "Dataset version schema",
        "type": "object",
        "properties": {
          "uid": {
            "type": "string",
            "minLength": 1,
            "description": "Unique identifier for the version",
            "example": "ch_qf2hyt"
          },
          "sections": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Sections modified by this change",
            "example": [
              "data"
            ]
          },
          "created_by": {
            "$ref": "#/components/schemas/RelatedUserReadOnly"
          },
          "can_restore": {
            "type": "boolean",
            "example": true
          },
          "created_at": {
            "type": "string",
            "minLength": 1,
            "format": "date-time",
            "readOnly": true,
            "description": "Date at which the change was made"
          }
        },
        "x-tags": [
          "Dataset versions"
        ]
      },
      "DatasetSchedule": {
        "title": "Schedule schema",
        "type": "object",
        "properties": {
          "uid": {
            "type": "string",
            "minLength": 1,
            "readOnly": true,
            "example": "sc_qf2hyt"
          },
          "cron_schedule": {
            "type": "string",
            "minLength": 1,
            "description": "The schedule using the unix-cron string format",
            "example": "0 * * * *"
          }
        },
        "required": [
          "cron_schedule"
        ],
        "x-tags": [
          "Dataset schedules"
        ]
      },
      "DatasetMetadataTemplate": {
        "description": "Values for one of any available template on the portal",
        "oneOf": [
          {
            "$ref": "#/components/schemas/DatasetMetadataDefault"
          },
          {
            "$ref": "#/components/schemas/DatasetMetadataInternal"
          },
          {
            "$ref": "#/components/schemas/DatasetMetadataVisualization"
          },
          {
            "$ref": "#/components/schemas/DatasetMetadataAssetContentConfiguration"
          },
          {
            "$ref": "#/components/schemas/DatasetMetadataCustom"
          }
        ]
      },
      "PermissionEnum": {
        "type": "string",
        "enum": [
          "manage_connection"
        ],
        "description": "A user or user group permission:\n * `manage_connection` - Ability to share, edit and remove the connection"
      },
      "UserSecurity": {
        "title": "User ruleset schema",
        "x-tags": [
          "Datasource connection security"
        ],
        "type": "object",
        "properties": {
          "user": {
            "$ref": "#/components/schemas/RelatedUser"
          },
          "permissions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PermissionEnum"
            },
            "description": "List of special permissions granted to the target."
          }
        }
      },
      "GroupSecurity": {
        "title": "Group ruleset schema",
        "x-tags": [
          "Datasource connection security"
        ],
        "type": "object",
        "properties": {
          "group": {
            "type": "object",
            "properties": {
              "uid": {
                "type": "string",
                "example": "content_designers"
              }
            },
            "description": "The group targeted by this ruleset."
          },
          "permissions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PermissionEnum"
            },
            "description": "List of special permissions granted to the target."
          }
        }
      },
      "CodeEditorPage": {
        "title": "Code editor page schema",
        "x-tags": [
          "Code editor pages"
        ],
        "type": "object",
        "properties": {
          "slug": {
            "type": "string",
            "description": "Human-readable identifier used to generate the page URL",
            "example": "hello_world"
          },
          "title": {
            "type": "object",
            "description": "Internationalized page title",
            "additionalProperties": {
              "type": "string"
            },
            "example": {
              "en": "Hello world"
            }
          },
          "description": {
            "type": "string",
            "description": "Page description",
            "example": "A page saying hello"
          },
          "content": {
            "type": "object",
            "description": "Internationalized page content",
            "properties": {
              "html": {
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              },
              "css": {
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              }
            },
            "example": {
              "html": {
                "en": "<p>\n    Hello world\n</p>"
              },
              "css": {
                "en": ""
              }
            }
          },
          "template": {
            "type": "string",
            "description": "The HTML template used by this page",
            "example": "custom.html"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of strings used to classify and sort pages",
            "example": [
              "My tag"
            ]
          },
          "has_subdomain_copies": {
            "type": "boolean",
            "readOnly": true,
            "description": "Inform if the page been distributed to any subdomain",
            "example": false
          },
          "is_pushed_by_parent": {
            "type": "boolean",
            "readOnly": true,
            "description": "Inform if the page has been distributed by a parent domain",
            "example": false
          },
          "is_restricted": {
            "type": "boolean",
            "description": "Defines if the page is visible to a few specific users, or every user who can explore the portal",
            "example": true
          },
          "is_archived": {
            "type": "boolean",
            "example": false,
            "description": "Defines if the page is archived. An archived page isn't included in the license quota, but can't be edited and isn't available to users."
          },
          "created_by": {
            "$ref": "#/components/schemas/RelatedUserReadOnly"
          },
          "updated_by": {
            "$ref": "#/components/schemas/RelatedUserReadOnly"
          },
          "updated_at": {
            "type": "string",
            "readOnly": true,
            "format": "date-time",
            "description": "Date when the page was last edited"
          },
          "created_at": {
            "type": "string",
            "readOnly": true,
            "format": "date-time",
            "description": "Date when the page was created"
          }
        },
        "required": [
          "content"
        ]
      },
      "PermissionEnum-2": {
        "type": "string",
        "enum": [
          "edit_page",
          "manage_page"
        ],
        "description": "A user or user group permission:\n * `edit_page` - Ability to edit the page\n * `manage_page` - Ability to change the security of the page"
      },
      "GroupSecurity-2": {
        "title": "Group ruleset",
        "x-tags": [
          "Code editor pages security"
        ],
        "type": "object",
        "properties": {
          "group": {
            "type": "object",
            "properties": {
              "uid": {
                "type": "string",
                "example": "content_designers"
              }
            },
            "description": "The group targeted by this ruleset."
          },
          "permissions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PermissionEnum-2"
            },
            "description": "List of special permissions granted to the target."
          }
        }
      },
      "UserSecurity-2": {
        "title": "User ruleset",
        "x-tags": [
          "Code editor pages security"
        ],
        "type": "object",
        "properties": {
          "user": {
            "$ref": "#/components/schemas/RelatedUser"
          },
          "permissions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PermissionEnum-2"
            },
            "description": "List of special permissions granted to the target."
          }
        }
      },
      "StudioPage": {
        "title": "Studio page schema",
        "x-tags": [
          "Studio pages"
        ],
        "type": "object",
        "properties": {
          "uid": {
            "type": "string",
            "minLength": 1,
            "readOnly": true,
            "description": "Unique identifier of the page",
            "example": "sp_qf2hyt"
          },
          "slug": {
            "type": "string",
            "minLength": 1,
            "description": "Human-readable identifier used to generate the page URL",
            "example": "my-page"
          },
          "public": {
            "type": "boolean",
            "default": false,
            "description": "Defines if the page is visible to a few specific users, or every user who can explore the portal"
          },
          "contents": {
            "type": "array",
            "readOnly": true,
            "items": {
              "type": "object",
              "properties": {
                "version_name": {
                  "type": "string",
                  "minLength": 1,
                  "example": "draft"
                },
                "title": {
                  "type": "string",
                  "minLength": 1,
                  "example": "My Page"
                },
                "description": {
                  "type": "string",
                  "minLength": 1,
                  "example": "A page saying hello"
                },
                "created_at": {
                  "type": "string",
                  "minLength": 1,
                  "format": "date-time"
                },
                "updated_at": {
                  "type": "string",
                  "minLength": 1,
                  "format": "date-time"
                },
                "updated_by": {
                  "$ref": "#/components/schemas/RelatedUserReadOnly"
                }
              }
            }
          },
          "first_published_at": {
            "type": "string",
            "minLength": 1,
            "format": "date-time",
            "readOnly": true,
            "description": "Date when the page was first published"
          },
          "created_at": {
            "type": "string",
            "minLength": 1,
            "format": "date-time",
            "readOnly": true,
            "description": "Date when the page was created"
          },
          "updated_at": {
            "type": "string",
            "minLength": 1,
            "format": "date-time",
            "readOnly": true,
            "description": "Date when the page was last edited"
          },
          "created_by": {
            "$ref": "#/components/schemas/RelatedUserReadOnly"
          }
        }
      },
      "PermissionEnum-3": {
        "type": "string",
        "enum": [
          "edit_page"
        ],
        "description": "A user or user group permission:\n * `edit_page` - Ability to edit the page"
      },
      "GroupSecurity-3": {
        "title": "Group ruleset",
        "x-tags": [
          "Studio pages security"
        ],
        "type": "object",
        "properties": {
          "group": {
            "type": "object",
            "properties": {
              "uid": {
                "type": "string",
                "example": "content_designers"
              }
            },
            "description": "The group targeted by this ruleset."
          },
          "permissions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PermissionEnum-3"
            },
            "description": "List of special permissions granted to the target."
          }
        }
      },
      "UserSecurity-3": {
        "title": "User ruleset",
        "x-tags": [
          "Studio pages security"
        ],
        "type": "object",
        "properties": {
          "user": {
            "$ref": "#/components/schemas/RelatedUser"
          },
          "permissions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PermissionEnum-3"
            },
            "description": "List of special permissions granted to the target."
          }
        }
      },
      "Permission": {
        "type": "string",
        "title": "Permission",
        "enum": [
          "edit_domain",
          "create_page",
          "edit_page",
          "manage_page",
          "explore_restricted_page",
          "create_dataset",
          "edit_dataset",
          "publish_dataset",
          "manage_dataset",
          "explore_restricted_dataset",
          "edit_reuse",
          "manage_subdomains",
          "explore_monitoring",
          "edit_theme",
          "edit_form",
          "submit_private_form"
        ],
        "description": "A user or user group permission:\n * `edit_domain` - Ability to edit the properties of the domain, including user and group management\n * `create_page` - Ability to create new pages\n * `edit_page` - Ability to edit all pages\n * `manage_page` - Ability to change the security of any page editable by this user\n * `explore_restricted_page` - Ability to browse any page, even the restricted ones\n * `create_dataset` - Ability to create new datasets\n * `edit_dataset` - Ability to edit all datasets\n * `publish_dataset` - Ability to publish datasets editable by this user\n * `manage_dataset` - Ability to change the security of datasets editable by this user\n * `explore_restricted_dataset` - Ability to browse any dataset, even the restricted ones\n * `edit_reuse` - Ability to edit and manage existing reuses\n * `manage_subdomains` - Ability to create and manage subdomains\n * `explore_monitoring` - Ability to browse any monitoring dataset and access the analytics section of the back-office\n * `edit_theme` - Ability to manage the domain's theme (edit and make live)\n * `edit_form` - Ability to create new forms, edit and publish all forms\n * `submit_private_form` - Ability to see all the forms, even the restricted ones"
      },
      "APIKey": {
        "title": "API key schema",
        "type": "object",
        "x-tags": [
          "API keys"
        ],
        "properties": {
          "uid": {
            "type": "string",
            "readOnly": true,
            "example": "ak_qf2hyt"
          },
          "label": {
            "type": "string",
            "example": "My API Key"
          },
          "key": {
            "type": "string",
            "readOnly": true,
            "example": "63d534ca0c1806024215cfd99dba4ea188f55d4f1b53ac0b6eceb455"
          },
          "permissions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Permission"
            },
            "description": "A list of permissions granted to this API Key",
            "example": [
              "explore_restricted_dataset"
            ]
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "user": {
            "$ref": "#/components/schemas/RelatedUserReadOnly"
          },
          "revocation_status": {
            "type": "object",
            "properties": {
              "revoked_at": {
                "readOnly": true,
                "oneOf": [
                  {
                    "type": "string",
                    "format": "date-time"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "revocation_reason": {
                "type": "string",
                "example": "Explanation why the API Key has been revoked"
              }
            },
            "readOnly": true
          },
          "is_revoked": {
            "type": "boolean",
            "readOnly": true,
            "example": true
          }
        }
      },
      "ExploreLimits": {
        "title": "ExploreLimits",
        "type": "object",
        "properties": {
          "api_calls": {
            "type": "object",
            "properties": {
              "limit": {
                "type": "number",
                "minimum": 0,
                "example": 2000
              },
              "unit": {
                "type": "string",
                "enum": [
                  "year",
                  "month",
                  "day",
                  "hour",
                  "minute",
                  "second"
                ],
                "example": "day"
              }
            },
            "required": [
              "limit",
              "unit"
            ]
          }
        }
      },
      "ManagementLimits": {
        "title": "ManagementLimits",
        "type": "object",
        "example": {},
        "deprecated": true
      },
      "UserGroup": {
        "title": "User group schema",
        "type": "object",
        "x-tags": [
          "User groups"
        ],
        "properties": {
          "uid": {
            "type": "string",
            "readOnly": true,
            "description": "The group identifier",
            "example": "content_designers"
          },
          "title": {
            "type": "string",
            "description": "The group title",
            "example": "Content Designers"
          },
          "description": {
            "type": "string",
            "description": "The group description",
            "example": "This wonderful group is for designers only."
          },
          "user_count": {
            "type": "number",
            "readOnly": true,
            "description": "The count of users in the group",
            "example": 42
          },
          "permissions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Permission"
            },
            "description": "A list of permissions granted to the members of this group",
            "example": [
              "explore_restricted_dataset"
            ]
          },
          "explore_limits": {
            "$ref": "#/components/schemas/ExploreLimits"
          },
          "management_limits": {
            "$ref": "#/components/schemas/ManagementLimits"
          },
          "created_at": {
            "type": "string",
            "readOnly": true,
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "readOnly": true,
            "format": "date-time"
          },
          "created_by": {
            "$ref": "#/components/schemas/RelatedUserReadOnly"
          },
          "updated_by": {
            "$ref": "#/components/schemas/RelatedUserReadOnly"
          }
        },
        "required": [
          "uid",
          "title"
        ]
      },
      "User": {
        "title": "User schema",
        "type": "object",
        "x-tags": [
          "Users"
        ],
        "properties": {
          "username": {
            "type": "string",
            "description": "The user's username",
            "example": "louise.data"
          },
          "display_name": {
            "type": "string",
            "readOnly": true,
            "description": "Simplified version of the username",
            "example": "louise.data"
          },
          "first_name": {
            "type": "string",
            "description": "The user's first name",
            "example": "Louise"
          },
          "last_name": {
            "type": "string",
            "description": "The user's last name",
            "example": "Data"
          },
          "is_active": {
            "type": "boolean",
            "readOnly": true,
            "description": "is `true` if the user can connect to their account",
            "example": true
          },
          "email": {
            "type": "string",
            "description": "The user's e-mail address",
            "example": "contact@email.com"
          },
          "is_ods": {
            "type": "boolean",
            "readOnly": true,
            "description": "is `true` if the user belongs to the Opendatasoft organization",
            "example": false
          },
          "account_type": {
            "type": "string",
            "enum": [
              "global",
              "linked",
              "local"
            ],
            "readOnly": true,
            "description": "The user's account type.",
            "example": "global"
          },
          "permissions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Permission"
            },
            "description": "A list of permissions granted to this user",
            "example": [
              "explore_restricted_dataset",
              "edit_domain"
            ]
          },
          "joined_at": {
            "type": "string",
            "readOnly": true,
            "format": "date-time",
            "description": "The date when the user joined the domain"
          },
          "last_seen_at": {
            "type": "string",
            "readOnly": true,
            "format": "date-time",
            "description": "The date when the user used their account for the last time"
          },
          "last_login_at": {
            "type": "string",
            "readOnly": true,
            "format": "date-time"
          },
          "expires_at": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "readOnly": true,
            "description": "The date when the user permissions will expire",
            "example": null
          },
          "explore_limits": {
            "$ref": "#/components/schemas/ExploreLimits"
          },
          "management_limits": {
            "$ref": "#/components/schemas/ManagementLimits"
          },
          "gravatar_url": {
            "type": "string",
            "readOnly": true,
            "example": "//www.gravatar.com/avatar/6dde1de523fc80569f3dd80548e3eb9c?d=mm&s=80"
          },
          "groups": {
            "description": "A list of groups the user belongs to",
            "oneOf": [
              {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "uid": {
                      "type": "string",
                      "example": "content_designers"
                    }
                  }
                }
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/UserGroup"
                }
              }
            ]
          },
          "identity_providers": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "uid": {
                  "type": "string",
                  "example": "opendatasoft"
                }
              }
            },
            "readOnly": true,
            "description": "The list of authentification providers type for this user."
          }
        },
        "required": [
          "email"
        ]
      },
      "MetadataTemplateField": {
        "description": "Metadata Template Field (part of the template's schema)",
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Metadata Template field name (identifier)",
            "example": "my-custom-field"
          },
          "type": {
            "type": "string",
            "description": "Type of the field",
            "enum": [
              "text",
              "date",
              "datetime",
              "geo_shape",
              "geo_area",
              "html",
              "multitext",
              "boolean",
              "int",
              "double",
              "longstring",
              "enum",
              "list",
              "enumlist",
              "uri_enum",
              "uri_enumlist"
            ],
            "example": "text",
            "default": "text"
          },
          "label": {
            "type": "string",
            "description": "The label (short description) of this field.",
            "example": "My custom field",
            "default": null
          },
          "help_text": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string"
              }
            ],
            "description": "Help text.",
            "example": null,
            "default": null
          },
          "is_hidden": {
            "type": "boolean",
            "description": "System property.",
            "readOnly": true,
            "example": false,
            "default": false
          },
          "self_suggest": {
            "type": "boolean",
            "description": "If True then it will build an URL for getting suggestion of already-filled values. (see suggest_url)",
            "example": false,
            "default": false
          },
          "is_filter": {
            "type": "boolean",
            "description": "If True then this filed can be used a filter.",
            "example": false,
            "default": false
          },
          "i18n": {
            "type": "boolean",
            "description": "If True then this field will be managed by our i18n system.",
            "example": false,
            "default": false
          },
          "suggest_url": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string"
              }
            ],
            "readOnly": true,
            "description": "URL created with self_suggest=True. This URL provides suggestions (\"choices\") for this field based on pre-user filled choices.",
            "example": null
          },
          "choices": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ],
            "description": "List of possible values for this field. On input, any values of this array will be validated against the field type.\n",
            "default": null,
            "example": null
          },
          "labels": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "object",
                "additionalProperties": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              }
            ],
            "description": "Mapping of `choices` values to their label for each domain language.\n",
            "example": null,
            "default": null
          },
          "requirement_level": {
            "type": "string",
            "description": "The indicative requirement level associated to this field.",
            "enum": [
              "optional",
              "recommended",
              "mandatory"
            ],
            "example": "optional",
            "default": "optional"
          }
        },
        "required": [
          "name"
        ]
      },
      "BaseMetadataTemplate": {
        "description": "Metadata Template",
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name (identifier) of the template",
            "minLength": 1,
            "example": "my-custom-template"
          },
          "title": {
            "type": "string",
            "description": "Title (description) of the template",
            "example": "My custom template"
          },
          "is_active": {
            "type": "boolean",
            "description": "True if the template is (needs to be) activated. False otherwise.",
            "example": true
          },
          "is_always_active": {
            "type": "boolean",
            "description": "True if the template can't be deactivated.",
            "example": false,
            "readOnly": true
          },
          "is_system": {
            "readOnly": true,
            "type": "boolean",
            "description": "True if the template is provided by the system. A system template cannot be modifiable nor removable. False for all other templates.",
            "example": false
          },
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MetadataTemplateField"
            }
          },
          "created_at": {
            "type": "string",
            "readOnly": true,
            "format": "date-time",
            "description": "Date when the template was created"
          },
          "created_by": {
            "$ref": "#/components/schemas/RelatedUserReadOnly"
          },
          "updated_at": {
            "type": "string",
            "readOnly": true,
            "format": "date-time",
            "description": "Date when the template was last edited"
          },
          "updated_by": {
            "$ref": "#/components/schemas/RelatedUserReadOnly"
          }
        },
        "required": [
          "name",
          "title",
          "type",
          "is_active",
          "schema"
        ]
      },
      "MetadataTemplate": {
        "title": "Metadata template schema",
        "x-tags": [
          "Metadata templates"
        ],
        "description": "Metadata Template",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseMetadataTemplate"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "description": "The type of the template. Only templates with type `basic` or `admin` can be created.",
                "enum": [
                  "interop",
                  "basic",
                  "extra",
                  "admin"
                ],
                "example": "basic"
              }
            }
          }
        ]
      },
      "CreatableOrEditableMetadataTemplate": {
        "description": "Metadata Template",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseMetadataTemplate"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "description": "The type of the template. Only templates with type `basic` or `admin` can be created.",
                "enum": [
                  "basic",
                  "admin"
                ],
                "example": "basic"
              }
            }
          }
        ]
      },
      "MetadataTemplateFieldSuggestions": {
        "description": "Suggested values provided when calling the suggest_url with the appropriate parameters.",
        "type": "object",
        "properties": {
          "hits": {
            "readOnly": true,
            "type": "array",
            "description": "Empty list",
            "items": {
              "type": "string"
            }
          },
          "nb_hits": {
            "readOnly": true,
            "type": "number"
          },
          "page": {
            "readOnly": true,
            "type": "number"
          },
          "hits_per_page": {
            "readOnly": true,
            "type": "number"
          },
          "exhaustive_nb_hits": {
            "readOnly": true,
            "type": "boolean"
          },
          "exhaustive_typo": {
            "readOnly": true,
            "type": "boolean"
          },
          "exhaustive": {
            "readOnly": true,
            "type": "object",
            "properties": {
              "nb_hits": {
                "type": "boolean"
              },
              "typo": {
                "type": "boolean"
              }
            }
          },
          "query": {
            "readOnly": true,
            "type": "string"
          },
          "params": {
            "readOnly": true,
            "type": "string"
          },
          "processing_time_ms": {
            "readOnly": true,
            "type": "number"
          }
        }
      },
      "Harvester": {
        "type": "object",
        "title": "Harvester schema",
        "x-tags": [
          "Harvesters"
        ],
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "arcgis": "#/components/schemas/ArcgisHarvester",
            "arcgis_opendata": "#/components/schemas/ArcgisOpendataHarvester",
            "ckan": "#/components/schemas/CKANHarvester",
            "csw": "#/components/schemas/CSWHarvester",
            "datagouv": "#/components/schemas/DatagouvHarvester",
            "datajson": "#/components/schemas/DatajsonHarvester",
            "ftp": "#/components/schemas/FTPHarvester",
            "ftp_csv": "#/components/schemas/FTPCSVHarvester",
            "ftp_with_meta_csv": "#/components/schemas/FTPWithMetaCSVHarvester",
            "junar": "#/components/schemas/JunarHarvester",
            "omi_node": "#/components/schemas/OMINodeHarvester",
            "ods": "#/components/schemas/OpendatasoftHarvester",
            "quandl": "#/components/schemas/QuandlHarvester",
            "socrata": "#/components/schemas/SocrataHarvester",
            "wfs": "#/components/schemas/WFSHarvester"
          }
        },
        "properties": {
          "uid": {
            "type": "string",
            "minLength": 1,
            "readOnly": true,
            "example": "harvester-uid"
          },
          "type": {
            "type": "string",
            "minLength": 1
          },
          "name": {
            "type": "string",
            "minLength": 1,
            "example": "Harvester title"
          },
          "status": {
            "type": "string",
            "readOnly": true,
            "enum": [
              "idle",
              "queued",
              "aborting",
              "processing",
              "deleting",
              "new"
            ]
          },
          "version": {
            "type": "integer",
            "minimum": 1,
            "default": 1
          },
          "restrict_datasets_visibility": {
            "type": "boolean",
            "description": "If the harvested datasets should be configured as private. By default, it has the same value as the domain configuration \"Restrict new datasets by default\""
          },
          "delete_missing_datasets": {
            "type": "boolean",
            "default": false,
            "description": "If the source datasets are deleted on the harvested portal, delete them on this Opendatasoft portal too"
          },
          "forced_metas": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "additionalProperties": true,
              "example": {
                "publisher": "Paris Open Data"
              }
            },
            "example": {
              "default": {
                "publisher": "Paris Open Data"
              }
            },
            "description": "Allow you to override some metadata in every harvested dataset"
          },
          "remote_datasets_count": {
            "type": "integer",
            "readOnly": true,
            "description": "How many datasets have been found on the remote catalog",
            "example": 100
          },
          "harvested_datasets_count": {
            "type": "integer",
            "readOnly": true,
            "description": "How many datasets have been harvested in the current or last run",
            "example": 98
          },
          "published_datasets_count": {
            "type": "integer",
            "readOnly": true,
            "description": "How many harvested datasets are published",
            "example": 30
          },
          "attached_datasets_count": {
            "type": "integer",
            "readOnly": true,
            "description": "How many datasets in your Opendatasoft portal have been created by this harvester",
            "example": 98
          },
          "has_error": {
            "type": "boolean",
            "readOnly": true,
            "description": "If the last harvesting resulted in a critical error",
            "example": false
          },
          "resource_errors_count": {
            "type": "integer",
            "readOnly": true,
            "minimum": 0,
            "description": "How many datasets on the remote catalog led to an error and couldn't be harvested",
            "example": 2
          },
          "created_at": {
            "type": "string",
            "minLength": 1,
            "format": "date-time",
            "readOnly": true
          },
          "updated_at": {
            "type": "string",
            "minLength": 1,
            "format": "date-time",
            "readOnly": true
          },
          "updated_by": {
            "$ref": "#/components/schemas/RelatedUserReadOnly"
          },
          "last_started_at": {
            "type": "string",
            "minLength": 1,
            "format": "date-time",
            "readOnly": true,
            "description": "The last time the harvester was started",
            "nullable": true
          },
          "last_success_at": {
            "type": "string",
            "minLength": 1,
            "format": "date-time",
            "readOnly": true,
            "description": "The last time the harvesting has been succcesful",
            "nullable": true
          }
        },
        "required": [
          "uid",
          "type",
          "name",
          "status",
          "remote_datasets_count",
          "harvested_datasets_count",
          "published_datasets_count",
          "attached_datasets_count",
          "has_error",
          "resource_errors_count",
          "created_at",
          "updated_at",
          "updated_by",
          "last_started_at",
          "last_success_at"
        ]
      },
      "download_resources": {
        "type": "boolean",
        "default": false,
        "description": "If you want to download resources instead of attaching them via URL."
      },
      "metadata_only": {
        "type": "boolean",
        "default": false,
        "description": "If you want to harvest the remote datasets metadata without their resources."
      },
      "ArcgisHarvester": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Harvester"
          },
          {
            "type": "object",
            "title": "ArcgisHarvester",
            "x-tags": [
              "Harvesters"
            ],
            "properties": {
              "url": {
                "type": "string",
                "minLength": 1,
                "example": "https://sampleserver1.arcgisonline.com/ArcGIS/rest/services"
              },
              "download_resources": {
                "$ref": "#/components/schemas/download_resources"
              },
              "metadata_only": {
                "$ref": "#/components/schemas/metadata_only"
              }
            },
            "required": [
              "url"
            ]
          }
        ],
        "title": "ArcgisHarvester"
      },
      "ArcgisOpendataHarvester": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Harvester"
          },
          {
            "type": "object",
            "title": "ArcgisOpendataHarvester",
            "x-tags": [
              "Harvesters"
            ],
            "properties": {
              "url": {
                "type": "string",
                "minLength": 1,
                "example": "http://cassini.apur.opendata.arcgis.com/"
              },
              "compute_geo_area": {
                "type": "boolean",
                "default": false
              },
              "fetch_data": {
                "type": "boolean",
                "default": false
              },
              "download_resources": {
                "$ref": "#/components/schemas/download_resources"
              },
              "metadata_only": {
                "$ref": "#/components/schemas/metadata_only"
              }
            },
            "required": [
              "url"
            ]
          }
        ],
        "title": "ArcgisOpendataHarvester"
      },
      "CKANHarvester": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Harvester"
          },
          {
            "type": "object",
            "title": "CKANHarvester",
            "x-tags": [
              "Harvesters"
            ],
            "properties": {
              "url": {
                "type": "string",
                "minLength": 1,
                "example": "https://www.hri.fi/api/3"
              },
              "limit": {
                "type": "integer",
                "default": 5
              },
              "offset": {
                "type": "integer",
                "default": 3
              },
              "sort": {
                "type": "string",
                "default": "relevance desc"
              },
              "api_key": {
                "type": "string",
                "default": "",
                "description": "The service API key. If it isn't blank, the API returns null to hide this sensitive value.",
                "nullable": true
              },
              "group": {
                "type": "string",
                "default": "education"
              },
              "language": {
                "type": "string",
                "default": ""
              },
              "query": {
                "type": "string",
                "default": ""
              },
              "download_resources": {
                "$ref": "#/components/schemas/download_resources"
              },
              "metadata_only": {
                "$ref": "#/components/schemas/metadata_only"
              }
            },
            "required": [
              "url"
            ]
          }
        ],
        "title": "CKANHarvester"
      },
      "CSWHarvester": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Harvester"
          },
          {
            "type": "object",
            "title": "CSWHarvester",
            "x-tags": [
              "Harvesters"
            ],
            "properties": {
              "url": {
                "type": "string",
                "minLength": 1,
                "example": "https://infogeo.grandpoitiers.fr/geoportal/csw"
              },
              "keywords_thesaurus": {
                "type": "string",
                "default": ""
              },
              "theme_thesaurus": {
                "type": "string",
                "default": ""
              },
              "insert_br_in_description": {
                "type": "boolean",
                "default": false
              },
              "constraint_language": {
                "type": "boolean",
                "default": false
              },
              "invert_coordinates": {
                "type": "boolean",
                "default": false
              },
              "themes_mapping": {
                "type": "object",
                "additionalProperties": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  },
                  "example": {
                    "remote_theme": "ods_theme"
                  }
                },
                "example": {
                  "thesaurus_name_or_id": {
                    "remote_theme": "ods_theme"
                  }
                }
              },
              "licenses_mapping": {
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                },
                "example": {
                  "remote_license": "ods_license"
                }
              },
              "metadata_only": {
                "$ref": "#/components/schemas/metadata_only"
              }
            },
            "required": [
              "url"
            ]
          }
        ],
        "title": "CSWHarvester"
      },
      "DatagouvHarvester": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Harvester"
          },
          {
            "type": "object",
            "title": "DatagouvHarvester",
            "x-tags": [
              "Harvesters"
            ],
            "properties": {
              "organization_id": {
                "type": "string",
                "minLength": 1,
                "example": "534fff75a3a7292c64a77de4"
              },
              "attachment": {
                "type": "boolean",
                "default": false
              },
              "filter_name": {
                "type": "string",
                "default": "",
                "example": "temporal-coverage"
              },
              "filter_value": {
                "type": "string",
                "default": "",
                "example": "2020-01-01-2020-12-31"
              },
              "download_resources": {
                "$ref": "#/components/schemas/download_resources"
              },
              "metadata_only": {
                "$ref": "#/components/schemas/metadata_only"
              }
            },
            "required": [
              "organization_id"
            ]
          }
        ],
        "title": "DatagouvHarvester"
      },
      "DatajsonHarvester": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Harvester"
          },
          {
            "type": "object",
            "title": "DatajsonHarvester",
            "x-tags": [
              "Harvesters"
            ],
            "properties": {
              "url": {
                "type": "string",
                "minLength": 1,
                "example": "https://data.townofcary.org/"
              },
              "number_of_datasets": {
                "type": "integer",
                "default": null,
                "nullable": true
              },
              "download_resources": {
                "$ref": "#/components/schemas/download_resources"
              },
              "metadata_only": {
                "$ref": "#/components/schemas/metadata_only"
              }
            },
            "required": [
              "url"
            ]
          }
        ],
        "title": "DatajsonHarvester"
      },
      "FTPHarvester": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Harvester"
          },
          {
            "type": "object",
            "title": "FTPHarvester",
            "x-tags": [
              "Harvesters"
            ],
            "properties": {
              "host": {
                "type": "string",
                "minLength": 1,
                "example": "your-ftp-service.com"
              },
              "user": {
                "type": "string",
                "minLength": 1,
                "example": "username"
              },
              "password": {
                "type": "string",
                "minLength": 1,
                "example": "secret_password",
                "description": "The password for the user. The API returns null to hide this sensitive value.",
                "nullable": true
              },
              "directory": {
                "type": "string",
                "default": "",
                "example": "/subdirectory"
              },
              "meta": {
                "type": "string",
                "default": ""
              },
              "download_resources": {
                "$ref": "#/components/schemas/download_resources"
              },
              "metadata_only": {
                "$ref": "#/components/schemas/metadata_only"
              }
            },
            "required": [
              "host",
              "user",
              "password"
            ]
          }
        ],
        "title": "FTPHarvester"
      },
      "FTPCSVHarvester": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Harvester"
          },
          {
            "type": "object",
            "title": "FTPCSVHarvester",
            "x-tags": [
              "Harvesters"
            ],
            "properties": {
              "host": {
                "type": "string",
                "minLength": 1,
                "example": "your-ftp-service.com"
              },
              "user": {
                "type": "string",
                "minLength": 1,
                "example": "username"
              },
              "password": {
                "type": "string",
                "minLength": 1,
                "example": "secret_password",
                "description": "The password for the user. The API returns null to hide this sensitive value.",
                "nullable": true
              },
              "directory": {
                "type": "string",
                "default": "",
                "example": "/subdirectory"
              },
              "metadata_file": {
                "type": "string",
                "example": "meta_filename.csv"
              },
              "metadata_join_key": {
                "type": "string",
                "default": "source_dataset"
              },
              "download_resources": {
                "$ref": "#/components/schemas/download_resources"
              },
              "metadata_only": {
                "$ref": "#/components/schemas/metadata_only"
              }
            },
            "required": [
              "host",
              "user",
              "password",
              "metadata_file"
            ]
          }
        ],
        "title": "FTPCSVHarvester"
      },
      "FTPWithMetaCSVHarvester": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Harvester"
          },
          {
            "type": "object",
            "title": "FTPWithMetaCSVHarvester",
            "x-tags": [
              "Harvesters"
            ],
            "properties": {
              "host": {
                "type": "string",
                "minLength": 1,
                "example": "your-ftp-service.com"
              },
              "user": {
                "type": "string",
                "minLength": 1,
                "example": "username"
              },
              "password": {
                "type": "string",
                "example": "secret_password",
                "description": "The password for the user. The API returns null to hide this sensitive value.",
                "nullable": true
              },
              "directory": {
                "type": "string",
                "default": "",
                "example": "/subdirectory"
              },
              "metadata_file": {
                "type": "string",
                "minLength": 1,
                "example": "meta_filename.csv"
              },
              "resource_location_column": {
                "type": "string",
                "default": "source_dataset"
              },
              "resource_schema_column": {
                "type": "string",
                "default": ""
              },
              "csv_separator": {
                "type": "string",
                "default": ";"
              },
              "download_resources": {
                "$ref": "#/components/schemas/download_resources"
              },
              "metadata_only": {
                "$ref": "#/components/schemas/metadata_only"
              }
            },
            "required": [
              "host",
              "user",
              "password",
              "metadata_file"
            ]
          }
        ],
        "title": "FTPWithMetaCSVHarvester"
      },
      "JunarHarvester": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Harvester"
          },
          {
            "type": "object",
            "title": "JunarHarvester",
            "x-tags": [
              "Harvesters"
            ],
            "properties": {
              "url": {
                "type": "string",
                "minLength": 1,
                "example": "https://your-junar-portal.com"
              },
              "auth_key": {
                "type": "string",
                "example": "secret_key",
                "description": "The Junar auth key. The API returns null to hide this sensitive value.",
                "nullable": true
              },
              "query_string": {
                "type": "string",
                "default": ""
              },
              "categories": {
                "type": "string",
                "default": ""
              },
              "download_resources": {
                "$ref": "#/components/schemas/download_resources"
              },
              "metadata_only": {
                "$ref": "#/components/schemas/metadata_only"
              }
            },
            "required": [
              "url",
              "auth_key"
            ]
          }
        ],
        "title": "JunarHarvester"
      },
      "OMINodeHarvester": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Harvester"
          },
          {
            "type": "object",
            "title": "OMINodeHarvester",
            "x-tags": [
              "Harvesters"
            ],
            "properties": {
              "url": {
                "type": "string",
                "minLength": 1,
                "example": "https://your-omi-node-service.com"
              },
              "infoitems_limit": {
                "type": "integer",
                "default": null,
                "nullable": true
              },
              "omi_node_version": {
                "type": "string",
                "default": "0.9.0"
              },
              "download_resources": {
                "$ref": "#/components/schemas/download_resources"
              },
              "metadata_only": {
                "$ref": "#/components/schemas/metadata_only"
              }
            },
            "required": [
              "url"
            ]
          }
        ],
        "title": "OMINodeHarvester"
      },
      "OpendatasoftHarvester": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Harvester"
          },
          {
            "type": "object",
            "title": "OpendatasoftHarvester",
            "x-tags": [
              "Harvesters"
            ],
            "properties": {
              "domain": {
                "type": "string",
                "example": "ods-portal-id",
                "description": "The ID or base URL of the domain you want to harvest."
              },
              "refines": {
                "type": "string",
                "default": "",
                "example": "refine.destination=Asia&refine.origin=France"
              },
              "api_key": {
                "type": "string",
                "default": "",
                "description": "The API key for the remote portal. If it isn't blank, the API returns null to hide this sensitive value. The API key must be linked to a user which has the permissions to browse datasets on the remote portal, and the permissions to create, edit and publish datasets on the local portal.",
                "nullable": true
              }
            },
            "required": [
              "domain"
            ]
          }
        ],
        "title": "OpendatasoftHarvester"
      },
      "QuandlHarvester": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Harvester"
          },
          {
            "type": "object",
            "title": "QuandlHarvester",
            "x-tags": [
              "Harvesters"
            ],
            "properties": {
              "database_code": {
                "type": "string",
                "minLength": 1,
                "example": "ECMCI"
              },
              "api_key": {
                "type": "string",
                "example": "secret_key",
                "description": "The API key for the Quandl service. The API returns null to hide this sensitive value.",
                "nullable": true
              },
              "number_of_datasets": {
                "type": "integer",
                "example": 5,
                "minimum": 0
              },
              "download_resources": {
                "$ref": "#/components/schemas/download_resources"
              },
              "metadata_only": {
                "$ref": "#/components/schemas/metadata_only"
              }
            },
            "required": [
              "database_code",
              "api_key",
              "number_of_datasets"
            ]
          }
        ],
        "title": "QuandlHarvester"
      },
      "SocrataHarvester": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Harvester"
          },
          {
            "type": "object",
            "title": "SocrataHarvester",
            "x-tags": [
              "Harvesters"
            ],
            "properties": {
              "url": {
                "type": "string",
                "minLength": 1,
                "example": "https://data.cityofboston.gov"
              },
              "download_resources": {
                "$ref": "#/components/schemas/download_resources"
              },
              "metadata_only": {
                "$ref": "#/components/schemas/metadata_only"
              }
            },
            "required": [
              "url"
            ]
          }
        ],
        "title": "SocrataHarvester"
      },
      "WFSHarvester": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Harvester"
          },
          {
            "type": "object",
            "title": "WFSHarvester",
            "x-tags": [
              "Harvesters"
            ],
            "properties": {
              "url": {
                "type": "string",
                "minLength": 1,
                "example": "https://your-wfs-service.com"
              },
              "metadata_only": {
                "$ref": "#/components/schemas/metadata_only"
              }
            },
            "required": [
              "url"
            ]
          }
        ],
        "title": "WFSHarvester"
      },
      "HarvesterPreviewResult": {
        "type": "object",
        "title": "Harvester preview",
        "properties": {
          "total_count": {
            "type": "integer",
            "minimum": 0,
            "example": 42
          },
          "results": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "minLength": 1,
                  "example": "georef-united-states-of-america-zc-point"
                },
                "title": {
                  "type": "string",
                  "example": "US Zip Codes Points- United States of America"
                },
                "description": {
                  "type": "string",
                  "example": "Contains most USPS zip codes (lat/long)."
                }
              },
              "required": [
                "id",
                "title",
                "description"
              ]
            }
          }
        },
        "required": [
          "total_count",
          "results"
        ]
      },
      "HarvesterSchedule": {
        "title": "Schedule schema",
        "type": "object",
        "properties": {
          "uid": {
            "type": "string",
            "minLength": 1,
            "readOnly": true,
            "example": "sc_qf2hyt"
          },
          "cron_schedule": {
            "type": "string",
            "minLength": 1,
            "description": "The schedule using the unix-cron string format",
            "example": "1 30 * * *"
          },
          "timezone": {
            "type": "string",
            "minLength": 1,
            "description": "The schedule timezone",
            "example": "Europe/Berlin"
          }
        },
        "required": [
          "uid",
          "cron_schedule",
          "timezone"
        ],
        "x-tags": [
          "Harvester schedules"
        ]
      }
    }
  },
  "security": [
    {
      "QueryAPIKey": []
    },
    {
      "HeaderAPIKey": []
    }
  ],
  "tags": [
    {
      "name": "Datasets",
      "description": "Datasets are at the core of the platform. A dataset is composed of:\n\n- the actual data available on the portal (not available via the Automation API, but instead via the [Explore API](/apis/ods-explore-v2/))\n- metadata like a title, a description and keywords describing the data, so users can discover it in the portal's catalog\n- configurations for processors, visualisation and security, which define the way data will be processed by the platform and made visible to users\n\nThrough the Automation API, it is possible to:\n\n- create datasets\n- attach resources to datasets\n- configure datasets processing pipeline, visualisations and security attributes\n- publish datasets"
    },
    {
      "name": "Dataset resources",
      "description": "Dataset resources"
    },
    {
      "name": "Dataset security",
      "description": "The dataset security is the set of rules that defines who (which users / groups) can access what (which metadata / records / fields) at what frequency (API calls quota) for a given this dataset.\n\nIt is defined through 3 variables:\n\n- a general access policy that sets whether the dataset is accessible to anyone or just a few specific users. It is controlled through the `is_restricted` dataset property.\n- specific rulesets for users and groups. Those rulesets are managed using the `dataset/{uid}/security/` API endpoints described in this section.\n- a default ruleset that applies to anybody else. It is controlled through the `default_security` dataset property.\n"
    },
    {
      "name": "Dataset versions",
      "description": "The versions of a dataset describe subsequent changes of states that affected the different sections of a dataset. \n\nEvery action taken on any resource through POST, PUT or DELETE creates a version object that can be retrieved and acted upon."
    },
    {
      "name": "Dataset processors",
      "description": "The Opendatasoft platform allows you to apply one or more processors to a dataset. \n\nThese processors are units of data transformation and other processing. \nEach processor represents a configurable operation that will be applied to all rows of a dataset. \n\nExamples of what you can do with a processor include replacing text with a regex, geocoding an address into \ngeographical coordinates, creating a new column that contains the result of a substraction between two existing columns \nand much more. \n\nA general-purpose presentation of processors and their capabilities is available in the data processing documentation."
    },
    {
      "name": "Dataset feedbacks",
      "description": "The feedback feature allows users to suggest improvements to portal administrators. \nFeedback can either be about an existing record, or to request the addition of a new record in the dataset.\n\nFeedback is an optional feature and is not activated on every Opendatasoft portal. \nActivation is done by a portal's administrators, and then has to be activated individually on each dataset."
    },
    {
      "name": "Dataset fields",
      "description": "Dataset fields can be configured using a variety of options. These options include their type, their label, \nwhether they are a filter or not, whether they should be discarded, or even how fields are ordered. \n\nThese configuration options, collectively refered to as fields configuration, are accessed using processor-like objects.\n\nType of the field configuration:\n* `rename` - Fields are identified by a technical name, and have a human-friendly label; both are editable using this configuration item.\n* `type` - Types are the most basic way of qualifying fields. Different types unlock different kinds of visualizations and agregations. Below is the list of types supported by the platform.\n* `annotate` - Annotation are a mean to configure special behavior for the fields. Some annotations are only available for certain field types.\n* `description` - Description are a mean to qualify and give some extra details about the content of the field. Descriptions are available when consulting the data.\n* `order` - Fields are processed and displayed in a definite order, this annotation can be used to change that order.\n* `delete` - Some fields present in the data source are not useful or redundant. This configuration item allows to discard them."
    },
    {
      "name": "Datasources connections",
      "description": ""
    },
    {
      "name": "Dataset attachments",
      "description": "Dataset attachments are files that are exposed along with a dataset. These files help make sense of the data.\n"
    },
    {
      "name": "Dataset alternative exports",
      "description": "Dataset alternative exports are custom dataset exports made outside the platform but available for end users to \ndownload like a normal export in the export menu. \n\nAlternative exports are useful to expose exports in formats not supported by the platform, or in a specific geographic coordinate system. \nAlternative exports come in two types:\n\n**Uploaded File:** This type of alternative export enables publishers to upload their own file one the platform.\nSince uploaded file alternative exports are static files instead of a dynamic exports, they tend to be very fast to \ndownload for end users and can be useful to offer a very large dataset export.\n\n**URL:** This type allows publishers to provide a URL pointing to an external file that can be hosted outside the platform."
    },
    {
      "name": "Dataset metadata",
      "description": "Metadata is data describing the dataset itself. This is a set of fields describing the data, such as a title, a description, a list of keywords, a modification date, or whether the dataset is compliant to a specific geospatial norm. Adding metadata on a dataset is important to make sure it can be found, understood, and reused by users. In some cases, it can also be important for interoperability, to make sure other systems can understand the content of the dataset.\n\nDataset metadata are grouped within metadata templates that you can think of as namespaces. On top of the default metadata template, you may also find (depending on your domain's configuration) the Inspire, DCAT or CitadelJSON templates. Many other templates also exist and you can contact the support to define your own templates.\n\n"
    },
    {
      "name": "Studio pages",
      "description": "Studio is the new no-code editor that is designed to help you do just that: create and edit pages, built on your data, in only minutes.\n\nThrough the Automation API, it is possible to manage studio pages as well as to configure their visiblity on the portal."
    },
    {
      "name": "Studio pages security",
      "description": "The page security is the set of rules that defines who (which users / groups) can explore or edit a given studio page.\n\nIt is defined through 2 variables:\n\n- a page restriction through the `public` attribute in the page object, which defines if a page is visible to every user who can explore the portal\n- specific rulesets for users and groups \n\nIf the page isn't set as `public`, then the page will only appear in the portal for users who have a ruleset declared for them, either directly or through a group. Other users won't have any access to the page.\n\nRulesets can also give users permission to edit the page."
    },
    {
      "name": "Code editor pages",
      "description": "Code editor pages can be used to write editorial content directly on the platform, build advanced dashboards and organize data portals.\n\nThrough the Automation API, it is possible to list, create, edit and delete code editor pages as well as to configure pages visiblity on the portal."
    },
    {
      "name": "Code editor pages security",
      "description": "The page security is the set of rules that defines who (which users / groups) can explore or edit a given code editor page.\n\nIt is defined through 2 variables:\n\n- a page restriction through the `is_restricted` attribute in the page object, which defines if a page is visible to every user who can explore the portal\n- specific rulesets for users and groups\n\nIf the page is set as restricted, then the page will only appear in the portal for users who have a ruleset declared for them, either directly or through a group. Other users won't have any access to the page.\n\nRulesets can also give users permission to edit the page and manage its security."
    },
    {
      "name": "Assets",
      "description": ""
    },
    {
      "name": "API keys",
      "description": "API keys are randomly generated passwords that can be used as an authentication method to access a protected API endpoint as an authorized user.\n\nThrough the Automation API, it is possible to list, create, lookup, update and delete API keys for one's own user.\n\n"
    },
    {
      "name": "Users",
      "description": "A user is a person who authentifies themself to utilize the platform.\n\nMost of the times, users are invited on a domain via an e-mail:\n\nif the user doesn't have an Opendatasoft account, the e-mail provides them a link to create their account and choose a password,\n\nthis invitation links the new user or existing user to this domain, allowing domain administrators to grant them permissions to perform specific actions.\n\nIn other words, user accounts are shared between all Opendatasoft domains, but a user must be linked to a specific domain via an invitation before being granted specific permissions on this domain.\n\nThrough the Automation API, it is possible to:\n\n- list users linked to the domain,\n- lookup a specific user,\n- invite users on the domain (via an e-mail address),\n- grant users permissions, quotas and limits on the domain,\n- add or remove them from groups,\n- delete users from the domain.\n"
    },
    {
      "name": "Metadata",
      "description": "Metadata is data describing the dataset itself. This is a set of fields describing the data, such as a title, a description, a list of keywords, a modification date, or whether the dataset is compliant to a specific geospatial norm. Adding metadata on a dataset is important to make sure it can be found, understood, and reused by users. In some cases, it can also be important for interoperability, to make sure other systems can understand the content of the dataset.\n\nDataset metadata are grouped within metadata templates that you can think of as namespaces. On top of the default metadata template, you may also find (depending on your domain's configuration) the Inspire, DCAT or CitadelJSON templates. Many other templates also exist and you can contact the support to define your own templates.\n\n"
    },
    {
      "name": "User groups",
      "description": "A group is an entity comprising several users. When users are added to a group, they benefit from the permissions, quotas and limits of this group.\n\nThrough the Automation API, the following can be performed on the current domain:\n\n- list groups,\n- lookup a specific group,\n- create groups,\n- grant groups permissions, quotas and limits,\n- list, add and delete users in groups,\n- delete groups"
    },
    {
      "name": "Harvesters",
      "description": "Harvesters provide a way for administrators to create and update an important number of datasets by importing them from an external source such as a CSW catalog or an ArcGIS service, among many others. Your user and your API key need the permissions `create_dataset`, `edit_dataset` and `publish_dataset`.\n\nThrough the Automation API, it is possible to:\n\n- create a harvester\n- start a harvester\n- publish the datasets attached to a harvester\n- unpublish the datasets attached to a harvester\n- delete a harvester and optionally delete its datasets\n"
    },
    {
      "name": "Harvester schedules",
      "description": "Harvester schedules"
    },
    {
      "name": "Metadata templates",
      "description": "Metadata templates"
    }
  ],
  "x-tagGroups": [
    {
      "name": "Datasets",
      "tags": [
        "Datasets",
        "Dataset resources",
        "Dataset metadata",
        "Dataset security",
        "Dataset processors",
        "Dataset feedbacks",
        "Dataset fields",
        "Dataset schedules",
        "Dataset versions",
        "Dataset attachments",
        "Dataset alternative exports"
      ]
    },
    {
      "name": "Harvesters",
      "tags": [
        "Harvesters",
        "Harvester schedules"
      ]
    },
    {
      "name": "Users & Groups",
      "tags": [
        "Users",
        "User groups",
        "API keys"
      ]
    },
    {
      "name": "Connections",
      "tags": [
        "Datasources connections",
        "Datasource connection security"
      ]
    },
    {
      "name": "Pages",
      "tags": [
        "Studio pages",
        "Studio pages security",
        "Code editor pages",
        "Code editor pages security"
      ]
    },
    {
      "name": "Domain",
      "tags": [
        "Assets",
        "Metadata templates"
      ]
    }
  ]
}