# coding: utf-8

"""
    Opendatasoft's Automation API Documentation

    Opendatasoft REST API to manage your portal and its catalog

    The version of the OpenAPI document: 1.0
    Contact: support@opendatasoft.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from opendatasoft_automation.models.annotate_dataset_field_configuration1_args import AnnotateDatasetFieldConfiguration1Args
from opendatasoft_automation.models.dataset_field_configuration import DatasetFieldConfiguration
from typing import Optional, Set
from typing_extensions import Self

class AnnotateDatasetFieldConfiguration(DatasetFieldConfiguration):
    """
    AnnotateDatasetFieldConfiguration
    """ # noqa: E501
    var_field: Annotated[str, Field(min_length=1, strict=True)] = Field(description="The technical identifier of the field whose annotation you want to configure", alias="field")
    annotation: StrictStr = Field(description="Annotations are a mean to configure special behavior for the fields.  Some annotations are only available for certain field types. | Annotation name     | Field type                                   | Description                                                                                                                                                                                     | |---------------------|----------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------| | id                  | all field types                              | Whether this field should constitute one of the keys of the records unique IDs. If no field has this annotation, all fields contribute to the creation of the records unique ID.                | | timeserie_precision | `date` and `datetime`                        | display precision of the field. Possible arguments are `year`, `month` and `day` for `date`, `hour` and `minute` for `datetime`                                                                 | | unit                | `int` and `decimal`                          | The unit of the field                                                                                                                                                                           | | decimals            | `decimal`                                    | The argument is the number of digits to appear after the decimal point                                                                                                                          | | sortable            | `text`                                       | whether the field should be sortable in table view                                                                                                                                              | | multivalued         | `text`                                       | whether the field contains multiple values separated by a character. The separator must be given as the argument                                                                                | | hierarchical        | `text`                                       | whether the field is hierarchical. The separator must be given as the argument                                                                                                                  |")
    args: Optional[List[AnnotateDatasetFieldConfiguration1Args]] = None
    __properties: ClassVar[List[str]] = ["uid", "type", "label", "field", "annotation", "args"]

    @field_validator('annotation')
    def annotation_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['id', 'timeserie_precision', 'unit', 'decimals', 'sortable', 'multivalued', 'hierarchical']):
            raise ValueError("must be one of enum values ('id', 'timeserie_precision', 'unit', 'decimals', 'sortable', 'multivalued', 'hierarchical')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AnnotateDatasetFieldConfiguration from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in args (list)
        _items = []
        if self.args:
            for _item_args in self.args:
                if _item_args:
                    _items.append(_item_args.to_dict())
            _dict['args'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AnnotateDatasetFieldConfiguration from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "uid": obj.get("uid"),
            "type": obj.get("type"),
            "label": obj.get("label"),
            "field": obj.get("field"),
            "annotation": obj.get("annotation"),
            "args": [AnnotateDatasetFieldConfiguration1Args.from_dict(_item) for _item in obj["args"]] if obj.get("args") is not None else None
        })
        return _obj


