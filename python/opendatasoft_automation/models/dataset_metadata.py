# coding: utf-8

"""
    Opendatasoft's Automation API Documentation

    Opendatasoft REST API to manage your portal and its catalog

    The version of the OpenAPI document: 1.0
    Contact: support@opendatasoft.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from opendatasoft_automation.models.dataset_metadata_asset_content_configuration import DatasetMetadataAssetContentConfiguration
from opendatasoft_automation.models.dataset_metadata_default import DatasetMetadataDefault
from opendatasoft_automation.models.dataset_metadata_internal import DatasetMetadataInternal
from opendatasoft_automation.models.dataset_metadata_value import DatasetMetadataValue
from opendatasoft_automation.models.dataset_metadata_visualization import DatasetMetadataVisualization
from typing import Optional, Set
from typing_extensions import Self

class DatasetMetadata(BaseModel):
    """
    The data describing the dataset itself.
    """ # noqa: E501
    default: DatasetMetadataDefault
    visualization: Optional[DatasetMetadataVisualization] = None
    internal: Optional[DatasetMetadataInternal] = None
    asset_content_configuration: Optional[DatasetMetadataAssetContentConfiguration] = None
    custom_template_name: Optional[Dict[str, DatasetMetadataValue]] = Field(default=None, description="Additional values for custom metadata templates you have configured on your portal.")
    __properties: ClassVar[List[str]] = ["default", "visualization", "internal", "asset_content_configuration", "custom_template_name"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DatasetMetadata from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of default
        if self.default:
            _dict['default'] = self.default.to_dict()
        # override the default output from pydantic by calling `to_dict()` of visualization
        if self.visualization:
            _dict['visualization'] = self.visualization.to_dict()
        # override the default output from pydantic by calling `to_dict()` of internal
        if self.internal:
            _dict['internal'] = self.internal.to_dict()
        # override the default output from pydantic by calling `to_dict()` of asset_content_configuration
        if self.asset_content_configuration:
            _dict['asset_content_configuration'] = self.asset_content_configuration.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each value in custom_template_name (dict)
        _field_dict = {}
        if self.custom_template_name:
            for _key_custom_template_name in self.custom_template_name:
                if self.custom_template_name[_key_custom_template_name]:
                    _field_dict[_key_custom_template_name] = self.custom_template_name[_key_custom_template_name].to_dict()
            _dict['custom_template_name'] = _field_dict
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DatasetMetadata from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "default": DatasetMetadataDefault.from_dict(obj["default"]) if obj.get("default") is not None else None,
            "visualization": DatasetMetadataVisualization.from_dict(obj["visualization"]) if obj.get("visualization") is not None else None,
            "internal": DatasetMetadataInternal.from_dict(obj["internal"]) if obj.get("internal") is not None else None,
            "asset_content_configuration": DatasetMetadataAssetContentConfiguration.from_dict(obj["asset_content_configuration"]) if obj.get("asset_content_configuration") is not None else None,
            "custom_template_name": dict(
                (_k, DatasetMetadataValue.from_dict(_v))
                for _k, _v in obj["custom_template_name"].items()
            )
            if obj.get("custom_template_name") is not None
            else None
        })
        return _obj


