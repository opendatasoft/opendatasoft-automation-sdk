# coding: utf-8

"""
    Opendatasoft's Automation API Documentation

    Opendatasoft REST API to manage your portal and its catalog

    The version of the OpenAPI document: 1.0
    Contact: support@opendatasoft.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from importlib import import_module
from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Union
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

from typing import TYPE_CHECKING
if TYPE_CHECKING:
    from opendatasoft_automation.models.amazon_s3_datasource import AmazonS3Datasource
    from opendatasoft_automation.models.azure_blob_storage_datasource import AzureBlobStorageDatasource
    from opendatasoft_automation.models.federated_datasource import FederatedDatasource
    from opendatasoft_automation.models.ftp_datasource import FTPDatasource
    from opendatasoft_automation.models.google_drive_datasource import GoogleDriveDatasource
    from opendatasoft_automation.models.http_datasource import HTTPDatasource
    from opendatasoft_automation.models.sharepoint_datasource import SharepointDatasource
    from opendatasoft_automation.models.uploaded_file_datasource import UploadedFileDatasource
    from opendatasoft_automation.models.ods_form_datasource import OdsFormDatasource
    from opendatasoft_automation.models.snowflake_odbc_datasource import SnowflakeODBCDatasource

class Datasource(BaseModel):
    """
    Datasource
    """ # noqa: E501
    type: Annotated[str, Field(min_length=1, strict=True)]
    __properties: ClassVar[List[str]] = ["type"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    # JSON field name that stores the object type
    __discriminator_property_name: ClassVar[str] = 'type'

    # discriminator mappings
    __discriminator_value_class_map: ClassVar[Dict[str, str]] = {
        'amazon_s3': 'AmazonS3Datasource','azure_blob_storage': 'AzureBlobStorageDatasource','federated': 'FederatedDatasource','ftp': 'FTPDatasource','google_drive': 'GoogleDriveDatasource','http': 'HTTPDatasource','sharepoint': 'SharepointDatasource','uploaded_file': 'UploadedFileDatasource','OdsFormDatasource': 'OdsFormDatasource','SnowflakeODBCDatasource': 'SnowflakeODBCDatasource'
    }

    @classmethod
    def get_discriminator_value(cls, obj: Dict[str, Any]) -> Optional[str]:
        """Returns the discriminator value (object type) of the data"""
        discriminator_value = obj[cls.__discriminator_property_name]
        if discriminator_value:
            return cls.__discriminator_value_class_map.get(discriminator_value)
        else:
            return None

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Union[AmazonS3Datasource, AzureBlobStorageDatasource, FederatedDatasource, FTPDatasource, GoogleDriveDatasource, HTTPDatasource, SharepointDatasource, UploadedFileDatasource, OdsFormDatasource, SnowflakeODBCDatasource]]:
        """Create an instance of Datasource from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict[str, Any]) -> Optional[Union[AmazonS3Datasource, AzureBlobStorageDatasource, FederatedDatasource, FTPDatasource, GoogleDriveDatasource, HTTPDatasource, SharepointDatasource, UploadedFileDatasource, OdsFormDatasource, SnowflakeODBCDatasource]]:
        """Create an instance of Datasource from a dict"""
        # look up the object type based on discriminator mapping
        object_type = cls.get_discriminator_value(obj)
        if object_type ==  'AmazonS3Datasource':
            return import_module("opendatasoft_automation.models.amazon_s3_datasource").AmazonS3Datasource.from_dict(obj)
        if object_type ==  'AzureBlobStorageDatasource':
            return import_module("opendatasoft_automation.models.azure_blob_storage_datasource").AzureBlobStorageDatasource.from_dict(obj)
        if object_type ==  'FederatedDatasource':
            return import_module("opendatasoft_automation.models.federated_datasource").FederatedDatasource.from_dict(obj)
        if object_type ==  'FTPDatasource':
            return import_module("opendatasoft_automation.models.ftp_datasource").FTPDatasource.from_dict(obj)
        if object_type ==  'GoogleDriveDatasource':
            return import_module("opendatasoft_automation.models.google_drive_datasource").GoogleDriveDatasource.from_dict(obj)
        if object_type ==  'HTTPDatasource':
            return import_module("opendatasoft_automation.models.http_datasource").HTTPDatasource.from_dict(obj)
        if object_type ==  'SharepointDatasource':
            return import_module("opendatasoft_automation.models.sharepoint_datasource").SharepointDatasource.from_dict(obj)
        if object_type ==  'UploadedFileDatasource':
            return import_module("opendatasoft_automation.models.uploaded_file_datasource").UploadedFileDatasource.from_dict(obj)
        if object_type ==  'OdsFormDatasource':
            return import_module("opendatasoft_automation.models.ods_form_datasource").OdsFormDatasource.from_dict(obj)
        if object_type ==  'SnowflakeODBCDatasource':
            return import_module("opendatasoft_automation.models.snowflake_odbc_datasource").SnowflakeODBCDatasource.from_dict(obj)

        raise ValueError("Datasource failed to lookup discriminator value from " +
                            json.dumps(obj) + ". Discriminator property name: " + cls.__discriminator_property_name +
                            ", mapping: " + json.dumps(cls.__discriminator_value_class_map))


