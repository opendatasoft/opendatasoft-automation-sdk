# coding: utf-8

"""
    Opendatasoft's Automation API Documentation

    Opendatasoft REST API to manage your portal and its catalog

    The version of the OpenAPI document: 1.0
    Contact: support@opendatasoft.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from opendatasoft_automation.models.get_dataset_status200_response_records_errors_inner import GetDatasetStatus200ResponseRecordsErrorsInner
from typing import Optional, Set
from typing_extensions import Self

class GetDatasetStatus200Response(BaseModel):
    """
    GetDatasetStatus200Response
    """ # noqa: E501
    status: Optional[StrictStr] = None
    previous: Optional[StrictStr] = None
    next: Optional[StrictStr] = None
    since: Optional[datetime] = Field(default=None, description="Date when the dataset entered the current status")
    is_published: Optional[StrictBool] = None
    message: Optional[StrictStr] = None
    records_errors: Optional[List[GetDatasetStatus200ResponseRecordsErrorsInner]] = Field(default=None, description="The record error describes errors which occurred during the processing. An error comes from: - a processor: when a value is invalid or an operation failed - a type conversion: when a value cannot be converted. For example the string \"s\" converted to an integer.")
    params: Optional[Dict[str, Any]] = Field(default=None, description="Status-dependent additional information. For example, if `status` is `limit reached`, this will contain an `error` object that contains a `limit_type`, a `limit` and a `value`.")
    __properties: ClassVar[List[str]] = ["status", "previous", "next", "since", "is_published", "message", "records_errors", "params"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['idle', 'error', 'limit_reached', 'queued', 'aborting_processing', 'processing', 'deleting', 'saving_version']):
            raise ValueError("must be one of enum values ('idle', 'error', 'limit_reached', 'queued', 'aborting_processing', 'processing', 'deleting', 'saving_version')")
        return value

    @field_validator('previous')
    def previous_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['idle', 'error', 'limit_reached', 'queued', 'aborting_processing', 'processing', 'deleting', 'saving_version']):
            raise ValueError("must be one of enum values ('idle', 'error', 'limit_reached', 'queued', 'aborting_processing', 'processing', 'deleting', 'saving_version')")
        return value

    @field_validator('next')
    def next_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['idle', 'error', 'limit_reached', 'queued', 'aborting_processing', 'processing', 'deleting', 'saving_version']):
            raise ValueError("must be one of enum values ('idle', 'error', 'limit_reached', 'queued', 'aborting_processing', 'processing', 'deleting', 'saving_version')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetDatasetStatus200Response from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in records_errors (list)
        _items = []
        if self.records_errors:
            for _item_records_errors in self.records_errors:
                if _item_records_errors:
                    _items.append(_item_records_errors.to_dict())
            _dict['records_errors'] = _items
        # set to None if previous (nullable) is None
        # and model_fields_set contains the field
        if self.previous is None and "previous" in self.model_fields_set:
            _dict['previous'] = None

        # set to None if next (nullable) is None
        # and model_fields_set contains the field
        if self.next is None and "next" in self.model_fields_set:
            _dict['next'] = None

        # set to None if is_published (nullable) is None
        # and model_fields_set contains the field
        if self.is_published is None and "is_published" in self.model_fields_set:
            _dict['is_published'] = None

        # set to None if message (nullable) is None
        # and model_fields_set contains the field
        if self.message is None and "message" in self.model_fields_set:
            _dict['message'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetDatasetStatus200Response from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "status": obj.get("status"),
            "previous": obj.get("previous"),
            "next": obj.get("next"),
            "since": obj.get("since"),
            "is_published": obj.get("is_published"),
            "message": obj.get("message"),
            "records_errors": [GetDatasetStatus200ResponseRecordsErrorsInner.from_dict(_item) for _item in obj["records_errors"]] if obj.get("records_errors") is not None else None,
            "params": obj.get("params")
        })
        return _obj


