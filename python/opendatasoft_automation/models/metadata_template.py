# coding: utf-8

"""
    Opendatasoft's Automation API Documentation

    Opendatasoft REST API to manage your portal and its catalog

    The version of the OpenAPI document: 1.0
    Contact: support@opendatasoft.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from opendatasoft_automation.models.metadata_template_field import MetadataTemplateField
from opendatasoft_automation.models.related_user_read_only import RelatedUserReadOnly
from typing import Optional, Set
from typing_extensions import Self

class MetadataTemplate(BaseModel):
    """
    Metadata Template
    """ # noqa: E501
    name: Annotated[str, Field(min_length=1, strict=True)] = Field(description="Name (identifier) of the template")
    title: StrictStr = Field(description="Title (description) of the template")
    is_active: StrictBool = Field(description="True if the template is (needs to be) activated. False otherwise.")
    is_always_active: Optional[StrictBool] = Field(default=None, description="True if the template can't be deactivated.")
    is_system: Optional[StrictBool] = Field(default=None, description="True if the template is provided by the system. A system template cannot be modifiable nor removable. False for all other templates.")
    var_schema: List[MetadataTemplateField] = Field(alias="schema")
    created_at: Optional[datetime] = Field(default=None, description="Date when the template was created")
    created_by: Optional[RelatedUserReadOnly] = None
    updated_at: Optional[datetime] = Field(default=None, description="Date when the template was last edited")
    updated_by: Optional[RelatedUserReadOnly] = None
    type: StrictStr = Field(description="The type of the template. Only templates with type `basic` or `admin` can be created.")
    __properties: ClassVar[List[str]] = ["name", "title", "is_active", "is_always_active", "is_system", "schema", "created_at", "created_by", "updated_at", "updated_by", "type"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['interop', 'basic', 'extra', 'admin']):
            raise ValueError("must be one of enum values ('interop', 'basic', 'extra', 'admin')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MetadataTemplate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "is_always_active",
            "is_system",
            "created_at",
            "updated_at",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in var_schema (list)
        _items = []
        if self.var_schema:
            for _item_var_schema in self.var_schema:
                if _item_var_schema:
                    _items.append(_item_var_schema.to_dict())
            _dict['schema'] = _items
        # override the default output from pydantic by calling `to_dict()` of created_by
        if self.created_by:
            _dict['created_by'] = self.created_by.to_dict()
        # override the default output from pydantic by calling `to_dict()` of updated_by
        if self.updated_by:
            _dict['updated_by'] = self.updated_by.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MetadataTemplate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "title": obj.get("title"),
            "is_active": obj.get("is_active"),
            "is_always_active": obj.get("is_always_active"),
            "is_system": obj.get("is_system"),
            "schema": [MetadataTemplateField.from_dict(_item) for _item in obj["schema"]] if obj.get("schema") is not None else None,
            "created_at": obj.get("created_at"),
            "created_by": RelatedUserReadOnly.from_dict(obj["created_by"]) if obj.get("created_by") is not None else None,
            "updated_at": obj.get("updated_at"),
            "updated_by": RelatedUserReadOnly.from_dict(obj["updated_by"]) if obj.get("updated_by") is not None else None,
            "type": obj.get("type")
        })
        return _obj


