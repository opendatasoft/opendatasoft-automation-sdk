# coding: utf-8

"""
    Opendatasoft's Automation API Documentation

    Opendatasoft REST API to manage your portal and its catalog

    The version of the OpenAPI document: 1.0
    Contact: support@opendatasoft.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from opendatasoft_automation.models.metadata_template_field_suggestions_exhaustive import MetadataTemplateFieldSuggestionsExhaustive
from typing import Optional, Set
from typing_extensions import Self

class MetadataTemplateFieldSuggestions(BaseModel):
    """
    Suggested values provided when calling the suggest_url with the appropriate parameters.
    """ # noqa: E501
    hits: Optional[List[StrictStr]] = None
    nb_hits: Optional[Union[StrictFloat, StrictInt]] = None
    page: Optional[Union[StrictFloat, StrictInt]] = None
    hits_per_page: Optional[Union[StrictFloat, StrictInt]] = None
    exhaustive_nb_hits: Optional[StrictBool] = None
    exhaustive_typo: Optional[StrictBool] = None
    exhaustive: Optional[MetadataTemplateFieldSuggestionsExhaustive] = None
    query: Optional[StrictStr] = None
    params: Optional[StrictStr] = None
    processing_time_ms: Optional[Union[StrictFloat, StrictInt]] = None
    __properties: ClassVar[List[str]] = ["hits", "nb_hits", "page", "hits_per_page", "exhaustive_nb_hits", "exhaustive_typo", "exhaustive", "query", "params", "processing_time_ms"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MetadataTemplateFieldSuggestions from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "hits",
            "nb_hits",
            "page",
            "hits_per_page",
            "exhaustive_nb_hits",
            "exhaustive_typo",
            "query",
            "params",
            "processing_time_ms",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of exhaustive
        if self.exhaustive:
            _dict['exhaustive'] = self.exhaustive.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MetadataTemplateFieldSuggestions from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "hits": obj.get("hits"),
            "nb_hits": obj.get("nb_hits"),
            "page": obj.get("page"),
            "hits_per_page": obj.get("hits_per_page"),
            "exhaustive_nb_hits": obj.get("exhaustive_nb_hits"),
            "exhaustive_typo": obj.get("exhaustive_typo"),
            "exhaustive": MetadataTemplateFieldSuggestionsExhaustive.from_dict(obj["exhaustive"]) if obj.get("exhaustive") is not None else None,
            "query": obj.get("query"),
            "params": obj.get("params"),
            "processing_time_ms": obj.get("processing_time_ms")
        })
        return _obj


