# coding: utf-8

"""
    Opendatasoft's Automation API Documentation

    Opendatasoft REST API to manage your portal and its catalog

    The version of the OpenAPI document: 1.0
    Contact: support@opendatasoft.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import ConfigDict, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from opendatasoft_automation.models.sharepoint_auth import SharepointAuth
from typing import Optional, Set
from typing_extensions import Self

class SharepointOIDCAuth(SharepointAuth):
    """
    SharepointOIDCAuth
    """ # noqa: E501
    nonce: Optional[StrictStr] = None
    grant_type: StrictStr
    code: Optional[StrictStr] = None
    claims: Optional[Dict[str, Any]]
    __properties: ClassVar[List[str]] = ["type", "nonce", "grant_type", "code", "claims"]

    @field_validator('grant_type')
    def grant_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['authorization_code']):
            raise ValueError("must be one of enum values ('authorization_code')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SharepointOIDCAuth from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "claims",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if nonce (nullable) is None
        # and model_fields_set contains the field
        if self.nonce is None and "nonce" in self.model_fields_set:
            _dict['nonce'] = None

        # set to None if code (nullable) is None
        # and model_fields_set contains the field
        if self.code is None and "code" in self.model_fields_set:
            _dict['code'] = None

        # set to None if claims (nullable) is None
        # and model_fields_set contains the field
        if self.claims is None and "claims" in self.model_fields_set:
            _dict['claims'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SharepointOIDCAuth from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "type": obj.get("type"),
            "nonce": obj.get("nonce"),
            "grant_type": obj.get("grant_type"),
            "code": obj.get("code"),
            "claims": obj.get("claims")
        })
        return _obj


