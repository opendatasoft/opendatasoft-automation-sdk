# coding: utf-8

"""
    Opendatasoft's Automation API Documentation

    Opendatasoft REST API to manage your portal and its catalog

    The version of the OpenAPI document: 1.0
    Contact: support@opendatasoft.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from opendatasoft_automation.models.related_user_read_only import RelatedUserReadOnly
from opendatasoft_automation.models.studio_page_contents_inner import StudioPageContentsInner
from typing import Optional, Set
from typing_extensions import Self

class StudioPage(BaseModel):
    """
    StudioPage
    """ # noqa: E501
    uid: Optional[Annotated[str, Field(min_length=1, strict=True)]] = Field(default=None, description="Unique identifier of the page")
    slug: Optional[Annotated[str, Field(min_length=1, strict=True)]] = Field(default=None, description="Human-readable identifier used to generate the page URL")
    public: Optional[StrictBool] = Field(default=False, description="Defines if the page is visible to a few specific users, or every user who can explore the portal")
    contents: Optional[List[StudioPageContentsInner]] = None
    first_published_at: Optional[datetime] = Field(default=None, description="Date when the page was first published")
    created_at: Optional[datetime] = Field(default=None, description="Date when the page was created")
    updated_at: Optional[datetime] = Field(default=None, description="Date when the page was last edited")
    created_by: Optional[RelatedUserReadOnly] = None
    __properties: ClassVar[List[str]] = ["uid", "slug", "public", "contents", "first_published_at", "created_at", "updated_at", "created_by"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of StudioPage from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "uid",
            "contents",
            "first_published_at",
            "created_at",
            "updated_at",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in contents (list)
        _items = []
        if self.contents:
            for _item_contents in self.contents:
                if _item_contents:
                    _items.append(_item_contents.to_dict())
            _dict['contents'] = _items
        # override the default output from pydantic by calling `to_dict()` of created_by
        if self.created_by:
            _dict['created_by'] = self.created_by.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of StudioPage from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "uid": obj.get("uid"),
            "slug": obj.get("slug"),
            "public": obj.get("public") if obj.get("public") is not None else False,
            "contents": [StudioPageContentsInner.from_dict(_item) for _item in obj["contents"]] if obj.get("contents") is not None else None,
            "first_published_at": obj.get("first_published_at"),
            "created_at": obj.get("created_at"),
            "updated_at": obj.get("updated_at"),
            "created_by": RelatedUserReadOnly.from_dict(obj["created_by"]) if obj.get("created_by") is not None else None
        })
        return _obj


