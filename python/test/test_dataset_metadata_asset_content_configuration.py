# coding: utf-8

"""
    Opendatasoft's Automation API Documentation

    Opendatasoft REST API to manage your portal and its catalog

    The version of the OpenAPI document: 1.0
    Contact: support@opendatasoft.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from opendatasoft_automation.models.dataset_metadata_asset_content_configuration import DatasetMetadataAssetContentConfiguration

class TestDatasetMetadataAssetContentConfiguration(unittest.TestCase):
    """DatasetMetadataAssetContentConfiguration unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> DatasetMetadataAssetContentConfiguration:
        """Test DatasetMetadataAssetContentConfiguration
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `DatasetMetadataAssetContentConfiguration`
        """
        model = DatasetMetadataAssetContentConfiguration()
        if include_optional:
            return DatasetMetadataAssetContentConfiguration(
                facets = {value=Metadata value, remote_value=Metadata value on the remote dataset, if there is one, override_remote_value=true},
                fields_displayed_in_specific_languages = {value=Metadata value, remote_value=Metadata value on the remote dataset, if there is one, override_remote_value=true},
                records_search_boosts = {value=Metadata value, remote_value=Metadata value on the remote dataset, if there is one, override_remote_value=true}
            )
        else:
            return DatasetMetadataAssetContentConfiguration(
        )
        """

    def testDatasetMetadataAssetContentConfiguration(self):
        """Test DatasetMetadataAssetContentConfiguration"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
